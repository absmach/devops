// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	errors "github.com/absmach/magistrala/pkg/errors"
	mock "github.com/stretchr/testify/mock"

	sdk "github.com/absmach/magistrala/pkg/sdk/go"

	time "time"
)

// SDK is an autogenerated mock type for the SDK type
type SDK struct {
	mock.Mock
}

// AcceptInvitation provides a mock function with given fields: domainID, token
func (_m *SDK) AcceptInvitation(domainID string, token string) error {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddBootstrap provides a mock function with given fields: cfg, domainID, token
func (_m *SDK) AddBootstrap(cfg sdk.BootstrapConfig, domainID string, token string) (string, errors.SDKError) {
	ret := _m.Called(cfg, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AddBootstrap")
	}

	var r0 string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.BootstrapConfig, string, string) (string, errors.SDKError)); ok {
		return rf(cfg, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.BootstrapConfig, string, string) string); ok {
		r0 = rf(cfg, domainID, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(sdk.BootstrapConfig, string, string) errors.SDKError); ok {
		r1 = rf(cfg, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// AddUserGroupToChannel provides a mock function with given fields: channelID, req, domainID, token
func (_m *SDK) AddUserGroupToChannel(channelID string, req sdk.UserGroupsRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(channelID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserGroupToChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UserGroupsRequest, string, string) errors.SDKError); ok {
		r0 = rf(channelID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// AddUserToChannel provides a mock function with given fields: channelID, req, domainID, token
func (_m *SDK) AddUserToChannel(channelID string, req sdk.UsersRelationRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(channelID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UsersRelationRequest, string, string) errors.SDKError); ok {
		r0 = rf(channelID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// AddUserToDomain provides a mock function with given fields: domainID, req, token
func (_m *SDK) AddUserToDomain(domainID string, req sdk.UsersRelationRequest, token string) errors.SDKError {
	ret := _m.Called(domainID, req, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UsersRelationRequest, string) errors.SDKError); ok {
		r0 = rf(domainID, req, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// AddUserToGroup provides a mock function with given fields: groupID, req, domainID, token
func (_m *SDK) AddUserToGroup(groupID string, req sdk.UsersRelationRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(groupID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroup")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UsersRelationRequest, string, string) errors.SDKError); ok {
		r0 = rf(groupID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Bootstrap provides a mock function with given fields: externalID, externalKey
func (_m *SDK) Bootstrap(externalID string, externalKey string) (sdk.BootstrapConfig, errors.SDKError) {
	ret := _m.Called(externalID, externalKey)

	if len(ret) == 0 {
		panic("no return value specified for Bootstrap")
	}

	var r0 sdk.BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.BootstrapConfig, errors.SDKError)); ok {
		return rf(externalID, externalKey)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.BootstrapConfig); ok {
		r0 = rf(externalID, externalKey)
	} else {
		r0 = ret.Get(0).(sdk.BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(externalID, externalKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// BootstrapSecure provides a mock function with given fields: externalID, externalKey, cryptoKey
func (_m *SDK) BootstrapSecure(externalID string, externalKey string, cryptoKey string) (sdk.BootstrapConfig, errors.SDKError) {
	ret := _m.Called(externalID, externalKey, cryptoKey)

	if len(ret) == 0 {
		panic("no return value specified for BootstrapSecure")
	}

	var r0 sdk.BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.BootstrapConfig, errors.SDKError)); ok {
		return rf(externalID, externalKey, cryptoKey)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.BootstrapConfig); ok {
		r0 = rf(externalID, externalKey, cryptoKey)
	} else {
		r0 = ret.Get(0).(sdk.BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(externalID, externalKey, cryptoKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Bootstraps provides a mock function with given fields: pm, domainID, token
func (_m *SDK) Bootstraps(pm sdk.PageMetadata, domainID string, token string) (sdk.BootstrapPage, errors.SDKError) {
	ret := _m.Called(pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Bootstraps")
	}

	var r0 sdk.BootstrapPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) (sdk.BootstrapPage, errors.SDKError)); ok {
		return rf(pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) sdk.BootstrapPage); ok {
		r0 = rf(pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.BootstrapPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Channel provides a mock function with given fields: id, domainID, token
func (_m *SDK) Channel(id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Channel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Channel); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ChannelPermissions provides a mock function with given fields: id, domainID, token
func (_m *SDK) ChannelPermissions(id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ChannelPermissions")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Channel); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Channels provides a mock function with given fields: pm, domainID, token
func (_m *SDK) Channels(pm sdk.PageMetadata, domainID string, token string) (sdk.ChannelsPage, errors.SDKError) {
	ret := _m.Called(pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Channels")
	}

	var r0 sdk.ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) (sdk.ChannelsPage, errors.SDKError)); ok {
		return rf(pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) sdk.ChannelsPage); ok {
		r0 = rf(pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ChannelsByThing provides a mock function with given fields: thingID, pm, domainID, token
func (_m *SDK) ChannelsByThing(thingID string, pm sdk.PageMetadata, domainID string, token string) (sdk.ChannelsPage, errors.SDKError) {
	ret := _m.Called(thingID, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ChannelsByThing")
	}

	var r0 sdk.ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.ChannelsPage, errors.SDKError)); ok {
		return rf(thingID, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.ChannelsPage); ok {
		r0 = rf(thingID, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(thingID, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Children provides a mock function with given fields: id, pm, domainID, token
func (_m *SDK) Children(id string, pm sdk.PageMetadata, domainID string, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _m.Called(id, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Children")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return rf(id, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.GroupsPage); ok {
		r0 = rf(id, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(id, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Connect provides a mock function with given fields: conns, domainID, token
func (_m *SDK) Connect(conns sdk.Connection, domainID string, token string) errors.SDKError {
	ret := _m.Called(conns, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Connection, string, string) errors.SDKError); ok {
		r0 = rf(conns, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ConnectThing provides a mock function with given fields: thingID, chanID, domainID, token
func (_m *SDK) ConnectThing(thingID string, chanID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(thingID, chanID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ConnectThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(thingID, chanID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// CreateChannel provides a mock function with given fields: channel, domainID, token
func (_m *SDK) CreateChannel(channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(channel, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(channel, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) sdk.Channel); ok {
		r0 = rf(channel, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(sdk.Channel, string, string) errors.SDKError); ok {
		r1 = rf(channel, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: d, token
func (_m *SDK) CreateDomain(d sdk.Domain, token string) (sdk.Domain, errors.SDKError) {
	ret := _m.Called(d, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) (sdk.Domain, errors.SDKError)); ok {
		return rf(d, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) sdk.Domain); ok {
		r0 = rf(d, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}

	if rf, ok := ret.Get(1).(func(sdk.Domain, string) errors.SDKError); ok {
		r1 = rf(d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: group, domainID, token
func (_m *SDK) CreateGroup(group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(group, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(group, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) sdk.Group); ok {
		r0 = rf(group, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(sdk.Group, string, string) errors.SDKError); ok {
		r1 = rf(group, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: topic, contact, token
func (_m *SDK) CreateSubscription(topic string, contact string, token string) (string, errors.SDKError) {
	ret := _m.Called(topic, contact, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 string
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (string, errors.SDKError)); ok {
		return rf(topic, contact, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(topic, contact, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(topic, contact, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateThing provides a mock function with given fields: thing, domainID, token
func (_m *SDK) CreateThing(thing sdk.Thing, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(thing, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateThing")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Thing, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(thing, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Thing, string, string) sdk.Thing); ok {
		r0 = rf(thing, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(sdk.Thing, string, string) errors.SDKError); ok {
		r1 = rf(thing, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateThings provides a mock function with given fields: things, domainID, token
func (_m *SDK) CreateThings(things []sdk.Thing, domainID string, token string) ([]sdk.Thing, errors.SDKError) {
	ret := _m.Called(things, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateThings")
	}

	var r0 []sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func([]sdk.Thing, string, string) ([]sdk.Thing, errors.SDKError)); ok {
		return rf(things, domainID, token)
	}
	if rf, ok := ret.Get(0).(func([]sdk.Thing, string, string) []sdk.Thing); ok {
		r0 = rf(things, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sdk.Thing)
		}
	}

	if rf, ok := ret.Get(1).(func([]sdk.Thing, string, string) errors.SDKError); ok {
		r1 = rf(things, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: lt
func (_m *SDK) CreateToken(lt sdk.Login) (sdk.Token, errors.SDKError) {
	ret := _m.Called(lt)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Login) (sdk.Token, errors.SDKError)); ok {
		return rf(lt)
	}
	if rf, ok := ret.Get(0).(func(sdk.Login) sdk.Token); ok {
		r0 = rf(lt)
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}

	if rf, ok := ret.Get(1).(func(sdk.Login) errors.SDKError); ok {
		r1 = rf(lt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user, token
func (_m *SDK) CreateUser(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: id, domainID, token
func (_m *SDK) DeleteChannel(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: id, domainID, token
func (_m *SDK) DeleteGroup(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteInvitation provides a mock function with given fields: userID, domainID, token
func (_m *SDK) DeleteInvitation(userID string, domainID string, token string) error {
	ret := _m.Called(userID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, domainID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubscription provides a mock function with given fields: id, token
func (_m *SDK) DeleteSubscription(id string, token string) errors.SDKError {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteThing provides a mock function with given fields: id, domainID, token
func (_m *SDK) DeleteThing(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id, token
func (_m *SDK) DeleteUser(id string, token string) errors.SDKError {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(id, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisableChannel provides a mock function with given fields: id, domainID, token
func (_m *SDK) DisableChannel(id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Channel); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableDomain provides a mock function with given fields: domainID, token
func (_m *SDK) DisableDomain(domainID string, token string) errors.SDKError {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisableGroup provides a mock function with given fields: id, domainID, token
func (_m *SDK) DisableGroup(id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Group); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableThing provides a mock function with given fields: id, domainID, token
func (_m *SDK) DisableThing(id string, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableThing")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Thing); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DisableUser provides a mock function with given fields: id, token
func (_m *SDK) DisableUser(id string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: connIDs, domainID, token
func (_m *SDK) Disconnect(connIDs sdk.Connection, domainID string, token string) errors.SDKError {
	ret := _m.Called(connIDs, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Connection, string, string) errors.SDKError); ok {
		r0 = rf(connIDs, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// DisconnectThing provides a mock function with given fields: thingID, chanID, domainID, token
func (_m *SDK) DisconnectThing(thingID string, chanID string, domainID string, token string) errors.SDKError {
	ret := _m.Called(thingID, chanID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) errors.SDKError); ok {
		r0 = rf(thingID, chanID, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Domain provides a mock function with given fields: domainID, token
func (_m *SDK) Domain(domainID string, token string) (sdk.Domain, errors.SDKError) {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Domain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.Domain, errors.SDKError)); ok {
		return rf(domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.Domain); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// DomainPermissions provides a mock function with given fields: domainID, token
func (_m *SDK) DomainPermissions(domainID string, token string) (sdk.Domain, errors.SDKError) {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for DomainPermissions")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.Domain, errors.SDKError)); ok {
		return rf(domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.Domain); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Domains provides a mock function with given fields: pm, token
func (_m *SDK) Domains(pm sdk.PageMetadata, token string) (sdk.DomainsPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Domains")
	}

	var r0 sdk.DomainsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.DomainsPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.DomainsPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableChannel provides a mock function with given fields: id, domainID, token
func (_m *SDK) EnableChannel(id string, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Channel); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableDomain provides a mock function with given fields: domainID, token
func (_m *SDK) EnableDomain(domainID string, token string) errors.SDKError {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) errors.SDKError); ok {
		r0 = rf(domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// EnableGroup provides a mock function with given fields: id, domainID, token
func (_m *SDK) EnableGroup(id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Group); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableThing provides a mock function with given fields: id, domainID, token
func (_m *SDK) EnableThing(id string, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableThing")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Thing); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// EnableUser provides a mock function with given fields: id, token
func (_m *SDK) EnableUser(id string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Group provides a mock function with given fields: id, domainID, token
func (_m *SDK) Group(id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Group); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// GroupPermissions provides a mock function with given fields: id, domainID, token
func (_m *SDK) GroupPermissions(id string, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for GroupPermissions")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Group); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Groups provides a mock function with given fields: pm, domainID, token
func (_m *SDK) Groups(pm sdk.PageMetadata, domainID string, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _m.Called(pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Groups")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return rf(pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) sdk.GroupsPage); ok {
		r0 = rf(pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Health provides a mock function with given fields: service
func (_m *SDK) Health(service string) (sdk.HealthInfo, errors.SDKError) {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 sdk.HealthInfo
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (sdk.HealthInfo, errors.SDKError)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(string) sdk.HealthInfo); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Get(0).(sdk.HealthInfo)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(service)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Invitation provides a mock function with given fields: userID, domainID, token
func (_m *SDK) Invitation(userID string, domainID string, token string) (sdk.Invitation, error) {
	ret := _m.Called(userID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Invitation")
	}

	var r0 sdk.Invitation
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Invitation, error)); ok {
		return rf(userID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Invitation); ok {
		r0 = rf(userID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Invitation)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userID, domainID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invitations provides a mock function with given fields: pm, token
func (_m *SDK) Invitations(pm sdk.PageMetadata, token string) (sdk.InvitationPage, error) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Invitations")
	}

	var r0 sdk.InvitationPage
	var r1 error
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.InvitationPage, error)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.InvitationPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.InvitationPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) error); ok {
		r1 = rf(pm, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IssueCert provides a mock function with given fields: thingID, validity, domainID, token
func (_m *SDK) IssueCert(thingID string, validity string, domainID string, token string) (sdk.Cert, errors.SDKError) {
	ret := _m.Called(thingID, validity, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for IssueCert")
	}

	var r0 sdk.Cert
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (sdk.Cert, errors.SDKError)); ok {
		return rf(thingID, validity, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) sdk.Cert); ok {
		r0 = rf(thingID, validity, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Cert)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(thingID, validity, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Journal provides a mock function with given fields: entityType, entityID, pm, token
func (_m *SDK) Journal(entityType string, entityID string, pm sdk.PageMetadata, token string) (sdk.JournalsPage, error) {
	ret := _m.Called(entityType, entityID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Journal")
	}

	var r0 sdk.JournalsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) (sdk.JournalsPage, error)); ok {
		return rf(entityType, entityID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, sdk.PageMetadata, string) sdk.JournalsPage); ok {
		r0 = rf(entityType, entityID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.JournalsPage)
	}

	if rf, ok := ret.Get(1).(func(string, string, sdk.PageMetadata, string) error); ok {
		r1 = rf(entityType, entityID, pm, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelUserGroups provides a mock function with given fields: channelID, pm, domainID, token
func (_m *SDK) ListChannelUserGroups(channelID string, pm sdk.PageMetadata, domainID string, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _m.Called(channelID, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelUserGroups")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return rf(channelID, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.GroupsPage); ok {
		r0 = rf(channelID, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(channelID, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListChannelUsers provides a mock function with given fields: channelID, pm, domainID, token
func (_m *SDK) ListChannelUsers(channelID string, pm sdk.PageMetadata, domainID string, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(channelID, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelUsers")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(channelID, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.UsersPage); ok {
		r0 = rf(channelID, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(channelID, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListDomainUsers provides a mock function with given fields: domainID, pm, token
func (_m *SDK) ListDomainUsers(domainID string, pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(domainID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainUsers")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(domainID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = rf(domainID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(domainID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListGroupChannels provides a mock function with given fields: groupID, pm, domainID, token
func (_m *SDK) ListGroupChannels(groupID string, pm sdk.PageMetadata, domainID string, token string) (sdk.ChannelsPage, errors.SDKError) {
	ret := _m.Called(groupID, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupChannels")
	}

	var r0 sdk.ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.ChannelsPage, errors.SDKError)); ok {
		return rf(groupID, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.ChannelsPage); ok {
		r0 = rf(groupID, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(groupID, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListGroupUsers provides a mock function with given fields: groupID, pm, domainID, token
func (_m *SDK) ListGroupUsers(groupID string, pm sdk.PageMetadata, domainID string, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(groupID, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupUsers")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(groupID, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.UsersPage); ok {
		r0 = rf(groupID, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(groupID, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: pm, token
func (_m *SDK) ListSubscriptions(pm sdk.PageMetadata, token string) (sdk.SubscriptionPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 sdk.SubscriptionPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.SubscriptionPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.SubscriptionPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.SubscriptionPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListThingUsers provides a mock function with given fields: thingID, pm, domainID, token
func (_m *SDK) ListThingUsers(thingID string, pm sdk.PageMetadata, domainID string, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(thingID, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ListThingUsers")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(thingID, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.UsersPage); ok {
		r0 = rf(thingID, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(thingID, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserChannels provides a mock function with given fields: userID, pm, token
func (_m *SDK) ListUserChannels(userID string, pm sdk.PageMetadata, token string) (sdk.ChannelsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserChannels")
	}

	var r0 sdk.ChannelsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.ChannelsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.ChannelsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserDomains provides a mock function with given fields: userID, pm, token
func (_m *SDK) ListUserDomains(userID string, pm sdk.PageMetadata, token string) (sdk.DomainsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserDomains")
	}

	var r0 sdk.DomainsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.DomainsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.DomainsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserGroups provides a mock function with given fields: userID, pm, token
func (_m *SDK) ListUserGroups(userID string, pm sdk.PageMetadata, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserGroups")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.GroupsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ListUserThings provides a mock function with given fields: userID, pm, token
func (_m *SDK) ListUserThings(userID string, pm sdk.PageMetadata, token string) (sdk.ThingsPage, errors.SDKError) {
	ret := _m.Called(userID, pm, token)

	if len(ret) == 0 {
		panic("no return value specified for ListUserThings")
	}

	var r0 sdk.ThingsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.ThingsPage, errors.SDKError)); ok {
		return rf(userID, pm, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.ThingsPage); ok {
		r0 = rf(userID, pm, token)
	} else {
		r0 = ret.Get(0).(sdk.ThingsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(userID, pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Members provides a mock function with given fields: groupID, meta, token
func (_m *SDK) Members(groupID string, meta sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(groupID, meta, token)

	if len(ret) == 0 {
		panic("no return value specified for Members")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(groupID, meta, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = rf(groupID, meta, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(groupID, meta, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Parents provides a mock function with given fields: id, pm, domainID, token
func (_m *SDK) Parents(id string, pm sdk.PageMetadata, domainID string, token string) (sdk.GroupsPage, errors.SDKError) {
	ret := _m.Called(id, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Parents")
	}

	var r0 sdk.GroupsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.GroupsPage, errors.SDKError)); ok {
		return rf(id, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.GroupsPage); ok {
		r0 = rf(id, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.GroupsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(id, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ReadMessages provides a mock function with given fields: pm, chanID, domainID, token
func (_m *SDK) ReadMessages(pm sdk.MessagePageMetadata, chanID string, domainID string, token string) (sdk.MessagesPage, errors.SDKError) {
	ret := _m.Called(pm, chanID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ReadMessages")
	}

	var r0 sdk.MessagesPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.MessagePageMetadata, string, string, string) (sdk.MessagesPage, errors.SDKError)); ok {
		return rf(pm, chanID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.MessagePageMetadata, string, string, string) sdk.MessagesPage); ok {
		r0 = rf(pm, chanID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.MessagesPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.MessagePageMetadata, string, string, string) errors.SDKError); ok {
		r1 = rf(pm, chanID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: token
func (_m *SDK) RefreshToken(token string) (sdk.Token, errors.SDKError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 sdk.Token
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (sdk.Token, errors.SDKError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) sdk.Token); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(sdk.Token)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// RejectInvitation provides a mock function with given fields: domainID, token
func (_m *SDK) RejectInvitation(domainID string, token string) error {
	ret := _m.Called(domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RejectInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(domainID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveBootstrap provides a mock function with given fields: id, domainID, token
func (_m *SDK) RemoveBootstrap(id string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBootstrap")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(id, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserFromChannel provides a mock function with given fields: channelID, req, domainID, token
func (_m *SDK) RemoveUserFromChannel(channelID string, req sdk.UsersRelationRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(channelID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UsersRelationRequest, string, string) errors.SDKError); ok {
		r0 = rf(channelID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserFromDomain provides a mock function with given fields: domainID, userID, token
func (_m *SDK) RemoveUserFromDomain(domainID string, userID string, token string) errors.SDKError {
	ret := _m.Called(domainID, userID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromDomain")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(domainID, userID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserFromGroup provides a mock function with given fields: groupID, req, domainID, token
func (_m *SDK) RemoveUserFromGroup(groupID string, req sdk.UsersRelationRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(groupID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UsersRelationRequest, string, string) errors.SDKError); ok {
		r0 = rf(groupID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RemoveUserGroupFromChannel provides a mock function with given fields: channelID, req, domainID, token
func (_m *SDK) RemoveUserGroupFromChannel(channelID string, req sdk.UserGroupsRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(channelID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserGroupFromChannel")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UserGroupsRequest, string, string) errors.SDKError); ok {
		r0 = rf(channelID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ResetPassword provides a mock function with given fields: password, confPass, token
func (_m *SDK) ResetPassword(password string, confPass string, token string) errors.SDKError {
	ret := _m.Called(password, confPass, token)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(password, confPass, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ResetPasswordRequest provides a mock function with given fields: email
func (_m *SDK) ResetPasswordRequest(email string) errors.SDKError {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ResetPasswordRequest")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) errors.SDKError); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// RevokeCert provides a mock function with given fields: thingID, domainID, token
func (_m *SDK) RevokeCert(thingID string, domainID string, token string) (time.Time, errors.SDKError) {
	ret := _m.Called(thingID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeCert")
	}

	var r0 time.Time
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (time.Time, errors.SDKError)); ok {
		return rf(thingID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) time.Time); ok {
		r0 = rf(thingID, domainID, token)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(thingID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: pm, token
func (_m *SDK) SearchUsers(pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// SendInvitation provides a mock function with given fields: invitation, token
func (_m *SDK) SendInvitation(invitation sdk.Invitation, token string) error {
	ret := _m.Called(invitation, token)

	if len(ret) == 0 {
		panic("no return value specified for SendInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Invitation, string) error); ok {
		r0 = rf(invitation, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: chanID, msg, key
func (_m *SDK) SendMessage(chanID string, msg string, key string) errors.SDKError {
	ret := _m.Called(chanID, msg, key)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) errors.SDKError); ok {
		r0 = rf(chanID, msg, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// SetContentType provides a mock function with given fields: ct
func (_m *SDK) SetContentType(ct sdk.ContentType) errors.SDKError {
	ret := _m.Called(ct)

	if len(ret) == 0 {
		panic("no return value specified for SetContentType")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.ContentType) errors.SDKError); ok {
		r0 = rf(ct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// ShareThing provides a mock function with given fields: thingID, req, domainID, token
func (_m *SDK) ShareThing(thingID string, req sdk.UsersRelationRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(thingID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ShareThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UsersRelationRequest, string, string) errors.SDKError); ok {
		r0 = rf(thingID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// Thing provides a mock function with given fields: id, domainID, token
func (_m *SDK) Thing(id string, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Thing")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Thing); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ThingPermissions provides a mock function with given fields: id, domainID, token
func (_m *SDK) ThingPermissions(id string, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ThingPermissions")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Thing); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Things provides a mock function with given fields: pm, domainID, token
func (_m *SDK) Things(pm sdk.PageMetadata, domainID string, token string) (sdk.ThingsPage, errors.SDKError) {
	ret := _m.Called(pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Things")
	}

	var r0 sdk.ThingsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) (sdk.ThingsPage, errors.SDKError)); ok {
		return rf(pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string, string) sdk.ThingsPage); ok {
		r0 = rf(pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ThingsPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ThingsByChannel provides a mock function with given fields: chanID, pm, domainID, token
func (_m *SDK) ThingsByChannel(chanID string, pm sdk.PageMetadata, domainID string, token string) (sdk.ThingsPage, errors.SDKError) {
	ret := _m.Called(chanID, pm, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ThingsByChannel")
	}

	var r0 sdk.ThingsPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) (sdk.ThingsPage, errors.SDKError)); ok {
		return rf(chanID, pm, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, sdk.PageMetadata, string, string) sdk.ThingsPage); ok {
		r0 = rf(chanID, pm, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.ThingsPage)
	}

	if rf, ok := ret.Get(1).(func(string, sdk.PageMetadata, string, string) errors.SDKError); ok {
		r1 = rf(chanID, pm, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UnshareThing provides a mock function with given fields: thingID, req, domainID, token
func (_m *SDK) UnshareThing(thingID string, req sdk.UsersRelationRequest, domainID string, token string) errors.SDKError {
	ret := _m.Called(thingID, req, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UnshareThing")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, sdk.UsersRelationRequest, string, string) errors.SDKError); ok {
		r0 = rf(thingID, req, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// UpdateBootstrap provides a mock function with given fields: cfg, domainID, token
func (_m *SDK) UpdateBootstrap(cfg sdk.BootstrapConfig, domainID string, token string) errors.SDKError {
	ret := _m.Called(cfg, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBootstrap")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.BootstrapConfig, string, string) errors.SDKError); ok {
		r0 = rf(cfg, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// UpdateBootstrapCerts provides a mock function with given fields: id, clientCert, clientKey, ca, domainID, token
func (_m *SDK) UpdateBootstrapCerts(id string, clientCert string, clientKey string, ca string, domainID string, token string) (sdk.BootstrapConfig, errors.SDKError) {
	ret := _m.Called(id, clientCert, clientKey, ca, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBootstrapCerts")
	}

	var r0 sdk.BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (sdk.BootstrapConfig, errors.SDKError)); ok {
		return rf(id, clientCert, clientKey, ca, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) sdk.BootstrapConfig); ok {
		r0 = rf(id, clientCert, clientKey, ca, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, clientCert, clientKey, ca, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateBootstrapConnection provides a mock function with given fields: id, channels, domainID, token
func (_m *SDK) UpdateBootstrapConnection(id string, channels []string, domainID string, token string) errors.SDKError {
	ret := _m.Called(id, channels, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBootstrapConnection")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, []string, string, string) errors.SDKError); ok {
		r0 = rf(id, channels, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// UpdateChannel provides a mock function with given fields: channel, domainID, token
func (_m *SDK) UpdateChannel(channel sdk.Channel, domainID string, token string) (sdk.Channel, errors.SDKError) {
	ret := _m.Called(channel, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 sdk.Channel
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) (sdk.Channel, errors.SDKError)); ok {
		return rf(channel, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Channel, string, string) sdk.Channel); ok {
		r0 = rf(channel, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	if rf, ok := ret.Get(1).(func(sdk.Channel, string, string) errors.SDKError); ok {
		r1 = rf(channel, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateDomain provides a mock function with given fields: d, token
func (_m *SDK) UpdateDomain(d sdk.Domain, token string) (sdk.Domain, errors.SDKError) {
	ret := _m.Called(d, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 sdk.Domain
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) (sdk.Domain, errors.SDKError)); ok {
		return rf(d, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Domain, string) sdk.Domain); ok {
		r0 = rf(d, token)
	} else {
		r0 = ret.Get(0).(sdk.Domain)
	}

	if rf, ok := ret.Get(1).(func(sdk.Domain, string) errors.SDKError); ok {
		r1 = rf(d, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: group, domainID, token
func (_m *SDK) UpdateGroup(group sdk.Group, domainID string, token string) (sdk.Group, errors.SDKError) {
	ret := _m.Called(group, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 sdk.Group
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) (sdk.Group, errors.SDKError)); ok {
		return rf(group, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Group, string, string) sdk.Group); ok {
		r0 = rf(group, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Group)
	}

	if rf, ok := ret.Get(1).(func(sdk.Group, string, string) errors.SDKError); ok {
		r1 = rf(group, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: oldPass, newPass, token
func (_m *SDK) UpdatePassword(oldPass string, newPass string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(oldPass, newPass, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.User, errors.SDKError)); ok {
		return rf(oldPass, newPass, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.User); ok {
		r0 = rf(oldPass, newPass, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(oldPass, newPass, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateProfilePicture provides a mock function with given fields: user, token
func (_m *SDK) UpdateProfilePicture(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilePicture")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateThing provides a mock function with given fields: thing, domainID, token
func (_m *SDK) UpdateThing(thing sdk.Thing, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(thing, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThing")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Thing, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(thing, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Thing, string, string) sdk.Thing); ok {
		r0 = rf(thing, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(sdk.Thing, string, string) errors.SDKError); ok {
		r1 = rf(thing, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateThingSecret provides a mock function with given fields: id, secret, domainID, token
func (_m *SDK) UpdateThingSecret(id string, secret string, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(id, secret, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingSecret")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(id, secret, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) sdk.Thing); ok {
		r0 = rf(id, secret, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) errors.SDKError); ok {
		r1 = rf(id, secret, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateThingTags provides a mock function with given fields: thing, domainID, token
func (_m *SDK) UpdateThingTags(thing sdk.Thing, domainID string, token string) (sdk.Thing, errors.SDKError) {
	ret := _m.Called(thing, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingTags")
	}

	var r0 sdk.Thing
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.Thing, string, string) (sdk.Thing, errors.SDKError)); ok {
		return rf(thing, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.Thing, string, string) sdk.Thing); ok {
		r0 = rf(thing, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	if rf, ok := ret.Get(1).(func(sdk.Thing, string, string) errors.SDKError); ok {
		r1 = rf(thing, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user, token
func (_m *SDK) UpdateUser(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserEmail provides a mock function with given fields: user, token
func (_m *SDK) UpdateUserEmail(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserEmail")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserRole provides a mock function with given fields: user, token
func (_m *SDK) UpdateUserRole(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUserTags provides a mock function with given fields: user, token
func (_m *SDK) UpdateUserTags(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserTags")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UpdateUsername provides a mock function with given fields: user, token
func (_m *SDK) UpdateUsername(user sdk.User, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsername")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.User, string) (sdk.User, errors.SDKError)); ok {
		return rf(user, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.User, string) sdk.User); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(sdk.User, string) errors.SDKError); ok {
		r1 = rf(user, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// User provides a mock function with given fields: id, token
func (_m *SDK) User(id string, token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.User, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.User); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// UserProfile provides a mock function with given fields: token
func (_m *SDK) UserProfile(token string) (sdk.User, errors.SDKError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for UserProfile")
	}

	var r0 sdk.User
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string) (sdk.User, errors.SDKError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) sdk.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(sdk.User)
	}

	if rf, ok := ret.Get(1).(func(string) errors.SDKError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Users provides a mock function with given fields: pm, token
func (_m *SDK) Users(pm sdk.PageMetadata, token string) (sdk.UsersPage, errors.SDKError) {
	ret := _m.Called(pm, token)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 sdk.UsersPage
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) (sdk.UsersPage, errors.SDKError)); ok {
		return rf(pm, token)
	}
	if rf, ok := ret.Get(0).(func(sdk.PageMetadata, string) sdk.UsersPage); ok {
		r0 = rf(pm, token)
	} else {
		r0 = ret.Get(0).(sdk.UsersPage)
	}

	if rf, ok := ret.Get(1).(func(sdk.PageMetadata, string) errors.SDKError); ok {
		r1 = rf(pm, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewBootstrap provides a mock function with given fields: id, domainID, token
func (_m *SDK) ViewBootstrap(id string, domainID string, token string) (sdk.BootstrapConfig, errors.SDKError) {
	ret := _m.Called(id, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewBootstrap")
	}

	var r0 sdk.BootstrapConfig
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.BootstrapConfig, errors.SDKError)); ok {
		return rf(id, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.BootstrapConfig); ok {
		r0 = rf(id, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.BootstrapConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(id, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewCert provides a mock function with given fields: certID, domainID, token
func (_m *SDK) ViewCert(certID string, domainID string, token string) (sdk.Cert, errors.SDKError) {
	ret := _m.Called(certID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCert")
	}

	var r0 sdk.Cert
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.Cert, errors.SDKError)); ok {
		return rf(certID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.Cert); ok {
		r0 = rf(certID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.Cert)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(certID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewCertByThing provides a mock function with given fields: thingID, domainID, token
func (_m *SDK) ViewCertByThing(thingID string, domainID string, token string) (sdk.CertSerials, errors.SDKError) {
	ret := _m.Called(thingID, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewCertByThing")
	}

	var r0 sdk.CertSerials
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string, string) (sdk.CertSerials, errors.SDKError)); ok {
		return rf(thingID, domainID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) sdk.CertSerials); ok {
		r0 = rf(thingID, domainID, token)
	} else {
		r0 = ret.Get(0).(sdk.CertSerials)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) errors.SDKError); ok {
		r1 = rf(thingID, domainID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// ViewSubscription provides a mock function with given fields: id, token
func (_m *SDK) ViewSubscription(id string, token string) (sdk.Subscription, errors.SDKError) {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for ViewSubscription")
	}

	var r0 sdk.Subscription
	var r1 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, string) (sdk.Subscription, errors.SDKError)); ok {
		return rf(id, token)
	}
	if rf, ok := ret.Get(0).(func(string, string) sdk.Subscription); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.Subscription)
	}

	if rf, ok := ret.Get(1).(func(string, string) errors.SDKError); ok {
		r1 = rf(id, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.SDKError)
		}
	}

	return r0, r1
}

// Whitelist provides a mock function with given fields: thingID, state, domainID, token
func (_m *SDK) Whitelist(thingID string, state int, domainID string, token string) errors.SDKError {
	ret := _m.Called(thingID, state, domainID, token)

	if len(ret) == 0 {
		panic("no return value specified for Whitelist")
	}

	var r0 errors.SDKError
	if rf, ok := ret.Get(0).(func(string, int, string, string) errors.SDKError); ok {
		r0 = rf(thingID, state, domainID, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.SDKError)
		}
	}

	return r0
}

// NewSDK creates a new instance of SDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSDK(t interface {
	mock.TestingT
	Cleanup(func())
}) *SDK {
	mock := &SDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
