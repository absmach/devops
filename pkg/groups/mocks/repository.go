// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	groups "github.com/absmach/magistrala/pkg/groups"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AssignParentGroup provides a mock function with given fields: ctx, parentGroupID, groupIDs
func (_m *Repository) AssignParentGroup(ctx context.Context, parentGroupID string, groupIDs ...string) error {
	ret := _m.Called(ctx, parentGroupID, groupIDs)

	if len(ret) == 0 {
		panic("no return value specified for AssignParentGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, parentGroupID, groupIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeStatus provides a mock function with given fields: ctx, group
func (_m *Repository) ChangeStatus(ctx context.Context, group groups.Group) (groups.Group, error) {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for ChangeStatus")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, groups.Group) (groups.Group, error)); ok {
		return rf(ctx, group)
	}
	if rf, ok := ret.Get(0).(func(context.Context, groups.Group) groups.Group); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, groups.Group) error); ok {
		r1 = rf(ctx, group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, groupID
func (_m *Repository) Delete(ctx context.Context, groupID string) error {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAll provides a mock function with given fields: ctx, gm
func (_m *Repository) RetrieveAll(ctx context.Context, gm groups.Page) (groups.Page, error) {
	ret := _m.Called(ctx, gm)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 groups.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, groups.Page) (groups.Page, error)); ok {
		return rf(ctx, gm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, groups.Page) groups.Page); ok {
		r0 = rf(ctx, gm)
	} else {
		r0 = ret.Get(0).(groups.Page)
	}

	if rf, ok := ret.Get(1).(func(context.Context, groups.Page) error); ok {
		r1 = rf(ctx, gm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByID provides a mock function with given fields: ctx, id
func (_m *Repository) RetrieveByID(ctx context.Context, id string) (groups.Group, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (groups.Group, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) groups.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByIDs provides a mock function with given fields: ctx, gm, ids
func (_m *Repository) RetrieveByIDs(ctx context.Context, gm groups.Page, ids ...string) (groups.Page, error) {
	ret := _m.Called(ctx, gm, ids)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByIDs")
	}

	var r0 groups.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, groups.Page, ...string) (groups.Page, error)); ok {
		return rf(ctx, gm, ids...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, groups.Page, ...string) groups.Page); ok {
		r0 = rf(ctx, gm, ids...)
	} else {
		r0 = ret.Get(0).(groups.Page)
	}

	if rf, ok := ret.Get(1).(func(context.Context, groups.Page, ...string) error); ok {
		r1 = rf(ctx, gm, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, g
func (_m *Repository) Save(ctx context.Context, g groups.Group) (groups.Group, error) {
	ret := _m.Called(ctx, g)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, groups.Group) (groups.Group, error)); ok {
		return rf(ctx, g)
	}
	if rf, ok := ret.Get(0).(func(context.Context, groups.Group) groups.Group); ok {
		r0 = rf(ctx, g)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, groups.Group) error); ok {
		r1 = rf(ctx, g)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignParentGroup provides a mock function with given fields: ctx, parentGroupID, groupIDs
func (_m *Repository) UnassignParentGroup(ctx context.Context, parentGroupID string, groupIDs ...string) error {
	ret := _m.Called(ctx, parentGroupID, groupIDs)

	if len(ret) == 0 {
		panic("no return value specified for UnassignParentGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, parentGroupID, groupIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, g
func (_m *Repository) Update(ctx context.Context, g groups.Group) (groups.Group, error) {
	ret := _m.Called(ctx, g)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 groups.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, groups.Group) (groups.Group, error)); ok {
		return rf(ctx, g)
	}
	if rf, ok := ret.Get(0).(func(context.Context, groups.Group) groups.Group); ok {
		r0 = rf(ctx, g)
	} else {
		r0 = ret.Get(0).(groups.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, groups.Group) error); ok {
		r1 = rf(ctx, g)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
