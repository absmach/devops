This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-08T19:50:02.890Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  workflows/
    helm-docs.yaml
    lint-test.yaml
    release.yaml
  ISSUE_TEMPLATE.md
  PULL_REQUEST_TEMPLATE.md
charts/
  supermq/
    charts/
      .gitignore
    secrets/
      .gitignore
      secrets.sh
    templates/
      _helpers.tpl
      adapter_coap-deployment.yaml
      adapter_coap-service.yaml
      adapter_http-deployment.yaml
      adapter_http-service.yaml
      adapter_mqtt-statefulstet.yaml
      auth-deployment.yaml
      auth-service.yaml
      certs-deployment.yaml
      certs-service.yaml
      channels-deployment.yaml
      channels-service.yaml
      clients-deployment.yaml
      clients-service.yaml
      domains-deployment.yaml
      domains-service.yaml
      envoy-config.yaml
      envoy.yaml
      fluentbit-deployment.yaml
      groups-deployment.yaml
      groups-service.yaml
      ingress.yaml
      invitations-deployment.yaml
      invitations-service.yaml
      journal-deployment.yaml
      journal-service.yaml
      loki-service.yaml
      nginx-internal.yaml
      spicedb-deployment.yaml
      spicedb-envoy-config.yaml
      spicedb-envoy-deployment.yaml
      spicedb-envoy-service.yaml
      spicedb-migration-job.yaml
      spicedb-schema.yaml
      spicedb-service.yaml
      ui-deployment.yaml
      ui-service.yaml
      users-deployment.yaml
      users-service.yaml
      ws-deployment.yaml
      ws-service.yaml
    .helmignore
    Chart.lock
    Chart.yaml
    README.md
    README.md.gotmpl
    values.yaml
scripts/
  vault/
    .gitignore
    config.hcl
    docker-compose.yml
    entrypoint.sh
    README.md
    supermq_clients_certs_issue.template.hcl
    vault_cmd.sh
    vault_create_approle.sh
    vault_init.sh
    vault_set_pki.sh
    vault.md
  .gitignore
  efk.sh
LICENSE
README.md

================================================================
Repository Files
================================================================

================
File: .github/workflows/helm-docs.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

name: Generate Helm Docs

on:
  push:
    branches:
      - master

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Generate Helm Docs
        id: helm-docs
        uses: losisin/helm-docs-github-action@v1.3.1
        with:
          chart-search-root: "charts/supermq"
          values-file: "values.yaml"
          output-file: "README.md"
          template-files: "README.md.gotmpl"
          git-push: false
          fail-on-diff: true

      - name: Show README diff
        if: failure() && steps.helm-docs.outcome == 'failure'
        run: git diff charts/supermq/README.md || echo "No git diff available."

================
File: .github/workflows/lint-test.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

name: Lint and Test Charts

on: pull_request

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.15.4

      - name: Add Helm repositories and update
        run: |
          helm repo add nats https://nats-io.github.io/k8s/helm/charts/
          helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo update

      - name: Update Helm dependencies
        run: |
          helm dependency update charts/supermq

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          ct lint --chart-dirs charts --target-branch ${{ github.event.repository.default_branch }}

      - name: Create kind cluster
        if: steps.list-changed.outputs.changed == 'true'
        uses: helm/kind-action@v1.10.0

      - name: Run chart-testing (install)
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          ct install --target-branch ${{ github.event.repository.default_branch }} --chart-dirs charts/supermq/charts

================
File: .github/workflows/release.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

name: Release Charts

on:
  push:
    branches:
      - master

jobs:
  release:
    permissions:
      contents: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: v3.15.4

      - name: Add Dependencies
        run: |
          helm repo add stable https://charts.helm.sh/stable
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo add nats https://nats-io.github.io/k8s/helm/charts/
          helm repo update

      - name: Update Helm dependencies
        run: |
          helm dependency update charts/supermq

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.HELM_RELEASE_TOKEN }}"

================
File: .github/ISSUE_TEMPLATE.md
================
<!--
The GitHub issue tracker is for bug reports and feature requests. General support can be found at
the following locations:

- Google group - https://groups.google.com/forum/#!forum/mainflux
- Gitter - https://gitter.im/mainflux/mainflux
-->

**FEATURE REQUEST**

1. Is there an open issue addressing this request? If it does, please add a "+1" reaction to the
   existing issue, otherwise proceed to step 2.

2. Describe the feature you are requesting, as well as the possible use case(s) for it.

3. Indicate the importance of this feature to you (must-have, should-have, nice-to-have).

**BUG REPORT**

1. What were you trying to achieve?

2. What are the expected results?

3. What are the received results?

4. What are the steps to reproduce the issue?

5. In what environment did you encounter the issue?

6. Additional information you deem important:

**ENHANCEMENT**
1. Describe the enhancement you are requesting. Enhancements include:
   - tests
   - code refactor
   - documentation
   - research
   - tooling

2. Indicate the importance of this enhancement to you (must-have, should-have, nice-to-have).

================
File: .github/PULL_REQUEST_TEMPLATE.md
================
Pull request title should be `MG-XXX - description` or `NOISSUE - description` where XXX is ID of issue that this PR relate to.
Please review the [CONTRIBUTING.md](https://github.com/absmach/magistrala/blob/master/CONTRIBUTING.md) file for detailed contributing guidelines.

### What does this do?

### Which issue(s) does this PR fix/relate to?
Put here `Resolves #XXX` to auto-close the issue that your PR fixes (if such)

### List any changes that modify/break current functionality

### Have you included tests for your changes?

### Did you document any new/modified functionality?

### Notes

================
File: charts/supermq/charts/.gitignore
================
*.tgz

================
File: charts/supermq/secrets/.gitignore
================
*.crt
*.key
*.txt
*nginx*

================
File: charts/supermq/secrets/secrets.sh
================
#!/bin/bash
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

kubectl -n mg create secret tls magistrala-server \
    --key magistrala-server.key \
    --cert magistrala-server.crt

kubectl -n mg create secret generic ca \
    --from-file=ca.crt

================
File: charts/supermq/templates/_helpers.tpl
================
{{- /*
Copyright (c) Abstract Machines
SPDX-License-Identifier: Apache-2.0
*/ -}}
{{- define "supermq.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{- define "supermq.fullname" -}}
{{- if .Values.fullnameOverride -}}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := default .Chart.Name .Values.nameOverride -}}
{{- if contains $name .Release.Name -}}
{{- .Release.Name | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{- define "supermq.gen-certs" -}}
{{- $altNames := list ( printf "%s.%s" (include "supermq.name" .) .Release.Namespace ) ( printf "%s.%s.svc" (include "supermq.name" .) .Release.Namespace ) -}}
{{- $ca := genCA "supermq-ca" 365 -}}
{{- $cert := genSignedCert ( include "supermq.name" . ) nil $altNames 365 $ca -}}
tls.crt: {{ $cert.Cert | b64enc }}
tls.key: {{ $cert.Key | b64enc }}
{{- end -}}


{{- define "validateSpiceDBDatastoreEngine" -}}
{{- if and (not (eq . "memory")) (not (eq . "postgres")) -}}
  {{- fail "Invalid value for .Values.spicedb.datastore.engine. Must be 'memory' or 'postgres'." -}}
{{- else -}}
  {{- . -}}
{{- end -}}
{{- end -}}

================
File: charts/supermq/templates/adapter_coap-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-adapter-coap
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: adapter-coap
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.adapter_coap.port }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: adapter-coap
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.adapter_coap.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-adapter-coap
          image: "{{ default (printf "%s/coap" .Values.defaults.image.rootRepository) .Values.adapter_coap.image.repository }}:{{ default .Values.defaults.image.tag .Values.adapter_coap.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.adapter_coap.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:{{ .Values.defaults.jaegerCollectorPort }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.adapter_coap.jaegerTraceRatio | quote  }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.adapter_coap.sendTelemetry | quote  }}
            - name: SMQ_MESSAGE_BROKER_URL
              value: nats://{{ .Release.Name }}-nats:{{ .Values.defaults.natsPort }}
            - name: SMQ_CLIENTS_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.clients.authGrpcPort }}
            - name: SMQ_CLIENTS_AUTH_GRPC_TIMEOUT
              value: {{ .Values.clients.grpcTimeout | quote }}
            - name: SMQ_CHANNELS_GRPC_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.grpcPort }}
            - name: SMQ_CHANNELS_GRPC_TIMEOUT
              value: {{ .Values.channels.grpcTimeout | quote }}
            - name: SMQ_COAP_ADAPTER_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.adapter_coap.logLevel | quote }}
            - name: SMQ_COAP_ADAPTER_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_COAP_ADAPTER_HTTP_PORT
              value: {{ .Values.adapter_coap.port | quote }}
            - name: SMQ_COAP_ADAPTER_HOST
              value: "0.0.0.0"
            - name: SMQ_COAP_ADAPTER_PORT
              value: {{ .Values.adapter_coap.port | quote }}
          ports:
            - containerPort: {{ .Values.adapter_coap.port }}
              protocol: UDP
              name: "udp-{{ .Values.adapter_coap.port }}"
            - containerPort: {{ .Values.adapter_coap.port }}
              name: "tcp-{{ .Values.adapter_coap.port }}"
              protocol: TCP
          stdin: true
          tty: true
      {{- with .Values.adapter_coap.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.adapter_coap.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.adapter_coap.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/adapter_coap-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-adapter-coap
spec:
  selector:
    app: {{ .Release.Name }}
    component: adapter-coap
  ports:
    - port: {{ .Values.adapter_coap.port }}
      protocol: UDP
      name: "udp-{{ .Values.adapter_coap.port }}"
    - port: {{ .Values.adapter_coap.port }}
      protocol: TCP
      name: "tcp-{{ .Values.adapter_coap.port }}"

================
File: charts/supermq/templates/adapter_http-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-adapter-http
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: adapter-http
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.adapter_http.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: adapter-http
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.adapter_http.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-adapter-http
          image: "{{ default (printf "%s/http" .Values.defaults.image.rootRepository) .Values.adapter_http.image.repository }}:{{ default .Values.defaults.image.tag .Values.adapter_http.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.adapter_http.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:{{ .Values.defaults.jaegerCollectorPort }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.users.jaegerTraceRatio | quote  }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.users.sendTelemetry | quote  }}
            - name: SMQ_HTTP_ADAPTER_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.adapter_http.logLevel | quote }}
            - name: SMQ_HTTP_ADAPTER_HOST
              value: "0.0.0.0"
            - name: SMQ_HTTP_ADAPTER_PORT
              value: {{ .Values.adapter_http.httpPort | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.clients.authGrpcPort }}
            - name: SMQ_CLIENTS_AUTH_GRPC_TIMEOUT
              value: {{ .Values.clients.grpcTimeout | quote }}
            - name: SMQ_CHANNELS_GRPC_URL
              value: {{ .Release.Name }}channels:{{ .Values.channels.grpcPort }}
            - name: SMQ_CHANNELS_GRPC_TIMEOUT
              value: {{ .Values.channels.grpcTimeout | quote }}
            - name : SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_MESSAGE_BROKER_URL
              value: nats://{{ .Release.Name }}-nats:{{ .Values.defaults.natsPort }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
          ports:
            - containerPort: {{ .Values.adapter_http.httpPort }}
              protocol: TCP
      {{- with .Values.adapter_http.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.adapter_http.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.adapter_http.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/adapter_http-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-adapter-http
spec:
  selector:
    app: {{ .Release.Name }}
    component: adapter-http
  ports:
    - port: {{ .Values.adapter_http.httpPort }}
      protocol: TCP

================
File: charts/supermq/templates/adapter_mqtt-statefulstet.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-view-clusterrole
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
- kind: ServiceAccount
  name: default
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-mqtt
  labels:
    app: {{ .Release.Name }}
    component: mqtt
spec:
  selector:
    app: {{ .Release.Name }}
    component: mqtt
  ports:
    - port: {{ .Values.mqtt.adapter.mqttPort }}
      protocol: TCP
      name: "{{ .Values.mqtt.adapter.mqttPort }}"
    - port: {{ .Values.mqtt.adapter.wsPort }}
      protocol: TCP
      name: "{{ .Values.mqtt.adapter.wsPort }}"
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mqtt
spec:
  replicas: {{ .Values.defaults.replicaCount }}
  serviceName: {{ .Release.Name }}-mqtt
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: mqtt
  template:
    metadata:
      labels:
        app: {{ .Release.Name}}
        component: mqtt
    spec:
      {{- $adapterPullSecrets := .Values.mqtt.adapter.image.pullSecrets | default (dict) }}
      {{- $brokerPullSecrets := .Values.mqtt.broker.image.pullSecrets | default (dict) }}
      {{- $combinedPullSecrets := merge $adapterPullSecrets $brokerPullSecrets  }}
      {{- with (default .Values.defaults.image.pullSecrets $combinedPullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext:
        {{ toYaml .Values.mqtt.securityContext | nindent 8 }}
      containers:
          #broker
        - name: {{ .Release.Name }}-broker-mqtt
          image: "{{ default (printf "%s/vernemq" .Values.defaults.image.rootRepository) .Values.mqtt.broker.image.repository }}:{{ default .Values.defaults.image.tag .Values.mqtt.broker.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.mqtt.broker.image.pullPolicy }}
          volumeMounts:
            - name: data
              mountPath: /vernemq/data
          env:
            - name: SMQ_MQTT_ADAPTER_LOG_LEVEL
              value: {{ .Values.mqtt.broker.logLevel }}
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SMQ_MQTT_INSTANCE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: DOCKER_VERNEMQ_LOG__CONSOLE__LEVEL
              value: {{ default .Values.defaults.logLevel .Values.mqtt.broker.logLevel }}
            - name: SMQ_MQTT_VERNEMQ_GRPC_POOL_SIZE
              value: "1000"
            - name: DOCKER_VERNEMQ_ALLOW_ANONYMOUS
              value: "on"
            - name: DOCKER_VERNEMQ_DISCOVERY_KUBERNETES
              value: "1"
            - name: DOCKER_VERNEMQ_KUBERNETES_LABEL_SELECTOR
              value: "app={{ .Release.Name }},component=mqtt"
            - name: DOCKER_VERNEMQ_ALLOW_REGISTER_DURING_NETSPLIT
              value: "on"
            - name: DOCKER_VERNEMQ_MAX_OFFLINE_MESSAGES
              value: "-1"
            - name: DOCKER_VERNEMQ_MAX_ONLINE_MESSAGES
              value: "-1"
            - name: DOCKER_VERNEMQ_MAX_INFLIGHT_MESSAGES
              value: "0"
            - name: DOCKER_VERNEMQ_PLUGINS__VMQ_PASSWD
              value: "off"
            - name: DOCKER_VERNEMQ_LISTENER__NR_OF_ACCEPTORS
              value: "1000"
            - name: DOCKER_VERNEMQ_LISTENER__TCP__LOCALHOST
              value: "127.0.0.1:1883"
            - name: DOCKER_VERNEMQ_LISTENER__WS__LOCALHOST
              value: "127.0.0.1:8080"
          ports:
            - containerPort: 1883
              protocol: TCP
            - containerPort: 8080
              protocol: TCP
            - containerPort: 8880
              protocol: TCP
            - containerPort: 8888
              protocol: TCP
            - containerPort: 44053
              protocol: TCP
            - containerPort: 4369
              protocol: TCP
            - containerPort: 9100
              protocol: TCP
            - containerPort: 9101
              protocol: TCP
            - containerPort: 9102
              protocol: TCP
            - containerPort: 9103
              protocol: TCP
            - containerPort: 9104
              protocol: TCP
            - containerPort: 9105
              protocol: TCP
            - containerPort: 9106
              protocol: TCP
            - containerPort: 9107
              protocol: TCP
            - containerPort: 9108
              protocol: TCP
            - containerPort: 9109
              protocol: TCP
          stdin: true
          tty: true
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          #adapter
        - name: {{ .Release.Name }}-adapter-mqtt
          image: "{{ default (printf "%s/mqtt" .Values.defaults.image.rootRepository) .Values.mqtt.adapter.image.repository }}:{{ default .Values.defaults.image.tag .Values.mqtt.adapter.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.mqtt.adapter.image.pullPolicy}}
          ports:
          - containerPort: {{ .Values.mqtt.adapter.mqttPort }}
            protocol: TCP
          - containerPort: {{ .Values.mqtt.adapter.wsPort }}
            protocol: TCP
          stdin: true
          tty: true
          env:
            - name: SMQ_MQTT_ADAPTER_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.mqtt.adapter.logLevel }}
            - name: SMQ_MQTT_ADAPTER_MQTT_PORT
              value: {{ .Values.mqtt.adapter.mqttPort | quote }}
            - name: SMQ_MQTT_ADAPTER_WS_PORT
              value: {{ .Values.mqtt.adapter.wsPort | quote }}
            - name: SMQ_MQTT_ADAPTER_FORWARDER_TIMEOUT
              value: {{ .Values.mqtt.adapter.forwarderTimeout | quote}}
            - name: SMQ_MQTT_ADAPTER_MQTT_QOS
              value: {{ .Values.mqtt.adapter.qos | quote }}
            - name: SMQ_MQTT_ADAPTER_WS_TARGET_PATH
              value: "/mqtt"
            - name: SMQ_CLIENTS_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.clients.authGrpcPort | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_TIMEOUT
              value: {{ .Values.clients.grpcTimeout | quote }}
            - name: SMQ_CHANNELS_GRPC_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.grpcPort | quote }}
            - name: SMQ_CHANNELS_GRPC_TIMEOUT
              value: {{ .Values.channels.grpcTimeout | quote }}
            - name: SMQ_MESSAGE_BROKER_URL
              value: nats://{{ .Release.Name }}-nats:{{ .Values.defaults.natsPort }}
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:{{ .Values.defaults.jaegerCollectorPort }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.adapter_coap.jaegerTraceRatio | quote  }}
            - name: SMQ_MQTT_ADAPTER_MQTT_TARGET_HOST
              value: localhost
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.users.sendTelemetry | quote  }}
            - name: SMQ_MQTT_ADAPTER_MQTT_TARGET_PORT
              value: {{ .Values.mqtt.broker.mqttPort | quote }}
            - name: SMQ_MQTT_ADAPTER_WS_TARGET_HOST
              value: localhost
            - name: SMQ_MQTT_ADAPTER_WS_TARGET_PORT
              value: {{ .Values.mqtt.broker.wsPort | quote }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_MQTT_ADAPTER_MQTT_TARGET_HEALTH_CHECK
              value: http://localhost:8888/health
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.mqtt.broker.persistentVolume.size }}

================
File: charts/supermq/templates/auth-deployment.yaml
================
---
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-spicedb-schema-zed
data:
  schema.zed: |-
{{ include "spicedb.schema.zed" . | indent 4 }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-auth
spec:
  serviceName: {{ .Release.Name }}-auth-headless
  replicas: {{ .Values.defaults.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: auth
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.auth.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: auth
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.auth.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-auth
          image: "{{ default (printf "%s/auth" .Values.defaults.image.rootRepository) .Values.auth.image.repository }}:{{ default .Values.defaults.image.tag .Values.auth.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.auth.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Values.jaeger.fullnameOverride }}-collector:{{ .Values.jaeger.collector.service.otlp.http.port }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.auth.jaegerTraceRatio | quote }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.auth.sendTelemetry | quote }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_AUTH_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.auth.logLevel | quote }}
            - name: SMQ_AUTH_GRPC_HOST
              value: "0.0.0.0"
            - name: SMQ_AUTH_GRPC_PORT
              value: {{ .Values.auth.grpcPort | quote }}
            - name: SMQ_AUTH_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_AUTH_HTTP_PORT
              value: {{ .Values.auth.httpPort  | quote }}
            - name: SMQ_AUTH_ACCESS_TOKEN_DURATION
              value: {{ .Values.auth.accessTokenDuration | quote }}
            - name: SMQ_AUTH_REFRESH_TOKEN_DURATION
              value: {{ .Values.auth.refreshTokenDuration | quote }}
            - name: SMQ_AUTH_INVITATION_DURATION
              value: {{ .Values.auth.invitationDuration | quote }}
            - name: SMQ_AUTH_SECRET_KEY
              value: {{ .Values.auth.secretKey | quote }}
            - name: SMQ_AUTH_DB_HOST
            {{- if .Values.postgresqlauth.enabled }}
              value: {{ .Release.Name }}-postgresqlauth
            {{- else }}
              value: {{ .Values.postgresqlauth.host | quote }}
            {{- end }}
            - name: SMQ_AUTH_DB_PORT
              value: {{ .Values.postgresqlauth.port | quote }}
            - name: SMQ_AUTH_DB_NAME
              value: {{ .Values.postgresqlauth.database | quote }}
            - name: SMQ_AUTH_DB_USER
              value: {{ .Values.postgresqlauth.username | quote }}
            - name: SMQ_AUTH_DB_PASS
              value: {{ .Values.postgresqlauth.password | quote }}
            - name: SMQ_SPICEDB_HOST
              value: {{ .Release.Name }}-spicedb-envoy
            - name: SMQ_SPICEDB_PORT
              value: {{ .Values.spicedb.grpc.port | quote}}
            - name: SMQ_SPICEDB_SCHEMA_FILE
              value: /schema.zed
            - name: SMQ_SPICEDB_PRE_SHARED_KEY
              value: {{ .Values.spicedb.grpc.presharedKey | quote }}
          ports:
            - containerPort: {{ .Values.auth.httpPort }}
              protocol: TCP
            - containerPort: {{ .Values.auth.grpcPort }}
              protocol: TCP
          volumeMounts:
            - name: auth-data
              mountPath: /supermq-data
            - mountPath: /schema.zed
              name: spicedb-schema-zed
              subPath: schema.zed
      volumes:
        - name: spicedb-schema-zed
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-spicedb-schema-zed
            optional: false
      {{- with .Values.auth.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.auth.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.auth.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

  volumeClaimTemplates:
    - metadata:
        name: auth-data
      spec:
        accessModes: 
          - ReadWriteOnce
        storageClassName: do-block-storage
        resources:
          requests:
            storage: 1Gi

================
File: charts/supermq/templates/auth-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-auth
spec:
  selector:
    app: {{ .Release.Name }}
    component: auth
  ports:
    - protocol: TCP
      port: {{ .Values.auth.httpPort }}
      name: {{ .Release.Name }}-auth-http-{{ .Values.auth.httpPort }}
    - protocol: TCP
      port: {{ .Values.auth.grpcPort }}
      name: {{ .Release.Name }}-auth-grpc-{{ .Values.auth.grpcPort }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-auth-headless
spec:
  selector:
    app: {{ .Release.Name }}
    component: auth
  ports:
    - protocol: TCP
      port: {{ .Values.auth.httpPort }}
      name: {{ .Release.Name }}-auth-http-{{ .Values.auth.httpPort }}
    - protocol: TCP
      port: {{ .Values.auth.grpcPort }}
      name: {{ .Release.Name }}-auth-grpc-{{ .Values.auth.grpcPort }}
  clusterIP: None

================
File: charts/supermq/templates/certs-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

{{- if .Values.certs.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-certs
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: certs
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.certs.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: certs
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.certs.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-certs
          image: "{{ default (printf "%s/certs" .Values.defaults.image.rootRepository) .Values.certs.image.repository }}:{{ default .Values.defaults.image.tag .Values.certs.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.certs.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Values.jaeger.fullnameOverride }}-collector:{{ .Values.jaeger.collector.service.otlp.http.port }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.certs.jaegerTraceRatio | quote }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.certs.sendTelemetry | quote }}
            - name: SMQ_CERTS_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.certs.logLevel | quote }}
            - name: SMQ_CERTS_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_CERTS_HTTP_PORT
              value: {{ .Values.certs.httpPort | quote }}
            - name: SMQ_CERTS_SDK_HOST
              value: {{ .Values.certs.sdkHost | quote }}
            - name: SMQ_CERTS_SDK_CERTS_URL
              value: {{ .Values.certs.sdkCertsUrl | quote }}
            - name: SMQ_CERTS_SDK_TLS_VERIFICATION
              value: {{ .Values.certs.sdkTlsVerification | quote }}
            - name: SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_CLIENTS_URL
              value: http://{{ .Release.Name }}-clients:{{ .Values.clients.httpPort }}
            - name: SMQ_CERTS_DB_HOST
            {{- if .Values.postgresqlcerts.enabled }}
              value: {{ .Release.Name }}-postgresqlcerts
            {{- else }}
              value: {{ .Values.postgresqlcerts.host | quote }}
            {{- end }}
            - name: SMQ_CERTS_DB_PORT
              value: {{ .Values.postgresqlcerts.port | quote }}
            - name: SMQ_CERTS_DB_NAME
              value: {{ .Values.postgresqlcerts.database | quote }}
            - name: SMQ_CERTS_DB_USER
              value: {{ .Values.postgresqlcerts.username | quote }}
            - name: SMQ_CERTS_DB_PASS
              value: {{ .Values.postgresqlcerts.password | quote }}
            - name: SMQ_CERTS_SIGN_CA_PATH
              value: {{ .Values.certs.signCAPath }}
            - name: SMQ_CERTS_SIGN_CA_KEY_PATH
              value: {{ .Values.certs.signCAKeyPath }}
            - name: SMQ_CERTS_VAULT_HOST
              value: {{ .Values.certs.vault.url | quote }}
            - name:  SMQ_CERTS_VAULT_APPROLE_ROLEID
              value: {{ .Values.certs.vault.approleRoleid | quote }}
            - name: SMQ_CERTS_VAULT_APPROLE_SECRET
              value: {{ .Values.certs.vault.approleSecret | quote }}
            - name: SMQ_CERTS_VAULT_NAMESPACE
              value: {{ .Values.certs.vault.namespace | quote }}
            - name: SMQ_CERTS_VAULT_CLIENTS_CERTS_PKI_PATH
              value: {{ .Values.certs.vault.clientsCertsPkiPath | quote }}
            - name: SMQ_CERTS_VAULT_CLIENTS_CERTS_PKI_ROLE_NAME
              value: {{ .Values.certs.vault.clientsCertsPkiRoleName | quote }}
          ports:
            - containerPort: {{ .Values.certs.httpPort }}
              protocol: TCP
{{- end }}

================
File: charts/supermq/templates/certs-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

{{- if .Values.certs.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-certs
spec:
  selector:
    app: {{ .Release.Name }}
    component: certs
  ports:
    - port: {{ .Values.certs.httpPort }}
      protocol: TCP
      name: {{ .Release.Name }}-certs-{{ .Values.certs.httpPort }}
{{- end }}

================
File: charts/supermq/templates/channels-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-channels
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: channels
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.channels.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: channels
    spec:
      containers:
        - name: {{ .Release.Name }}-channels
          image: "{{ default (printf "%s/channels" .Values.defaults.image.rootRepository) .Values.channels.image.repository }}:{{ default .Values.defaults.image.tag .Values.channels.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.channels.image.pullPolicy }}
          env:
            - name: SMQ_CHANNELS_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.channels.logLevel  | quote }}
            - name: SMQ_CHANNELS_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_CHANNELS_HTTP_PORT
              value: "{{ .Values.channels.httpPort }}"
            - name: SMQ_CHANNELS_GRPC_HOST
              value: "0.0.0.0"
            - name: SMQ_CHANNELS_GRPC_PORT
              value: "{{ .Values.channels.grpcPort }}"
            - name: SMQ_CHANNELS_DB_HOST
            {{- if .Values.postgresqlchannels.enabled }}
              value: {{ .Release.Name }}-postgresqlchannels
            {{- else }}
              value: {{ .Values.postgresqlchannels.host | quote }}
            {{- end }}
            - name: SMQ_CHANNELS_DB_PORT
              value: {{ .Values.postgresqlchannels.port | quote }}
            - name: SMQ_CHANNELS_DB_NAME
              value: {{ .Values.postgresqlchannels.database | quote }}
            - name: SMQ_CHANNELS_DB_USER
              value: {{ .Values.postgresqlchannels.username | quote }}
            - name: SMQ_CHANNELS_DB_PASS
              value: {{ .Values.postgresqlchannels.password | quote }}
            - name : SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_AUTH_GRPC_CLIENT_CERT
              value: {{ .Values.auth.grpcClientCert | quote }}
            - name: SMQ_AUTH_GRPC_CLIENT_KEY
              value: {{ .Values.auth.grpcClientKey | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.clients.authGrpcPort }}
            - name: SMQ_CLIENTS_AUTH_GRPC_TIMEOUT
              value: {{ .Values.clients.grpcTimeout | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_CLIENT_CERT
              value: "{{ .Values.clients.grpcClientCert }}"
            - name: SMQ_CLIENTS_AUTH_GRPC_CLIENT_KEY
              value: "{{ .Values.clients.grpcClientKey }}"
            - name: SMQ_GROUPS_GRPC_URL
              value: {{ .Release.Name }}-groups:{{ .Values.groups.grpcPort }}
            - name: SMQ_GROUPS_GRPC_TIMEOUT
              value: {{ .Values.groups.grpcTimeout | quote }}
            - name: SMQ_GROUPS_GRPC_CLIENT_CERT
              value: {{ .Values.groups.grpcClientCert | quote }}
            - name: SMQ_GROUPS_GRPC_CLIENT_KEY
              value: {{ .Values.groups.grpcClientKey | quote }}
            - name: SMQ_DOMAINS_GRPC_URL
              value: http://{{ .Release.Name }}-domains:{{ .Values.domains.grpcPort }}
            - name: SMQ_DOMAINS_GRPC_TIMEOUT
              value: {{ .Values.domains.grpcTimeout | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_CERT
              value: {{ .Values.domains.grpcClientCert | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_KEY
              value: {{ .Values.domains.grpcClientKey | quote }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:{{ .Values.defaults.jaegerCollectorPort }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.channels.jaegerTraceRatio | quote  }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.channels.sendTelemetry | quote  }}
            - name: SMQ_SPICEDB_PRE_SHARED_KEY
              value: {{.Values.spicedb.grpc.presharedKey | quote }}
            - name: SMQ_SPICEDB_HOST
              value: {{ .Release.Name }}-spicedb-envoy
            - name: SMQ_SPICEDB_PORT
              value: {{ .Values.spicedb.grpc.port | quote}}
          ports:
            - containerPort: {{ .Values.channels.httpPort }}
              protocol: TCP
            - containerPort: {{ .Values.channels.grpcPort }}
              protocol: TCP

================
File: charts/supermq/templates/channels-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-channels
spec:
  selector:
    app: {{ .Release.Name }}
    component: channels
  ports:
    - protocol: TCP
      port: {{ .Values.channels.httpPort }}
      targetPort: {{ .Values.channels.httpPort }}
      name: http
    - protocol: TCP
      port: {{ .Values.channels.grpcPort }}
      targetPort: {{ .Values.channels.grpcPort }}
      name: grpc

================
File: charts/supermq/templates/clients-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-clients
spec:
  replicas: {{ .Values.defaults.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: clients
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.clients.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: clients
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.clients.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-clients
          image: "{{ default (printf "%s/clients" .Values.defaults.image.rootRepository) .Values.clients.image.repository }}:{{ default .Values.defaults.image.tag .Values.clients.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.clients.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:{{ .Values.defaults.jaegerCollectorPort }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.clients.jaegerTraceRatio | quote  }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.clients.sendTelemetry | quote  }}
            - name: SMQ_CLIENTS_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.clients.logLevel  | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_HOST
              value: "0.0.0.0"
            - name: SMQ_CLIENTS_AUTH_GRPC_PORT
              value: {{ .Values.clients.authGrpcPort | quote}}
            - name: SMQ_CLIENTS_AUTH_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_CLIENTS_AUTH_HTTP_PORT
              value: {{ .Values.clients.authHttpPort | quote}}
            - name: SMQ_CLIENTS_CACHE_URL
              value: redis://{{ .Release.Name }}-redis-clients-master:{{ .Values.clients.redisCachePort }}/0
            - name: SMQ_SPICEDB_SCHEMA_FILE
              value: /schema.zed
            - name: SMQ_CLIENTS_DB_HOST
            {{- if .Values.postgresqlclients.enabled }}
              value: {{ .Release.Name }}-postgresqlclients
            {{- else }}
              value: {{ .Values.postgresqlclients.host | quote}}
            {{- end }}
            - name: SMQ_CLIENTS_DB_PORT
              value: {{ .Values.postgresqlclients.port | quote}}
            - name: SMQ_CLIENTS_DB_USER
              value: {{ .Values.postgresqlclients.username | quote }}
            - name: SMQ_CLIENTS_DB_PASS
              value: {{ .Values.postgresqlclients.password | quote }}
            - name: SMQ_CLIENTS_DB_NAME
              value: {{ .Values.postgresqlclients.database | quote }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_CLIENTS_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_CLIENTS_HTTP_PORT
              value: {{ .Values.clients.httpPort | quote }}
            - name: SMQ_CLIENTS_CACHE_KEY_DURATION
              value: {{ .Values.clients.cacheKeyduration | quote }}
            - name: SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_CHANNELS_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.httpPort }}
            - name: SMQ_CHANNELS_GRPC_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.grpcPort }}
            - name: SMQ_CHANNELS_GRPC_TIMEOUT
              value: {{ .Values.channels.grpcTimeout | quote }}
            - name: SMQ_GROUPS_URL
              value: {{ .Release.Name }}-groups:{{ .Values.groups.httpPort }}
            - name: SMQ_GROUPS_GRPC_URL
              value: {{ .Release.Name }}-groups:{{ .Values.groups.grpcPort }}
            - name: SMQ_GROUPS_GRPC_TIMEOUT
              value: {{ .Values.groups.grpcTimeout | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_CERT
              value: {{ .Values.domains.grpcClientCert | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_KEY
              value: {{ .Values.domains.grpcClientKey | quote }}
            - name: SMQ_DOMAINS_GRPC_TIMEOUT
              value: {{ .Values.domains.grpcTimeout | quote }}
            - name: SMQ_DOMAINS_GRPC_URL
              value: http://{{ .Release.Name }}-domains:{{ .Values.domains.grpcPort }}
            - name: SMQ_SPICEDB_PRE_SHARED_KEY
              value: {{.Values.spicedb.grpc.presharedKey | quote }}
            - name: SMQ_SPICEDB_HOST
              value: {{ .Release.Name }}-spicedb-envoy
            - name: SMQ_SPICEDB_PORT
              value: {{ .Values.spicedb.grpc.port | quote}}
          ports:
            - containerPort: {{ .Values.clients.httpPort }}
              protocol: TCP
            - containerPort: {{ .Values.clients.authGrpcPort }}
              protocol: TCP
            - containerPort: {{ .Values.clients.authHttpPort }}
              protocol: TCP
      {{- with .Values.clients.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.clients.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.clients.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/clients-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-clients
spec:
  selector:
    app: {{ .Release.Name }}
    component: clients
  ports:
    - port: {{ .Values.clients.httpPort }}
      protocol: TCP
      name: {{ .Release.Name }}-clients-{{ .Values.clients.httpPort }}
    - port: {{ .Values.clients.authGrpcPort }}
      protocol: TCP
      name: {{ .Release.Name }}-clients-{{ .Values.clients.authGrpcPort }}
    - port: {{ .Values.clients.authHttpPort }}
      protocol: TCP
      name: {{ .Release.Name }}-clients-{{ .Values.clients.authHttpPort }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-clients-headless
spec:
  selector:
    app: {{ .Release.Name }}
    component: clients
  ports:
    - port: {{ .Values.clients.httpPort }}
      protocol: TCP
      name: {{ .Release.Name }}-clients-{{ .Values.clients.httpPort }}
    - port: {{ .Values.clients.authGrpcPort }}
      protocol: TCP
      name: {{ .Release.Name }}-clients-{{ .Values.clients.authGrpcPort }}
    - port: {{ .Values.clients.authHttpPort }}
      protocol: TCP
      name: {{ .Release.Name }}-clients-{{ .Values.clients.authHttpPort }}
  clusterIP: None

================
File: charts/supermq/templates/domains-deployment.yaml
================
---
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-spicedb-schema-zed
data:
  schema.zed: |-
{{ include "spicedb.schema.zed" . | indent 4 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-domains
spec:
  replicas: {{ .Values.defaults.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: domains
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.domains.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: domains
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.domains.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-domains
          image: "{{ default (printf "%s/domains" .Values.defaults.image.rootRepository) .Values.domains.image.repository }}:{{ default .Values.defaults.image.tag .Values.domains.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.domains.image.pullPolicy }}
          env:
            - name: SMQ_DOMAINS_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.domains.logLevel | quote }}
            - name: SMQ_SPICEDB_PRE_SHARED_KEY
              value: {{ .Values.spicedb.grpc.presharedKey | quote }}
            - name: SMQ_SPICEDB_HOST
              value: {{ .Release.Name }}-spicedb-envoy
            - name: SMQ_SPICEDB_PORT
              value: {{ .Values.spicedb.grpc.port | quote }}
            - name: SMQ_SPICEDB_SCHEMA_FILE
              value: /schema.zed
            - name: SMQ_DOMAINS_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_DOMAINS_HTTP_PORT
              value: {{ .Values.domains.httpPort | quote }}
            - name: SMQ_DOMAINS_GRPC_HOST
              value: "0.0.0.0"
            - name: SMQ_DOMAINS_GRPC_PORT
              value: {{ .Values.domains.grpcPort | quote }}
            - name: SMQ_DOMAINS_DB_HOST
              {{- if .Values.postgresqldomains.enabled }}
              value: {{ .Release.Name }}-postgresqldomains
              {{- else }}
              value: {{ .Values.postgresqldomains.host | quote }}
              {{- end }}
            - name: SMQ_DOMAINS_DB_PORT
              value: {{ .Values.postgresqldomains.port | quote }}
            - name: SMQ_DOMAINS_DB_USER
              value: {{ .Values.postgresqldomains.username | quote }}
            - name: SMQ_DOMAINS_DB_PASS
              value: {{ .Values.postgresqldomains.password | quote }}
            - name: SMQ_DOMAINS_DB_NAME
              value: {{ .Values.postgresqldomains.database | quote }}
            - name: SMQ_DOMAINS_CACHE_URL
              value: redis://{{ .Release.Name }}-domains-redis:{{ .Values.domains.redisTCPPort }}/0
            - name: SMQ_DOMAINS_CACHE_KEY_DURATION
              value: {{ .Values.domains.cacheKeyduration | quote }}
            - name: SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_GROUPS_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.groups.grpcPort }}
            - name: SMQ_GROUPS_GRPC_TIMEOUT
              value: {{ .Values.groups.grpcTimeout | quote }}
            - name: SMQ_CHANNELS_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.channels.httpPort }}
            - name: SMQ_CHANNELS_GRPC_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.grpcPort }}
            - name: SMQ_CHANNELS_GRPC_TIMEOUT
              value: {{ .Values.channels.grpcTimeout | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.clients.authGrpcPort }}
            - name: SMQ_CLIENTS_AUTH_GRPC_TIMEOUT
              value: {{ .Values.clients.grpcTimeout | quote }}
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:4318/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.adapter_coap.jaegerTraceRatio | quote  }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.users.sendTelemetry | quote  }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
          volumeMounts:
            - name: spicedb-schema-zed
              mountPath: /schema.zed
              subPath: schema.zed
          ports:
            - containerPort: {{ .Values.domains.httpPort }}
              protocol: TCP
            - containerPort: {{ .Values.domains.grpcPort }}
              protocol: TCP
      volumes:
        - name: spicedb-schema-zed
          configMap:
            name: {{ .Release.Name }}-spicedb-schema-zed
            optional: false
      {{- with .Values.domains.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.domains.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.domains.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/domains-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-domains
spec:
  selector:
    app: {{ .Release.Name }}
    component: domains
  ports:
    - protocol: TCP
      port: {{ .Values.domains.httpPort }}
      name: {{ .Release.Name }}-domains-http
    - protocol: TCP
      port: {{ .Values.domains.grpcPort }}
      name: {{ .Release.Name }}-domains-grpc

================
File: charts/supermq/templates/envoy-config.yaml
================
{{- define "supermq.envoy.config" -}}
static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 1883
      filter_chains:
        - filters:
            - name: envoy.filters.network.tcp_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
                stat_prefix: {{ .Release.Name }}-mqtt-envoy
                cluster: {{ .Release.Name }}_mqtt_cluster
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: {{ .Values.auth.grpcPort }}
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: {{ .Release.Name }}-auth-envoy
                route_config:
                  name: auth_route
                  virtual_hosts:
                    - name: auth_service
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: {{ .Release.Name }}_auth_cluster
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: {{ .Values.clients.authGrpcPort }}
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: {{ .Release.Name }}-clients-envoy
                route_config:
                  name: clients_route
                  virtual_hosts:
                    - name: clients_service
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: {{ .Release.Name }}_clients_cluster
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
    - name: {{ .Release.Name }}_mqtt_cluster
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: {{ .Release.Name }}_mqtt_cluster
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Release.Name }}-mqtt
                    port_value: 1884
    - name: {{ .Release.Name }}_auth_cluster
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: {{ .Release.Name }}_auth_cluster
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Release.Name }}-auth-headless
                    port_value: {{ .Values.auth.grpcPort }}

    - name: {{ .Release.Name }}_clients_cluster
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: {{ .Release.Name }}_clients_cluster
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Release.Name }}-clients-headless
                    port_value: {{ .Values.clients.authGrpcPort }}
admin:
    access_log_path: "/dev/null"
    address:
      socket_address:
          address: 0.0.0.0
          port_value: 8001

{{- end -}}

================
File: charts/supermq/templates/envoy.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
data:
  envoy.yaml: |-
{{ include "supermq.envoy.config" . | indent 4 }}

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-envoy-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-envoy
spec:
  replicas: {{ .Values.defaults.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: envoy
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: envoy
    spec:
      containers:
        - name: {{ .Release.Name }}-envoy
          image: "{{.Values.envoy.image.repository }}:{{ .Values.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.envoy.image.pullPolicy | quote }}
          args:
            - -c /etc/envoy/envoy.yaml
            - --log-level debug
          ports:
            - containerPort: 1883
              protocol: TCP
            - containerPort: {{ .Values.auth.grpcPort }}
              protocol: TCP
            - containerPort: {{ .Values.clients.authGrpcPort }}
              protocol: TCP
            - containerPort: 8001
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/envoy/envoy.yaml
              name: envoy-config
              subPath: envoy.yaml
      volumes:
        - configMap:
            defaultMode: 292  ## equal to 0444 r-- r-- r--
            name: {{ .Release.Name }}-envoy-config
            optional: false
          name: envoy-config
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-envoy
spec:
  selector:
    app: {{ .Release.Name }}
    component: envoy
  ports:
    - port: 1883
      protocol: TCP
      name: mqtt
    - port: {{ .Values.auth.grpcPort }}
      protocol: TCP
      name: auth-grpc
    - port: {{ .Values.clients.authGrpcPort }}
      protocol: TCP
      name: clients-grpc
    - port: 8001
      protocol: TCP
      name: admin

================
File: charts/supermq/templates/fluentbit-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  labels:
    app: fluent-bit
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2020"
    spec:
      serviceAccountName: fluent-bit
      containers:
        - name: fluent-bit
          image: "{{ .Values.fluent_bit.image }}"
          resources:
            limits:
              memory: "{{ .Values.fluent_bit.resources.limits.memory }}"
            requests:
              cpu: "{{ .Values.fluent_bit.resources.requests.cpu }}"
              memory: "{{ .Values.fluent_bit.resources.requests.memory }}"
          volumeMounts:
            - name: varlog
              mountPath: /var/log
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
      volumes:
        - name: varlog
          hostPath:
            path: /var/log
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers

================
File: charts/supermq/templates/groups-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-groups
spec:
  replicas: {{ .Values.defaults.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: groups
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.groups.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: groups
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.groups.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-groups
          image: "{{ default (printf "%s/groups" .Values.defaults.image.rootRepository) .Values.groups.image.repository }}:{{ default .Values.defaults.image.tag .Values.groups.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.groups.image.pullPolicy }}
          env:
            - name: SMQ_GROUPS_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.groups.logLevel | quote }}
            - name: SMQ_GROUPS_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_GROUPS_HTTP_PORT
              value: "{{ .Values.groups.httpPort }}"
            - name: SMQ_GROUPS_GRPC_HOST
              value: "0.0.0.0"
            - name: SMQ_GROUPS_GRPC_PORT
              value: "{{ .Values.groups.grpcPort }}"
            - name: SMQ_GROUPS_DB_HOST
              {{- if .Values.postgresqlgroups.enabled }}
              value: "{{ .Release.Name }}-postgresqlgroups"
              {{- else }}
              value: {{ .Values.postgresqlgroups.host | quote }}
              {{- end }}
            - name: SMQ_GROUPS_DB_PORT
              value: {{ .Values.postgresqlgroups.port | quote }}
            - name: SMQ_GROUPS_DB_NAME
              value: {{ .Values.postgresqlgroups.database | quote }}
            - name: SMQ_GROUPS_DB_USER
              value: {{ .Values.postgresqlgroups.username | quote }}
            - name: SMQ_GROUPS_DB_PASS
              value: {{ .Values.postgresqlgroups.password | quote }}
            - name: SMQ_CHANNELS_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.httpPort }}
            - name: SMQ_CHANNELS_GRPC_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.grpcPort }}
            - name: SMQ_CHANNELS_GRPC_TIMEOUT
              value: {{ .Values.channels.grpcTimeout | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.clients.authGrpcPort }}
            - name: SMQ_CLIENTS_AUTH_GRPC_TIMEOUT
              value: {{ .Values.clients.grpcTimeout | quote }}
            - name: SMQ_DOMAINS_GRPC_URL
              value: http://{{ .Release.Name }}-domains:{{ .Values.domains.grpcPort | quote }}
            - name: SMQ_DOMAINS_GRPC_TIMEOUT
              value: {{ .Values.domains.grpcTimeout | quote }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:{{ .Values.defaults.jaegerCollectorPort }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.groups.jaegerTraceRatio | quote }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.groups.sendTelemetry | quote }}
            - name: SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_SPICEDB_PRE_SHARED_KEY
              value: {{ .Values.spicedb.grpc.presharedKey | quote }}
            - name: SMQ_SPICEDB_HOST
              value: {{ .Release.Name }}-spicedb-envoy
            - name: SMQ_SPICEDB_PORT
              value: {{ .Values.spicedb.grpc.port | quote }}
            - name: SMQ_SPICEDB_SCHEMA_FILE
              value: /schema.zed
          ports:
            - containerPort: {{ .Values.groups.httpPort }}
              protocol: TCP
            - containerPort: {{ .Values.groups.grpcPort }}
              protocol: TCP
          volumeMounts:
            - mountPath: /schema.zed
              name: spicedb-schema-zed
              subPath: schema.zed
      volumes:
        - name: spicedb-schema-zed
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-spicedb-schema-zed
            optional: false
      {{- with .Values.groups.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.groups.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.groups.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/groups-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-groups
spec:
  selector:
    app: {{ .Release.Name }}
    component: groups
  ports:
    - protocol: TCP
      port: {{ .Values.groups.httpPort }}
      targetPort: {{ .Values.groups.httpPort }}
      name: http
    - protocol: TCP
      port: {{ .Values.groups.grpcPort }}
      targetPort: {{ .Values.groups.grpcPort }}
      name: grpc

================
File: charts/supermq/templates/ingress.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0
{{- if .Values.ingress.enabled }}

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-nginx-ingress
{{- if .Values.ingress.annotations }}
  annotations:
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
{{- if .Values.ingress.labels }}
  labels:
{{ toYaml .Values.ingress.labels | indent 4 }}
{{- end }}
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}-ui
                port:
                  number: {{ .Values.ui.port }}
          - path: /health
            pathType: Exact
            backend:
              service:
                name: {{ .Release.Name }}-clients
                port:
                  number: {{ .Values.clients.httpPort }}
{{- if .Values.ingress.tls }}
  tls:
    - hosts:
        - {{ .Values.ingress.tls.hostname }}
      secretName: {{ .Values.ingress.tls.secret }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-users-clients-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-clients.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.clients.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((users|groups)/(.+)/(channels|clients))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-users
                port:
                  number: {{ .Values.users.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-clients-users-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-users.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.users.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((channels|clients)/(.+)/(users|groups))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-clients
                port:
                  number: {{ .Values.clients.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-users-domains-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-auth.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.auth.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((users)/(.+)/(domains))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-users
                port:
                  number: {{ .Values.users.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-domains-users-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-users.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.users.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((domains)/(.+)/(users))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-auth
                port:
                  number: {{ .Values.auth.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-nginx-rewrite-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
{{- if .Values.ingress.annotations }}
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
{{- if .Values.ingress.labels }}
  labels:
{{ toYaml .Values.ingress.labels | indent 4 }}
{{- end }}
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /(domains.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-auth
                port:
                  number: {{ .Values.auth.httpPort }}
          - path: /((users|groups|password|authorize).*|oauth/callback/[^/]+)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-users
                port:
                  number: {{ .Values.users.httpPort }}
          - path: /((clients|channels|connect|disconnect|identify).*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-clients
                port:
                  number: {{ .Values.clients.httpPort }}
          - path: /(invitations.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-invitations
                port:
                  number: {{ .Values.invitations.httpPort }}
          - path: /(journal.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-journal
                port:
                  number: {{ .Values.journal.httpPort }}
{{- if .Values.certs.enabled }}
          - path: /((certs|serials).*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-certs
                port:
                  number: {{ .Values.certs.httpPort }}
{{- end }}
{{- if .Values.ingress.tls }}
  tls:
    - hosts:
        - {{ .Values.ingress.tls.hostname }}
      secretName: {{ .Values.ingress.tls.secret }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-nginx-rewrite-ingress-http-adapter
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
{{- if and (ne .Values.nginxInternal.mtls.tls "") (ne .Values.nginxInternal.mtls.intermediateCrt "") }}
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    nginx.ingress.kubernetes.io/auth-tls-secret: {{ .Release.Namespace }}/ca
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
{{- end }}
{{- if .Values.ingress.annotations }}
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
{{- if .Values.ingress.labels }}
  labels:
{{ toYaml .Values.ingress.labels | indent 4 }}
{{- end }}
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          {{- if and (ne .Values.nginxInternal.mtls.tls "") (ne .Values.nginxInternal.mtls.intermediateCrt "") }}
          - path: /(http/?.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-nginx-internal
                port:
                  number: 80
          - path: /(mqtt)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-nginx-internal
                port:
                  number: 80
          {{- else }}
          - path: /http/?(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-adapter-http
                port:
                  number: {{ .Values.adapter_http.httpPort }}
          - path: /(mqtt)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-mqtt
                port:
                  number: {{ default .Values.mqtt.adapter.wsPort }}
          {{- end }}
{{- if .Values.ingress.tls }}
  tls:
    - hosts:
        - {{ .Values.ingress.tls.hostname }}
      secretName: {{ .Values.ingress.tls.secret }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: default
data:
  1883: "{{ .Release.Namespace }}/{{ .Release.Name }}-envoy:1883"
  8883: "{{ .Release.Namespace }}/{{ .Release.Name }}-nginx-internal:8883"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: udp-services
  namespace: default
data:
  5683: "{{ .Release.Namespace }}/{{ .Release.Name }}-adapter-coap:5683"

{{- end }}

================
File: charts/supermq/templates/invitations-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-invitations
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: invitations
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.invitations.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: invitations
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.invitations.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-invitations
          image: "{{ default (printf "%s/invitations" .Values.defaults.image.rootRepository) .Values.invitations.image.repository }}:{{ default .Values.defaults.image.tag .Values.invitations.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.invitations.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Values.jaeger.fullnameOverride }}-collector:{{ .Values.jaeger.collector.service.otlp.http.port }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.invitations.jaegerTraceRatio | quote }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.invitations.sendTelemetry | quote }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_INVITATIONS_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.invitations.logLevel | quote }}
            - name: SMQ_INVITATIONS_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_INVITATIONS_HTTP_PORT
              value: {{ .Values.invitations.httpPort | quote }}
            - name: SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_USERS_URL
              value: http://{{ .Release.Name }}-users:{{ .Values.users.httpPort }}
            - name: SMQ_DOMAINS_URL
              value: http://{{ .Release.Name }}-domains:{{ .Values.domains.httpPort | quote }}
            - name: SMQ_DOMAINS_GRPC_URL
              value: http://{{ .Release.Name }}-domains:{{ .Values.domains.grpcPort | quote }}
            - name: SMQ_DOMAINS_GRPC_TIMEOUT
              value: {{ .Values.domains.grpcTimeout | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_CERT
              value: {{ .Values.domains.grpcClientCert | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_KEY
              value: {{ .Values.domains.grpcClientKey | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_CA_CERTS
              value: {{ .Values.domains.grpcClientCaCerts | quote }}
            - name: SMQ_INVITATIONS_DB_HOST
            {{- if .Values.postgresqlinvitations.enabled }}
              value: "{{ .Release.Name }}-postgresqlinvitations"
            {{- else }}
              value: {{ .Values.postgresqlinvitations.host | quote }}
            {{- end }}
            - name: SMQ_INVITATIONS_DB_PORT
              value: {{ .Values.postgresqlinvitations.port | quote }}
            - name: SMQ_INVITATIONS_DB_NAME
              value: {{ .Values.postgresqlinvitations.database | quote }}
            - name: SMQ_INVITATIONS_DB_USER
              value: {{ .Values.postgresqlinvitations.username | quote }}
            - name: SMQ_INVITATIONS_DB_PASS
              value: {{ .Values.postgresqlinvitations.password | quote }}
          ports:
            - containerPort: {{ .Values.invitations.httpPort }}
              protocol: TCP
      {{- with .Values.invitations.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.invitations.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.invitations.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/invitations-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-invitations
spec:
  selector:
    app: {{ .Release.Name }}
    component: invitations
  ports:
    - protocol: TCP
      port: {{ .Values.invitations.httpPort }}
      name: {{ .Release.Name }}-invitations-http

================
File: charts/supermq/templates/journal-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-journal
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: journal
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.journal.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: journal
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.journal.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-journal
          image: "{{ default (printf "%s/journal" .Values.defaults.image.rootRepository) .Values.journal.image.repository }}:{{ default .Values.defaults.image.tag .Values.journal.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.journal.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Values.jaeger.fullnameOverride }}-collector:{{ .Values.jaeger.collector.service.otlp.http.port }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.journal.jaegerTraceRatio | quote  }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.journal.sendTelemetry | quote  }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_JOURNAL_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.journal.logLevel  | quote }}
            - name: SMQ_JOURNAL_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_JOURNAL_HTTP_PORT
              value: {{ .Values.journal.httpPort  | quote  }}
            - name : SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_AUTH_GRPC_CLIENT_KEY
              value: {{ .Values.journal.authGrpcClientKey | quote }}
            - name: SMQ_AUTH_GRPC_SERVER_CA_CERTS
              value: {{ .Values.journal.authGrpcServerCaCerts | quote }}
            - name: SMQ_AUTH_GRPC_CLIENT_CERT
              value: {{ .Values.auth.grpcClientCert | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_CERT
              value: {{ .Values.domains.grpcClientCert | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_KEY
              value: {{ .Values.domains.grpcClientKey | quote }}
            - name: SMQ_DOMAINS_GRPC_TIMEOUT
              value: {{ .Values.domains.grpcTimeout | quote }}
            - name: SMQ_DOMAINS_GRPC_URL
              value: http://{{ .Release.Name }}-domains:{{ .Values.domains.grpcPort | quote }}
            - name: SMQ_JOURNAL_DB_HOST
            {{- if .Values.postgresqljournal.enabled }}
              value: "{{ .Release.Name }}-postgresqljournal"
            {{- else }}
              value: {{ .Values.postgresqljournal.host | quote }}
            {{- end }}
            - name: SMQ_JOURNAL_DB_PORT
              value: {{ .Values.postgresqljournal.port  | quote }}
            - name: SMQ_JOURNAL_DB_NAME
              value: {{ .Values.postgresqljournal.database | quote }}
            - name: SMQ_JOURNAL_DB_USER
              value: {{ .Values.postgresqljournal.username | quote }}
            - name: SMQ_JOURNAL_DB_PASS
              value: {{ .Values.postgresqljournal.password | quote }}
          ports:
            - containerPort: {{ .Values.journal.httpPort }}
              protocol: TCP
      {{- with .Values.journal.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.journal.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.journal.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/journal-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-journal
spec:
  selector:
    app: {{ .Release.Name }}
    component: journal
  ports:
    - protocol: TCP
      port: {{ .Values.journal.httpPort }}
      name: {{ .Release.Name }}-journal-http

================
File: charts/supermq/templates/loki-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: loki
spec:
  selector:
    app: loki
  ports:
    - name: http
      protocol: TCP
      port: 3100
      targetPort: 3100

================
File: charts/supermq/templates/nginx-internal.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

{{ if and (ne .Values.nginxInternal.mtls.tls "") (ne .Values.nginxInternal.mtls.intermediateCrt "") -}}
apiVersion: v1
data:
  dhparam.pem: LS0tLS1CRUdJTiBESCBQQVJBTUVURVJTLS0tLS0KTUlJQkNBS0NBUUVBcXVOOE5SY1NkTE9NOVJpdW1xV0g4SnczQ0dWUi9lUVFlcStqdlQzenB4bFVRUEFNRXhRYgpNUkNzcG0xb1JnRFdHdmNoM1o0emZNbUJaeXpLSkE0QkRUaDRVU3pjRTV6dm54OGFVY1VQWlBRcHdTaWNLZ3piClFHbmwwWGYvNzVHQVdyd2h4bjhHTnlNUDI5d3JwY2QxUWc4ZkVRM0hBVzFmQ2Q5Z2lyS01LWTlhQmFIbGkvaDIKUjlSZC9LVGJlcU44OGFvTWpVdlpIb29JSVpYdTBBK2t5dWxPYWpZUU80azNTcDZDQnF2MEZGY29MUW5ZTkgxMwprTVVFNXFKNjhVNzMySHliVHc4c29mVENPeEtjQ2ZNMmtWUDdkVm9GM3BybEdqVXczejNsM1NUWTh2dVRkcTBCClI3UHNsa29RSE5tcWNMKzJnb3VvV1AzR0krSWVSekdTU3dJQkFnPT0KLS0tLS1FTkQgREggUEFSQU1FVEVSUy0tLS0t
kind: Secret
metadata:
  name: {{ .Release.Name }}-nginx-internal-dhparam
type: Opaque
---
apiVersion: v1
data:
  nginx.conf: |-
    user nginx;
    worker_processes auto;
    pid /run/nginx.pid;
    load_module /etc/nginx/modules/ngx_stream_js_module.so;
    load_module /etc/nginx/modules/ngx_http_js_module.so;
    include /etc/nginx/modules-enabled/*.conf;

    events {
      worker_connections 768;
    }

    http {
      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;

      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_prefer_server_ciphers on;

      js_include authorization.js;
      js_set $auth_key setKey;

      server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        # These paths are set to its default values as
        # a volume in the docker/docker-compose.yml file.
        ssl_certificate /etc/ssl/certs/supermq-server/tls.crt;
        ssl_certificate_key /etc/ssl/certs/supermq-server/tls.key;
        ssl_client_certificate /etc/ssl/certs/ca.crt;
        # ssl_crl /etc/ssl/certs/crl.pem;
        ssl_verify_client optional;
        ssl_verify_depth 2;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_tickets off;
        ssl_stapling off;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header Access-Control-Allow-Origin '*';
        add_header Access-Control-Allow-Methods '*';
        add_header Access-Control-Allow-Headers '*';

        server_name {{ .Values.ingress.hostname }};

        # Proxy pass to users service
        location ~ ^/(users|tokens) {
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_pass http://{{ .Release.Name }}-users:{{ .Values.users.httpPort }};

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        # Proxy pass to things service
        location ~ ^/(things|channels|connect|disconnect) {
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          add_header Access-Control-Expose-Headers Location;
          proxy_pass http://{{ .Release.Name }}-things:{{ .Values.things.httpPort }};

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        location /health {
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_pass http://{{ .Release.Name }}-things:{{ .Values.things.httpPort }};

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        # Proxy pass to supermq-http-adapter
        location /http/ {
          if ($auth_key = '') {
            return 403;
          }
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Authorization $auth_key;
          proxy_pass http://{{ .Release.Name }}-adapter-http:{{ default .Values.adapter_http.httpPort }}/;

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        #Proxy pass to supermq-mqtt for MQTT over WS
        location /mqtt {
          if ($auth_key = '') {
            return 403;
          }
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          proxy_connect_timeout 7d;
          proxy_send_timeout 7d;
          proxy_read_timeout 7d;
          proxy_pass http://{{ .Release.Name }}-mqtt:{{ .Values.mqtt.adapter.wsPort }};

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }
      }

      log_format access_log_format 'HTTP/WS '
        '$remote_addr: '
        '"$request" $status; '
        'request time=$request_time upstream connect time=$upstream_connect_time upstream response time=$upstream_response_time';
      access_log /var/log/nginx/access.log access_log_format;
      error_log  /var/log/nginx/error.log debug;

    }

    # MQTT and LoRa MQTT
    stream {
      js_include authorization.js;
      # MQTT
      server {
          listen 8883 ssl;
          listen [::]:8883 ssl;

          # These paths are set to its default values as
          # a volume in the docker/docker-compose.yml file.
          ssl_certificate /etc/ssl/certs/supermq-server/tls.crt;
          ssl_certificate_key /etc/ssl/certs/supermq-server/tls.key;
          ssl_client_certificate /etc/ssl/certs/ca.crt;
          # FIXME
          # ssl_crl /etc/ssl/certs/crl.pem;
          ssl_verify_client on;
          ssl_verify_depth 2;
          ssl_dhparam /etc/ssl/certs/dhparam.pem;

          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers on;
          ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
          ssl_ecdh_curve secp384r1;
          ssl_session_tickets off;
          resolver 8.8.8.8 8.8.4.4 valid=300s;
              resolver_timeout 5s;
          js_preread authenticate;

          proxy_pass {{ .Release.Name }}-envoy:1883;
      }

      log_format access_log_format '$protocol '
        '$remote_addr: '
        'status=$status; upstream connect time=$upstream_connect_time';
      access_log /var/log/nginx/access.log access_log_format;
      error_log  /var/log/nginx/error.log debug;

    }

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-config
---
apiVersion: v1
data:
  authorization.js: |-
    var clientKey = '';

    // Check certificate MQTTS.
    function authenticate(s) {
      if (!s.variables.ssl_client_s_dn || !s.variables.ssl_client_s_dn.length ||
        !s.variables.ssl_client_verify || s.variables.ssl_client_verify != "SUCCESS") {
        s.deny();
        return;
      }

      s.on('upload', function (data) {
        if (data == '') {
          return;
        }

        var packet_type_flags_byte = data.codePointAt(0);
        // First MQTT packet contain message type and flags. CONNECT message type
        // is encoded as 0001, and we're not interested in flags, so only values
        // 0001xxxx (which is between 16 and 32) should be checked.
        if (packet_type_flags_byte < 16 || packet_type_flags_byte >= 32) {
          s.off('upload');
          s.allow();
          return;
        }

        if (clientKey === '') {
          clientKey = parseCert(s.variables.ssl_client_s_dn, 'CN');
        }

        var pass = parsePackage(s, data);

        if (!clientKey.length || pass !== clientKey) {
          s.error('Cert CN (' + clientKey + ') does not match client password');
          s.off('upload')
          s.deny();
          return;
        }

        s.off('upload');
        s.allow();
      })
    }

    function parsePackage(s, data) {
      // An explanation of MQTT packet structure can be found here:
      // https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#msg-format.

      // CONNECT message is explained here:
      // https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect.

      /*
        0               1               2               3
        7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        | TYPE | RSRVD | REMAINING LEN |      PROTOCOL NAME LEN       |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                        PROTOCOL NAME                        |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
        |    VERSION   |     FLAGS     |          KEEP ALIVE          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
        |                     Payload (if any) ...                    |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        First byte with remaining length represents fixed header.
        Remaining Length is the length of the variable header (10 bytes) plus the length of the Payload.
        It is encoded in the manner described here:
        http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836.

        Connect flags byte looks like this:
        |       7       |       6       |       5     |   4  3   |     2     |       1       |     0     |
        | Username Flag | Password Flag | Will Retain | Will QoS | Will Flag | Clean Session | Reserved  |

        The payload is determined by the flags and comes in this order:
          1. Client ID (2 bytes length + ID value)
          2. Will Topic (2 bytes length + Will Topic value) if Will Flag is 1.
          3. Will Message (2 bytes length + Will Message value) if Will Flag is 1.
          4. User Name (2 bytes length + User Name value) if User Name Flag is 1.
          5. Password (2 bytes length + Password value) if Password Flag is 1.

        This method extracts Password field.
      */

      // Extract variable length header. It's 1-4 bytes. As long as continuation byte is
      // 1, there are more bytes in this header. This algorithm is explained here:
      // http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836
      var len_size = 1;
      for (var remaining_len = 1; remaining_len < 5; remaining_len++) {
        if (data.codePointAt(remaining_len) > 128) {
          len_size += 1;
          continue;
        }
        break;
      }

      // CONTROL(1) + MSG_LEN(1-4) + PROTO_NAME_LEN(2) + PROTO_NAME(4) + PROTO_VERSION(1)
      var flags_pos = 1 + len_size + 2 + 4 + 1;
      var flags = data.codePointAt(flags_pos);

      // If there are no username and password flags (11xxxxxx), return.
      if (flags < 192) {
        s.error('MQTT username or password not provided');
        return '';
      }

      // FLAGS(1) + KEEP_ALIVE(2)
      var shift = flags_pos + 1 + 2;

      // Number of bytes to encode length.
      var len_bytes_num = 2;

      // If Wil Flag is present, Will Topic and Will Message need to be skipped as well.
      var shift_flags = 196 <= flags ? 5 : 3;
      var len_msb, len_lsb, len;

      for (var i = 0; i < shift_flags; i++) {
        len_msb = data.codePointAt(shift).toString(16);
        len_lsb = data.codePointAt(shift + 1).toString(16);
        len = calcLen(len_msb, len_lsb);
        shift += len_bytes_num;
        if (i != shift_flags - 1) {
          shift += len;
        }
      }

      var password = data.substring(shift, shift + len);
      return password;
    }

    // Check certificate HTTPS and WSS.
    function setKey(r) {
      if (clientKey === '') {
        clientKey = parseCert(r["headersIn"]["ssl-client-subject-dn"], 'CN');
      }
      var auth = r.headersIn['Authorization'];
      if (auth && auth.length && auth != clientKey) {
        r.error('Authorization header does not match certificate');
        return '';
      }

      return clientKey;
    }

    function calcLen(msb, lsb) {
      if (lsb < 2) {
        lsb = '0' + lsb;
      }

      return parseInt(msb + lsb, 16);
    }

    function parseCert(cert, key) {
      if (cert && cert.length) {
        var pairs = cert.split(',');
        for (var i = 0; i < pairs.length; i++) {
          var pair = pairs[i].split('=');
          if (pair[0].toUpperCase() == key) {
            return pair[1];
          }
        }
      }

      return '';
    }

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-authorization
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  finalizers:
    - kubernetes.io/pvc-protection
  labels:
    app: {{ .Release.Name }}-nginx-internal
  name: {{ .Release.Name }}-nginx-internal-crl-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nginx-internal
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: nginx-internal
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: nginx-internal
    spec:
      containers:
        - image: "{{ .Values.nginxInternal.image.repository }}:{{ .Values.nginxInternal.image.tag }}"
        # - image: busybox
        #   command: ["sleep", "3600"]
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.nginxInternal.image.imagePullPolicy}}
          name: {{ .Release.Name }}-nginx-internal
          ports:
            - containerPort: 8883
              protocol: TCP
            - containerPort: 80
              protocol: TCP
            - containerPort: 8884
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/ssl/certs/dhparam.pem
              name: dhparam
              subPath: dhparam.pem
            - mountPath: /etc/nginx/nginx.conf
              name: nginx-config
              subPath: nginx.conf
            - mountPath: /etc/nginx/authorization.js
              name: nginx-authorization
              subPath: authorization.js
            - mountPath: /etc/ssl/certs/ca.crt
              name: ca
              subPath: ca.crt
            - mountPath: /etc/ssl/certs/supermq-server
              name: supermq-server
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
        - name: dhparam
          secret:
            defaultMode: 256
            optional: false
            secretName: {{ .Release.Name }}-nginx-internal-dhparam
        - name: nginx-config
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-config
            optional: false
        - name: nginx-authorization
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-authorization
            optional: false
        - name: nginx-crl-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-nginx-internal-crl-volume
        - name: ca
          secret:
            secretName: {{ .Values.nginxInternal.mtls.intermediateCrt }}
        - name: supermq-server
          secret:
            secretName: {{ .Values.nginxInternal.mtls.tls }}
---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-nginx-internal
spec:
  selector:
    app: {{ .Release.Name }}
    component: nginx-internal
  ports:
    - port: 8883
      protocol: TCP
      name: mqtt
    - port: 80
      protocol: TCP
      name: http
{{- end }}

================
File: charts/supermq/templates/spicedb-deployment.yaml
================
{{- $replicaCount := default .Values.defaults.replicaCount .Values.spicedb.replicaCount | int64 }}
{{- $databaseHost := .Values.postgresqlspicedb.host | quote -}}
{{- if .Values.postgresqlspicedb.enabled -}}
  {{- $databaseHost = printf "%s-postgresqlspicedb" .Release.Name -}}
{{- end -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-spicedb
spec:
  replicas: {{ $replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: spicedb
  template:
    metadata:
      annotations:
        {{- if .Values.spicedb.metrics.enabled }}
        prometheus.io/path: /
        prometheus.io/port: "{{ .Values.spicedb.metrics.port }}"
        prometheus.io/scrape: "true"
        {{- end }}
      labels:
        app: {{ .Release.Name }}
        component: spicedb
    spec:
      {{- with .Values.spicedb.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-spicedb
          image: "{{ .Values.spicedb.image.repository }}:{{ .Values.spicedb.image.tag }}"
          imagePullPolicy:  {{ default .Values.defaults.image.pullPolicy .Values.spicedb.image.pullPolicy }}
          args:
            - serve
            - --grpc-enabled=true
            - --grpc-preshared-key={{ required "'spicedb.grpc.presharedKey' is required" .Values.spicedb.grpc.presharedKey }}
            - --grpc-addr=:{{  required "'spicedb.grpc.port' is required" .Values.spicedb.grpc.port }}
            - --log-level=trace
            - --datastore-engine={{  include "validateSpiceDBDatastoreEngine"  .Values.spicedb.datastore.engine }}
            {{- if eq .Values.spicedb.datastore.engine "postgres" }}
            - --datastore-conn-uri=postgres://{{ .Values.postgresqlspicedb.username }}:{{ .Values.postgresqlspicedb.password }}@{{ $databaseHost }}:{{ .Values.postgresqlspicedb.port }}/{{ .Values.postgresqlspicedb.database }}
            {{- end }}

            - --dispatch-cluster-enabled={{ .Values.spicedb.dispatch.enabled }}
            {{- if .Values.spicedb.dispatch.enabled }}
            - --dispatch-cluster-addr=:{{ .Values.spicedb.dispatch.port }}
            {{- end }}
            {{- if and .Values.spicedb.dispatch.enabled (gt $replicaCount 1) }}
            - --dispatch-upstream-addr=kubernetes://{{ .Release.Name }}-spicedb-dispatch-headless.{{ .Release.Namespace }}:{{ .Values.spicedb.dispatch.port }}
            {{- end }}

            - --http-enabled={{ .Values.spicedb.http.enabled }}
            {{- if .Values.spicedb.http.enabled }}
            - --http-addrr=:{{ .Values.spicedb.http.port }}
            {{- end }}

            - --metrics-enabled={{ .Values.spicedb.metrics.enabled }}
            {{- if .Values.spicedb.metrics.enabled }}
            - --metrics-addr=:{{ .Values.spicedb.metrics.port }}
            {{- end }}

          ports:
            - containerPort: {{ .Values.spicedb.grpc.port | int64 }}
              protocol: TCP
              name: grpc
            {{- if .Values.spicedb.http.enabled }}
            - containerPort: {{ .Values.http.port | int64 }}
              protocol: TCP
              name: http
            {{- end }}
            {{- if .Values.spicedb.dispatch.enabled }}
            - containerPort: {{ .Values.spicedb.dispatch.port  | int64 }}
              protocol: TCP
              name: dispatch
            {{- end }}
            {{- if .Values.spicedb.metrics.enabled }}
            - containerPort: {{ .Values.spicedb.metrics.port | int64 }}
              protocol: TCP
              name: metrics
            {{- end }}
      {{- with .Values.spicedb.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.spicedb.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.spicedb.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/spicedb-envoy-config.yaml
================
{{- define "spicedb.envoy.config" -}}
static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 50051
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: {{ .Release.Name }}-spicedb-envoy
                route_config:
                  name: {{ .Release.Name }}-spicedb_route
                  virtual_hosts:
                    - name: {{ .Release.Name }}-spicedb
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: spicedb_grpc_cluster
                            timeout: 0s
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
    - name: spicedb_grpc_cluster
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: spicedb_grpc_cluster
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Release.Name }}-spicedb
                    port_value: {{ .Values.spicedb.grpc.port }}
admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
{{- end -}}

================
File: charts/supermq/templates/spicedb-envoy-deployment.yaml
================
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-spicedb-envoy-config
data:
  envoy.yaml: |-
{{ include "spicedb.envoy.config" . | indent 4 }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-spicedb-envoy
spec:
  replicas: {{ .Values.defaults.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: spicedb-envoy
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: spicedb-envoy
    spec:
      containers:
        - name: {{ .Release.Name }}-spicedb-envoy
          image: "{{ .Values.envoy.image.repository }}:{{ .Values.envoy.image.tag }}"
          imagePullPolicy: {{ .Values.envoy.image.imagePullPolicy | quote }}
          ports:
            - containerPort: {{ .Values.spicedb.grpc.port }}
              protocol: TCP
          volumeMounts:
            - mountPath: "/etc/envoy/envoy.yaml"
              name: envoy-config
              subPath: envoy.yaml
      volumes:
        - configMap:
            defaultMode: 292  ## equal to 0444 r-- r-- r--
            name: {{ .Release.Name }}-spicedb-envoy-config
            optional: false
          name: envoy-config

================
File: charts/supermq/templates/spicedb-envoy-service.yaml
================
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-spicedb-envoy
spec:
  selector:
    app: {{ .Release.Name }}
    component: spicedb-envoy
  ports:
    - port: {{ .Values.spicedb.grpc.port }}
      protocol: TCP
      name: {{ .Release.Name }}-spicedb-envoy-grpc-{{ .Values.spicedb.grpc.port }}

================
File: charts/supermq/templates/spicedb-migration-job.yaml
================
{{- $databaseHost := .Values.postgresqlspicedb.host | quote -}}
{{- if .Values.postgresqlspicedb.enabled -}}
  {{- $databaseHost = printf "%s-postgresqlspicedb" .Release.Name -}}
{{- end -}}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-spicedb-migrate-job
  labels:
    app: {{ .Release.Name }}
    component: spicedb-migrate-job
spec:
  template:
    spec:
      {{- with .Values.spicedb.image.pullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      containers:
        - name: {{ .Release.Name }}-spicedb-migrate
          image: "{{ .Values.spicedb.image.repository }}:{{ .Values.spicedb.image.tag }}"
          imagePullPolicy:  {{ default .Values.defaults.image.pullPolicy .Values.spicedb.image.pullPolicy }}
          command: ["spicedb"]
          args:
            - migrate
            - head
            - --datastore-engine={{  include "validateSpiceDBDatastoreEngine"  .Values.spicedb.datastore.engine }}
            {{- if eq .Values.spicedb.datastore.engine "postgres" }}
            - --datastore-conn-uri=postgres://{{ .Values.postgresqlspicedb.username }}:{{ .Values.postgresqlspicedb.password }}@{{ $databaseHost }}:{{ .Values.postgresqlspicedb.port }}/{{ .Values.postgresqlspicedb.database }}
            {{- end }}

================
File: charts/supermq/templates/spicedb-schema.yaml
================
{{- define "spicedb.schema.zed" -}}

definition user {}


definition role {
	relation entity: domain | group | channel | client
	relation member: user
	relation built_in_role: domain | group | channel | client

	permission delete = entity->manage_role_permission - built_in_role->manage_role_permission
	permission update = entity->manage_role_permission - built_in_role->manage_role_permission
	permission read = entity->manage_role_permission - built_in_role->manage_role_permission

	permission add_user = entity->add_role_users_permission
	permission remove_user = entity->remove_role_users_permission
	permission view_user = entity->view_role_users_permission
}

definition client {
	relation domain: domain // This can't be clubbed with parent_group, but if parent_group is unassigned then we could not track belongs to which domain, so it safe to add domain
	relation parent_group: group

	relation update: role#member
	relation read: role#member
	relation delete: role#member
	relation set_parent_group: role#member
	relation connect_to_channel: role#member

	relation manage_role: role#member
	relation add_role_users: role#member
	relation remove_role_users: role#member
	relation view_role_users: role#member

	permission update_permission = update + parent_group->client_update_permission + domain->client_update_permission
	permission read_permission = read + parent_group->client_read_permission + domain->client_read_permission
	permission delete_permission = delete + parent_group->client_delete_permission + domain->client_delete_permission
	permission set_parent_group_permission = set_parent_group + parent_group->client_set_parent_group_permission + domain->client_set_parent_group_permission
	permission connect_to_channel_permission  =  connect_to_channel + parent_group->client_connect_to_channel + domain->client_connect_to_channel_permission

	permission manage_role_permission = manage_role + parent_group->client_manage_role_permission + domain->client_manage_role_permission
	permission add_role_users_permission = add_role_users + parent_group->client_add_role_users_permission + domain->client_add_role_users_permission
	permission remove_role_users_permission = remove_role_users + parent_group->client_remove_role_users_permission + domain->client_remove_role_users_permission
	permission view_role_users_permission = view_role_users + parent_group->client_view_role_users_permission + domain->client_view_role_users_permission
}

definition channel {
	relation domain: domain // This can't be clubbed with parent_group, but if parent_group is unassigned then we could not track belongs to which domain, so it safe to add domain
	relation parent_group: group

	relation update: role#member
	relation read: role#member
	relation delete: role#member
	relation set_parent_group: role#member
	relation connect_to_client: role#member
	relation publish: role#member | client
	relation subscribe: role#member | client

	relation manage_role: role#member
	relation add_role_users: role#member
	relation remove_role_users: role#member
	relation view_role_users: role#member

	permission update_permission = update + parent_group->channel_update_permission + domain->channel_update_permission
	permission read_permission = read + parent_group->channel_read_permission + domain->channel_read_permission
	permission delete_permission = delete + parent_group->channel_delete_permission + domain->channel_delete_permission
	permission set_parent_group_permission = set_parent_group + parent_group->channel_set_parent_group_permission + domain->channel_set_parent_group_permission
	permission connect_to_client_permission = connect_to_client + parent_group->channel_connect_to_client_permission + domain->channel_connect_to_client
	permission publish_permission = publish + parent_group->channel_publish_permission + domain->channel_publish_permission
	permission subscribe_permission = subscribe + parent_group->channel_subscribe_permission + domain->channel_subscribe_permission

	permission manage_role_permission = manage_role + parent_group->channel_manage_role_permission + domain->channel_manage_role_permission
	permission add_role_users_permission = add_role_users + parent_group->channel_add_role_users_permission + domain->channel_add_role_users_permission
	permission remove_role_users_permission = remove_role_users + parent_group->channel_remove_role_users_permission + domain->channel_remove_role_users_permission
	permission view_role_users_permission = view_role_users + parent_group->channel_view_role_users_permission + domain->channel_view_role_users_permission
}

definition group {
	relation domain: domain // This can't be clubbed with parent_group, but if parent_group is unassigned then we could not track belongs to which domain, so it is safe to add domain
	relation parent_group: group

	relation update: role#member
	relation read: role#member
	relation membership: role#member
	relation delete: role#member
	relation set_child: role#member
	relation set_parent: role#member

	relation manage_role: role#member
	relation add_role_users: role#member
	relation remove_role_users: role#member
	relation view_role_users: role#member

	relation client_create: role#member
	relation channel_create: role#member
	// this allows to add parent for group during the new group creation
	relation subgroup_create: role#member
	relation subgroup_client_create: role#member
	relation subgroup_channel_create: role#member

	relation client_update: role#member
	relation client_read: role#member
	relation client_delete: role#member
	relation client_set_parent_group: role#member
	relation client_connect_to_channel: role#member

	relation client_manage_role: role#member
	relation client_add_role_users: role#member
	relation client_remove_role_users: role#member
	relation client_view_role_users: role#member

	relation channel_update: role#member
	relation channel_read: role#member
	relation channel_delete: role#member
	relation channel_set_parent_group: role#member
	relation channel_connect_to_client: role#member
	relation channel_publish: role#member
	relation channel_subscribe: role#member

	relation channel_manage_role: role#member
	relation channel_add_role_users: role#member
	relation channel_remove_role_users: role#member
	relation channel_view_role_users: role#member

	relation subgroup_update: role#member
	relation subgroup_read: role#member
	relation subgroup_membership: role#member
	relation subgroup_delete: role#member
	relation subgroup_set_child: role#member
	relation subgroup_set_parent: role#member

	relation subgroup_manage_role: role#member
	relation subgroup_add_role_users: role#member
	relation subgroup_remove_role_users: role#member
	relation subgroup_view_role_users: role#member

	relation subgroup_client_update: role#member
	relation subgroup_client_read: role#member
	relation subgroup_client_delete: role#member
	relation subgroup_client_set_parent_group: role#member
	relation subgroup_client_connect_to_channel: role#member

	relation subgroup_client_manage_role: role#member
	relation subgroup_client_add_role_users: role#member
	relation subgroup_client_remove_role_users: role#member
	relation subgroup_client_view_role_users: role#member

	relation subgroup_channel_update: role#member
	relation subgroup_channel_read: role#member
	relation subgroup_channel_delete: role#member
	relation subgroup_channel_set_parent_group: role#member
	relation subgroup_channel_connect_to_client: role#member
	relation subgroup_channel_publish: role#member
	relation subgroup_channel_subscribe: role#member

	relation subgroup_channel_manage_role: role#member
	relation subgroup_channel_add_role_users: role#member
	relation subgroup_channel_remove_role_users: role#member
	relation subgroup_channel_view_role_users: role#member

	// Subgroup permission
	permission subgroup_create_permission = subgroup_create + parent_group->subgroup_create_permission
	permission subgroup_client_create_permission = subgroup_client_create + parent_group->subgroup_client_create_permission
	permission subgroup_channel_create_permission = subgroup_channel_create + parent_group->subgroup_channel_create_permission

	permission subgroup_update_permission = subgroup_update + parent_group->subgroup_update_permission
	permission subgroup_membership_permission = subgroup_membership + parent_group->subgroup_membership_permission
	permission subgroup_read_permission = subgroup_read + parent_group->subgroup_read_permission
	permission subgroup_delete_permission = subgroup_delete + parent_group->subgroup_delete_permission
	permission subgroup_set_child_permission = subgroup_set_child + parent_group->subgroup_set_child_permission
	permission subgroup_set_parent_permission = subgroup_set_parent + parent_group->subgroup_set_parent_permission

	permission subgroup_manage_role_permission = subgroup_manage_role + parent_group->subgroup_manage_role_permission
	permission subgroup_add_role_users_permission = subgroup_add_role_users + parent_group->subgroup_add_role_users_permission
	permission subgroup_remove_role_users_permission = subgroup_remove_role_users + parent_group->subgroup_remove_role_users_permission
	permission subgroup_view_role_users_permission = subgroup_view_role_users + parent_group->subgroup_view_role_users_permission

	// Group permission
	permission update_permission = update + parent_group->subgroup_create_permission + domain->group_update_permission
	permission membership_permission = membership + parent_group->subgroup_membership_permission + domain->group_membership_permission
	permission read_permission = read + parent_group->subgroup_read_permission + domain->group_read_permission
	permission delete_permission = delete + parent_group->subgroup_delete_permission + domain->group_delete_permission
	permission set_child_permission =	set_child + parent_group->subgroup_set_child_permission + domain->group_set_child
	permission set_parent_permission = set_parent + parent_group->subgroup_set_parent_permission + domain->group_set_parent

	permission manage_role_permission = manage_role + parent_group->subgroup_manage_role_permission + domain->group_manage_role_permission
	permission add_role_users_permission = add_role_users + parent_group->subgroup_add_role_users_permission + domain->group_add_role_users_permission
	permission remove_role_users_permission = remove_role_users + parent_group->subgroup_remove_role_users_permission + domain->group_remove_role_users_permission
	permission view_role_users_permission = view_role_users + parent_group->subgroup_view_role_users_permission + domain->group_view_role_users_permission

	// Subgroup clients permission
	permission subgroup_client_update_permission = subgroup_client_update + parent_group->subgroup_client_update_permission
	permission subgroup_client_read_permission = subgroup_client_read + parent_group->subgroup_client_read_permission
	permission subgroup_client_delete_permission = subgroup_client_delete + parent_group->subgroup_client_delete_permission
	permission subgroup_client_set_parent_group_permission = subgroup_client_set_parent_group + parent_group->subgroup_client_set_parent_group_permission
	permission subgroup_client_connect_to_channel_permission = subgroup_client_connect_to_channel + parent_group->subgroup_client_connect_to_channel_permission

	permission subgroup_client_manage_role_permission = subgroup_client_manage_role + parent_group->subgroup_client_manage_role_permission
	permission subgroup_client_add_role_users_permission = subgroup_client_add_role_users + parent_group->subgroup_client_add_role_users_permission
	permission subgroup_client_remove_role_users_permission = subgroup_client_remove_role_users + parent_group->subgroup_client_remove_role_users_permission
	permission subgroup_client_view_role_users_permission = subgroup_client_view_role_users + parent_group->subgroup_client_view_role_users_permission

	// Group clients permission
	permission client_create_permission = client_create + parent_group->subgroup_client_create + domain->client_create_permission
	permission client_update_permission = client_update + parent_group->subgroup_client_update + domain->client_update_permission
	permission client_read_permission = client_read + parent_group->subgroup_client_read + domain->client_read_permission
	permission client_delete_permission = client_delete + parent_group->subgroup_client_delete + domain->client_delete_permission
	permission client_set_parent_group_permission = client_set_parent_group + parent_group->subgroup_client_set_parent_group + domain->client_set_parent_group_permission
	permission client_connect_to_channel_permission = client_connect_to_channel + parent_group->subgroup_client_connect_to_channel + domain->client_connect_to_channel_permission

	permission client_manage_role_permission = client_manage_role + parent_group->subgroup_client_manage_role + domain->client_manage_role_permission
	permission client_add_role_users_permission = client_add_role_users + parent_group->subgroup_client_add_role_users + domain->client_add_role_users_permission
	permission client_remove_role_users_permission = client_remove_role_users + parent_group->subgroup_client_remove_role_users + domain->client_remove_role_users_permission
	permission client_view_role_users_permission = client_view_role_users + parent_group->subgroup_client_view_role_users + domain->client_view_role_users_permission

	// Subgroup channels permission
	permission subgroup_channel_update_permission = subgroup_channel_update + parent_group->subgroup_channel_update_permission
	permission subgroup_channel_read_permission = subgroup_channel_read + parent_group->subgroup_channel_read_permission
	permission subgroup_channel_delete_permission =  subgroup_channel_delete + parent_group->subgroup_channel_delete_permission
	permission subgroup_channel_set_parent_group_permission = subgroup_channel_set_parent_group + parent_group->subgroup_channel_set_parent_group_permission
	permission subgroup_channel_connect_to_client_permission = subgroup_channel_connect_to_client + parent_group->subgroup_channel_connect_to_client_permission
	permission subgroup_channel_publish_permission = subgroup_channel_publish + parent_group->subgroup_channel_publish_permission
	permission subgroup_channel_subscribe_permission = subgroup_channel_subscribe + parent_group->subgroup_channel_subscribe_permission

	permission subgroup_channel_manage_role_permission = subgroup_channel_manage_role + parent_group->subgroup_channel_manage_role_permission
	permission subgroup_channel_add_role_users_permission = subgroup_channel_add_role_users + parent_group->subgroup_channel_add_role_users_permission
	permission subgroup_channel_remove_role_users_permission = subgroup_channel_remove_role_users + parent_group->subgroup_channel_remove_role_users_permission
	permission subgroup_channel_view_role_users_permission = subgroup_channel_view_role_users + parent_group->subgroup_channel_view_role_users_permission

	// Group channels permission
	permission channel_create_permission = channel_create + parent_group->subgroup_channel_create_permission + domain->channel_create_permission
	permission channel_update_permission = channel_update + parent_group->subgroup_channel_update + domain->channel_update_permission
	permission channel_read_permission = channel_read + parent_group->subgroup_channel_read + domain->channel_read_permission
	permission channel_delete_permission = channel_delete + parent_group->subgroup_channel_delete_permission + domain->channel_delete_permission
	permission channel_set_parent_group_permission = channel_set_parent_group + parent_group->subgroup_channel_set_parent_group + domain->channel_set_parent_group_permission
	permission channel_connect_to_client_permission = channel_connect_to_client + parent_group->subgroup_channel_connect_to_client + domain->channel_connect_to_client_permission
	permission channel_publish_permission = channel_publish + parent_group->subgroup_channel_publish + domain->channel_publish_permission
	permission channel_subscribe_permission = channel_subscribe + parent_group->subgroup_channel_subscribe + domain->channel_subscribe_permission

	permission channel_manage_role_permission = channel_manage_role + parent_group->subgroup_channel_manage_role + domain->channel_manage_role_permission
	permission channel_add_role_users_permission = channel_add_role_users + parent_group->subgroup_channel_add_role_users + domain->channel_add_role_users_permission
	permission channel_remove_role_users_permission = channel_remove_role_users + parent_group->subgroup_channel_remove_role_users + domain->channel_remove_role_users_permission
	permission channel_view_role_users_permission = channel_view_role_users + parent_group->subgroup_channel_view_role_users + domain->channel_view_role_users_permission


}

definition domain {
	//Replace platform with organization in future
	relation organization: platform
	relation team: team

	relation update: role#member | team#member
	relation enable: role#member | team#member
	relation disable: role#member | team#member
	relation read: role#member | team#member
	relation delete: role#member | team#member

	relation manage_role: role#member | team#member
	relation add_role_users: role#member | team#member
	relation remove_role_users: role#member | team#member
	relation view_role_users: role#member | team#member

	relation client_create: role#member | team#member
	relation channel_create: role#member | team#member
	relation group_create: role#member | team#member

	relation client_update: role#member | team#member
	relation client_read: role#member | team#member
	relation client_delete: role#member | team#member
	relation client_set_parent_group: role#member | team#member
	relation client_connect_to_channel: role#member | team#member

	relation client_manage_role: role#member | team#member
	relation client_add_role_users: role#member | team#member
	relation client_remove_role_users: role#member | team#member
	relation client_view_role_users: role#member | team#member

	relation channel_update: role#member | team#member
	relation channel_read: role#member | team#member
	relation channel_delete: role#member | team#member
	relation channel_set_parent_group: role#member | team#member
	relation channel_connect_to_client: role#member | team#member
	relation channel_publish: role#member | team#member
	relation channel_subscribe: role#member | team#member

	relation channel_manage_role: role#member | team#member
	relation channel_add_role_users: role#member | team#member
	relation channel_remove_role_users: role#member | team#member
	relation channel_view_role_users: role#member | team#member

	relation group_update: role#member | team#member
	relation group_membership: role#member | team#member
	relation group_read: role#member | team#member
	relation group_delete: role#member | team#member
	relation group_set_child: role#member | team#member
	relation group_set_parent: role#member | team#member

	relation group_manage_role: role#member | team#member
	relation group_add_role_users: role#member | team#member
	relation group_remove_role_users: role#member | team#member
	relation group_view_role_users: role#member | team#member

	permission update_permission = update + team->domain_update + organization->admin
	permission read_permission = read + team->domain_read + organization->admin
	permission enable_permission = enable + team->domain_update + organization->admin
	permission disable_permission = disable + team->domain_update + organization->admin
	permission delete_permission = delete + team->domain_delete + organization->admin

	permission manage_role_permission = manage_role + team->domain_manage_role + organization->admin
	permission add_role_users_permission = add_role_users + team->domain_add_role_users + organization->admin
	permission remove_role_users_permission = remove_role_users + team->domain_remove_role_users + organization->admin
	permission view_role_users_permission = view_role_users + team->domain_view_role_users + organization->admin

	permission membership = read + update + enable + disable + delete +
	manage_role + add_role_users + remove_role_users + view_role_users +
	client_create + channel_create + group_create +
	client_update + client_read + client_delete + client_set_parent_group + client_connect_to_channel +
	client_manage_role + client_add_role_users + client_remove_role_users + client_view_role_users +
	channel_update + channel_read + channel_delete + channel_set_parent_group + channel_connect_to_client + channel_publish + channel_subscribe +
	channel_manage_role + channel_add_role_users + channel_remove_role_users + channel_view_role_users +
	group_update + group_membership + group_read + group_delete + group_set_child + group_set_parent +
	group_manage_role + group_add_role_users + group_remove_role_users + group_view_role_users

	permission admin = read & update & enable & disable & delete & manage_role & add_role_users & remove_role_users & view_role_users

	permission client_create_permission = client_create + team->client_create + organization->admin
	permission channel_create_permission = channel_create + team->channel_create + organization->admin
	permission group_create_permission = group_create + team->group_create + organization->admin

	permission client_update_permission = client_update + team->client_update + organization->admin
	permission client_read_permission = client_read + team->client_read + organization->admin
	permission client_delete_permission = client_delete + team->client_delete + organization->admin
	permission client_set_parent_group_permission = client_set_parent_group + team->client_set_parent_group + organization->admin
	permission client_connect_to_channel_permission = client_connect_to_channel + team->client_connect_to_channel + organization->admin

	permission client_manage_role_permission = client_manage_role + team->client_manage_role + organization->admin
	permission client_add_role_users_permission = client_add_role_users + team->client_add_role_users + organization->admin
	permission client_remove_role_users_permission = client_remove_role_users + team->client_remove_role_users + organization->admin
	permission client_view_role_users_permission = client_view_role_users + team->client_view_role_users + organization->admin

	permission channel_update_permission = channel_update + team->channel_update + organization->admin
	permission channel_read_permission = channel_read + team->channel_read + organization->admin
	permission channel_delete_permission = channel_delete + team->channel_delete + organization->admin
	permission channel_set_parent_group_permission = channel_set_parent_group + team->channel_set_parent_group + organization->admin
	permission channel_connect_to_client_permission = channel_connect_to_client + team->channel_connect_to_client + organization->admin
	permission channel_publish_permission = channel_publish + team->channel_publish + organization->admin
	permission channel_subscribe_permission = channel_subscribe + team->channel_subscribe + organization->admin

	permission channel_manage_role_permission = channel_manage_role + team->channel_manage_role + organization->admin
	permission channel_add_role_users_permission = channel_add_role_users + team->channel_add_role_users + organization->admin
	permission channel_remove_role_users_permission = channel_remove_role_users + team->channel_remove_role_users + organization->admin
	permission channel_view_role_users_permission = channel_view_role_users + team->channel_view_role_users + organization->admin

	permission group_update_permission = group_update + team->group_update + organization->admin
	permission group_membership_permission = group_membership + team->group_membership + organization->admin
	permission group_read_permission = group_read + team->group_read + organization->admin
	permission group_delete_permission = group_delete + team->group_delete + organization->admin
	permission group_set_child_permission = group_set_child + team->group_set_child + organization->admin
	permission group_set_parent_permission = group_set_parent + team->group_set_parent + organization->admin

	permission group_manage_role_permission = group_manage_role + team->group_manage_role + organization->admin
	permission group_add_role_users_permission = group_add_role_users + team->group_add_role_users + organization->admin
	permission group_remove_role_users_permission = group_remove_role_users + team->group_remove_role_users + organization->admin
	permission group_view_role_users_permission = group_view_role_users + team->group_view_role_users + organization->admin

}

// Add this relation and permission in future while adding organization
definition team {
	relation organization: organization
	relation parent_team: team

	relation delete: role#member
	relation enable: role#member | team#member
	relation disable: role#member | team#member
	relation update: role#member
	relation read: role#member

	relation set_parent: role#member
	relation set_child: role#member

	relation member: role#member

	relation manage_role: role#member
	relation add_role_users: role#member
	relation remove_role_users: role#member
	relation view_role_users: role#member

	relation subteam_delete: role#member
	relation subteam_update: role#member
	relation subteam_read: role#member

	relation subteam_member: role#member

	relation subteam_set_child: role#member
	relation subteam_set_parent: role#member

	relation subteam_manage_role: role#member
	relation subteam_add_role_users: role#member
	relation subteam_remove_role_users: role#member
	relation subteam_view_role_users: role#member

    // Domain related permission

	relation domain_update: role#member | team#member
	relation domain_read: role#member | team#member
	relation domain_membership: role#member | team#member
	relation domain_delete: role#member | team#member

	relation domain_manage_role: role#member | team#member
	relation domain_add_role_users: role#member | team#member
	relation domain_remove_role_users: role#member | team#member
	relation domain_view_role_users: role#member | team#member

	relation client_create: role#member | team#member
	relation channel_create: role#member | team#member
	relation group_create: role#member | team#member

	relation client_update: role#member | team#member
	relation client_read: role#member | team#member
	relation client_delete: role#member | team#member
	relation client_set_parent_group: role#member | team#member
	relation client_connect_to_channel: role#member | team#member

	relation client_manage_role: role#member | team#member
	relation client_add_role_users: role#member | team#member
	relation client_remove_role_users: role#member | team#member
	relation client_view_role_users: role#member | team#member

	relation channel_update: role#member | team#member
	relation channel_read: role#member | team#member
	relation channel_delete: role#member | team#member
	relation channel_set_parent_group: role#member | team#member
	relation channel_connect_to_client: role#member | team#member
	relation channel_publish: role#member | team#member
	relation channel_subscribe: role#member | team#member

	relation channel_manage_role: role#member | team#member
	relation channel_add_role_users: role#member | team#member
	relation channel_remove_role_users: role#member | team#member
	relation channel_view_role_users: role#member | team#member

	relation group_update: role#member | team#member
	relation group_membership: role#member | team#member
	relation group_read: role#member | team#member
	relation group_delete: role#member | team#member
	relation group_set_child: role#member | team#member
	relation group_set_parent: role#member | team#member

	relation group_manage_role: role#member | team#member
	relation group_add_role_users: role#member | team#member
	relation group_remove_role_users: role#member | team#member
	relation group_view_role_users: role#member | team#member

	permission delete_permission = delete + organization->team_delete + parent_team->subteam_delete + organization->admin
	permission update_permission = update + organization->team_update + parent_team->subteam_update + organization->admin
	permission read_permission = read + organization->team_read + parent_team->subteam_read + organization->admin

	permission set_parent_permission = set_parent + organization->team_set_parent + parent_team->subteam_set_parent + organization->admin
	permission set_child_permisssion = set_child + organization->team_set_child + parent_team->subteam_set_child + organization->admin

    permission membership = member + organization->team_member + parent_team->subteam_member + organization->admin

	permission manage_role_permission = manage_role + organization->team_manage_role + parent_team->subteam_manage_role + organization->admin
	permission add_role_users_permission = add_role_users + organization->team_add_role_users + parent_team->subteam_add_role_users + organization->admin
	permission remove_role_users_permission = remove_role_users + organization->team_remove_role_users + parent_team->subteam_remove_role_users + organization->admin
	permission view_role_users_permission = view_role_users + organization->team_view_role_users + parent_team->subteam_view_role_users + organization->admin
}


definition organization {
	relation platform: platform
	relation administrator: user

	relation delete: role#member
	relation update: role#member
	relation read: role#member

	relation member: role#member

	relation manage_role: role#member
	relation add_role_users: role#member
	relation remove_role_users: role#member
	relation view_role_users: role#member

	relation team_create: role#member

	relation team_delete: role#member
	relation team_update: role#member
	relation team_read: role#member

	relation team_member: role#member  // Will be member of all the teams in the organization

	relation team_set_child: role#member
	relation team_set_parent: role#member

	relation team_manage_role: role#member
	relation team_add_role_users: role#member
	relation team_remove_role_users: role#member
	relation team_view_role_users: role#member

	permission admin = administrator + platform->administrator
	permission delete_permission = admin + delete->member
	permission update_permission = admin + update->member
	permission read_permission = admin + read->member

	permission membership = admin + member->member

	permission team_create_permission = admin + team_create->member

	permission manage_role_permission = admin + manage_role
	permission add_role_users_permisson = admin + add_role_users
	permission remove_role_users_permission = admin + remove_role_users
	permission view_role_users_permission = admin + view_role_users
}


definition platform {
  relation administrator: user
  relation member: user

  permission admin = administrator
  permission membership = administrator + member
}


{{- end -}}

================
File: charts/supermq/templates/spicedb-service.yaml
================
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-spicedb
spec:
  selector:
    app: {{ .Release.Name }}
    component: spicedb
  type: ClusterIP
  ports:
    - port: {{ .Values.spicedb.grpc.port }}
      protocol: TCP
      name: {{ .Release.Name }}-spicedb-grpc-{{ .Values.spicedb.grpc.port }}
    {{- if .Values.spicedb.dispatch.enabled }}
    - port: {{ .Values.spicedb.dispatch.port }}
      protocol: TCP
      name: {{ .Release.Name }}-spicedb-dispatch-{{ .Values.spicedb.disptach.port }}
    {{- end }}
    {{- if .Values.spicedb.http.enabled }}
    - port: {{ .Values.spicedb.http.port }}
      protocol: TCP
      name: {{ .Release.Name }}-spicedb-http-{{ .Values.spicedb.http.port }}
    {{- end }}
    {{- if .Values.spicedb.metrics.enabled }}
    - port: {{ .Values.spicedb.metrics.port }}
      protocol: TCP
      name: {{ .Release.Name }}-spicedb-metrics-{{ .Values.spicedb.metrics.port }}
    {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-spicedb-headless
spec:
  selector:
    app: {{ .Release.Name }}
    component: spicedb
  type: ClusterIP
  clusterIP: None
  ports:
    - port: {{ .Values.spicedb.grpc.port }}
      protocol: TCP
      name: {{ .Release.Name }}-spicedb-grpc-{{ .Values.spicedb.grpc.port }}
{{- if .Values.spicedb.dispatch.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-spicedb-dispatch-headless
spec:
  selector:
    app: {{ .Release.Name }}
    component: spicedb
  type: ClusterIP
  clusterIP: None
  ports:
    - port: {{ .Values.spicedb.dispatch.port }}
      protocol: TCP
      name: {{ .Release.Name }}-spicedb-dispatch-{{ .Values.spicedb.dispatch.port }}
{{- end }}

================
File: charts/supermq/templates/ui-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0
{{- if .Values.ui.enabled }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-ui
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: ui
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: ui
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.ui.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: ui
          image: "{{ default (printf "%s/ui" .Values.defaults.image.rootRepository) .Values.ui.image.repository }}:{{ default .Values.defaults.image.tag .Values.ui.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.ui.image.pullPolicy }}
          env:
            - name: SMQ_UI_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.ui.logLevel | quote }}
            - name: SMQ_UI_PORT
              value: {{ .Values.ui.port | quote }}
            {{- $hostname := default (printf "https://%s" .Values.ingress.hostname) .Values.ui.hostname }}
            {{- if $hostname }}
            - name: SMQ_UI_HOST_URL
              value: {{ $hostname | quote }}
            {{- end }}
            - name: SMQ_UI_PATH_PREFIX
              value: {{ .Values.ui.pathPrefix | quote  }}
            - name: SMQ_HTTP_ADAPTER_URL
              value: {{ default (printf "http://%s-adapter-http:%s " .Release.Name (.Values.adapter_http.httpPort | toString )) .Values.ui.httpAdapterUrl }}
            - name: SMQ_THINGS_URL
              value: {{ default  (printf "http://%s-clients:%s" .Release.Name (.Values.clients.httpPort | toString )) .Values.ui.clientsUrl }}
            - name: SMQ_USERS_URL
              value: {{ default  (printf "http://%s-users:%s" .Release.Name (.Values.users.httpPort | toString ))  .Values.ui.usersUrl }}
            - name: SMQ_INVITATIONS_URL
              value: {{ default  (printf "http://%s-invitations:%s" .Release.Name (.Values.invitations.httpPort | toString ))  .Values.ui.invitationsUrl }}
            - name: SMQ_DOMAINS_URL
              value: {{ default  (printf "http://%s-auth:%s" .Release.Name (.Values.auth.httpPort | toString )) .Values.ui.authUrl }}
            - name: SMQ_JOURNAL_URL
              value: {{ default  (printf "http://%s-journal:%s" .Release.Name (.Values.journal.httpPort | toString )) .Values.ui.journalUrl }}
            - name: SMQ_UI_CONTENT_TYPE
              value: {{ .Values.ui.contentType | quote  }}
            - name: SMQ_UI_DB_HOST
            {{- if .Values.postgresqlui.enabled }}
              value: {{ .Release.Name }}-postgresqlui
            {{- else }}
              value: {{ .Values.postgresqlui.host }}
            {{- end }}
            - name: SMQ_UI_DB_PORT
              value: {{ .Values.postgresqlui.port | quote }}
            - name: SMQ_UI_DB_USER
              value: {{ .Values.postgresqlui.username | quote  }}
            - name: SMQ_UI_DB_PASS
              value: {{ .Values.postgresqlui.password | quote  }}
            - name: SMQ_UI_DB_NAME
              value: {{ .Values.postgresqlui.database | quote  }}
            - name: SMQ_GOOGLE_CLIENT_ID
              value: {{ .Values.ui.googleClientID | quote  }}
            - name: SMQ_GOOGLE_CLIENT_SECRET
              value: {{ .Values.ui.googleClientSecret | quote  }}
            {{- $googleRedirectHostname := default (printf "https://%s" .Values.ingress.hostname) .Values.ui.googleRedirectHostname }}
            - name: SMQ_GOOGLE_REDIRECT_URL
              value: {{$googleRedirectHostname}}{{.Values.ui.googleRedirectPath  }}
            - name: SMQ_GOOGLE_STATE
              value: {{ .Values.ui.googleState | quote  }}
            - name: SMQ_UI_HASH_KEY
              value: {{ .Values.ui.hashKey | quote  }}
            - name: SMQ_UI_BLOCK_KEY
              value: {{ .Values.ui.blockKey | quote  }}
          ports:
            - containerPort: {{ .Values.ui.port }}
              protocol: TCP
          stdin: true
          tty: true
{{- end }}

================
File: charts/supermq/templates/ui-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

{{- if .Values.ui.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-ui
spec:
  selector:
    app: {{ .Release.Name }}
    component: ui
  ports:
    - protocol: TCP
      port: {{ .Values.ui.port }}
{{- end }}

================
File: charts/supermq/templates/users-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-users-config
data:
  email.tmpl: |
    To: {{`{{range $index, $v := .To}}{{if $index}},{{end}}{{$v}}{{end}}`}}
    From: {{`{{.From}}`}}
    Subject: {{`{{.Subject}}`}}
    {{`{{.Header}}`}}
    You have initiated password reset.
    Follow the link below to reset password.
    {{`{{.Content}}`}}
    {{`{{.Footer}}`}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-users
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: users
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.users.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: users
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.users.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-users
          image: "{{ default (printf "%s/users" .Values.defaults.image.rootRepository) .Values.users.image.repository }}:{{ default .Values.defaults.image.tag .Values.users.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.users.image.pullPolicy }}
          env:
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Values.jaeger.fullnameOverride }}-collector:{{ .Values.jaeger.collector.service.otlp.http.port }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.users.jaegerTraceRatio | quote  }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.users.sendTelemetry | quote  }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
            - name: SMQ_USERS_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.users.logLevel  | quote }}
            - name: SMQ_USERS_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_USERS_HTTP_PORT
              value: {{ .Values.users.httpPort  | quote  }}
            - name: SMQ_TOKEN_RESET_ENDPOINT
              value: {{ .Values.users.tokenResetEndpoint | quote }}
            - name: SMQ_USERS_ADMIN_EMAIL
              value: {{ .Values.users.admin.email | quote }}
            - name: SMQ_USERS_ADMIN_PASSWORD
              value: {{ .Values.users.admin.password | quote }}
            - name: SMQ_USERS_ADMIN_USERNAME
              value: {{ .Values.users.admin.username | quote }}
            - name: SMQ_USERS_ADMIN_FIRST_NAME
              value: {{ .Values.users.admin.firstname | quote }}
            - name: SMQ_USERS_ADMIN_LAST_NAME
              value: {{ .Values.users.admin.lastname | quote }}
            - name: SMQ_USERS_ACCESS_TOKEN_DURATION
              value: {{ .Values.users.accessTokenDuration | quote }}
            - name: SMQ_USERS_REFRESH_TOKEN_DURATION
              value: {{ .Values.users.refreshTokenDuration | quote }}
            - name: SMQ_USERS_SECRET_KEY
              value: {{ .Values.users.secretKey | quote }}
            - name: SMQ_USERS_PASS_REGEX
              value: {{ .Values.users.passwordRegex | quote }}
            - name: SMQ_USERS_ALLOW_SELF_REGISTER
              value: {{ .Values.users.allowSelfRegister | quote }}
            - name: SMQ_USERS_DELETE_INTERVAL
              value: {{ .Values.users.deleteInterval | quote  }}
            - name: SMQ_USERS_DELETE_AFTER
              value: {{ .Values.users.deleteAfter | quote  }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_KEY
              value: {{ .Values.domains.grpcClientKey | quote }}
            - name: SMQ_DOMAINS_GRPC_CLIENT_CERT
              value: {{ .Values.domains.grpcClientCert | quote }}
            - name: SMQ_DOMAINS_GRPC_TIMEOUT
              value: {{ .Values.domains.grpcTimeout | quote }}
            - name: SMQ_DOMAINS_GRPC_URL
              value: http://{{ .Release.Name }}-domains:{{ .Values.domains.grpcPort }}
            - name: SMQ_USERS_DB_HOST
            {{- if .Values.postgresqlusers.enabled }}
              value: "{{ .Release.Name }}-postgresqlusers"
            {{- else }}
              value: {{ .Values.postgresqlusers.host | quote }}
            {{- end }}
            - name: SMQ_USERS_DB_PORT
              value: {{ .Values.postgresqlusers.port  | quote }}
            - name: SMQ_USERS_DB_NAME
              value: {{ .Values.postgresqlusers.database | quote }}
            - name: SMQ_USERS_DB_USER
              value: {{ .Values.postgresqlusers.username | quote }}
            - name: SMQ_USERS_DB_PASS
              value: {{ .Values.postgresqlusers.password | quote }}
            - name : SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_SPICEDB_HOST
              value: {{ .Release.Name }}-spicedb-envoy
            - name: SMQ_SPICEDB_PORT
              value: {{ .Values.spicedb.grpc.port | quote}}
          ports:
            - containerPort: {{ .Values.users.httpPort }}
              protocol: TCP
          volumeMounts:
            - mountPath: /email.tmpl
              name: users-config
              subPath: email.tmpl
      volumes:
        - name: users-config
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-users-config
            optional: false
      {{- with .Values.users.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.users.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.users.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

================
File: charts/supermq/templates/users-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-users
spec:
  selector:
    app: {{ .Release.Name }}
    component: users
  ports:
    - protocol: TCP
      port: {{ .Values.users.httpPort }}
      name: {{ .Release.Name }}-users-http

================
File: charts/supermq/templates/ws-deployment.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-ws-adapter
spec:
  replicas: {{ .Values.defaults.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: ws-adapter
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.adapter_ws.httpPort }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Release.Name }}
        component: ws-adapter
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.adapter_ws.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-ws-adapter
          image: "{{ default (printf "%s/ws" .Values.defaults.image.rootRepository) .Values.adapter_ws.image.repository }}:{{ default .Values.defaults.image.tag .Values.adapter_ws.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.adapter_ws.image.pullPolicy }}
          env:
            - name: SMQ_WS_ADAPTER_LOG_LEVEL
              value: {{ default .Values.defaults.logLevel .Values.adapter_ws.logLevel | quote }}
            - name: SMQ_WS_ADAPTER_HTTP_HOST
              value: "0.0.0.0"
            - name: SMQ_WS_ADAPTER_HTTP_PORT
              value: {{ .Values.adapter_ws.httpPort | quote }}
            - name: SMQ_CLIENTS_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.clients.authGrpcPort }}
            - name: SMQ_CLIENTS_AUTH_GRPC_TIMEOUT
              value: {{ .Values.clients.grpcTimeout | quote }}
            - name: SMQ_CHANNELS_GRPC_URL
              value: {{ .Release.Name }}-channels:{{ .Values.channels.grpcPort }}
            - name: SMQ_CHANNELS_GRPC_TIMEOUT
              value: {{ .Values.channels.grpcTimeout | quote }}
            - name: SMQ_AUTH_GRPC_URL
              value: {{ .Release.Name }}-envoy:{{ .Values.auth.grpcPort }}
            - name: SMQ_AUTH_GRPC_TIMEOUT
              value: {{ .Values.auth.grpcTimeout | quote }}
            - name: SMQ_MESSAGE_BROKER_URL
              value: nats://{{ .Release.Name }}-nats:{{ .Values.defaults.natsPort }}
            - name: SMQ_JAEGER_URL
              value: "http://{{ .Release.Name }}-jaeger-collector:{{ .Values.defaults.jaegerCollectorPort }}/v1/traces"
            - name: SMQ_JAEGER_TRACE_RATIO
              value: {{ default .Values.defaults.jaegerTraceRatio .Values.adapter_ws.jaegerTraceRatio | quote }}
            - name: SMQ_SEND_TELEMETRY
              value: {{ default .Values.defaults.sendTelemetry .Values.adapter_ws.sendTelemetry | quote }}
            - name: SMQ_ES_URL
              value: {{ .Values.defaults.eventStreamURL | quote }}
          ports:
            - containerPort: {{ .Values.adapter_ws.httpPort | int }}
              protocol: TCP
      {{- with .Values.domains.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.domains.affinity }}
      affinity:
        {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.domains.tolerations }}
      tolerations:
        {{- toYaml . | nindent 6 }}
      {{- end }}

================
File: charts/supermq/templates/ws-service.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-ws-adapter
spec:
  selector:
    app: {{ .Release.Name }}
    component: ws-adapter
  ports:
    - port: {{ .Values.adapter_ws.httpPort }}
      protocol: TCP

================
File: charts/supermq/.helmignore
================
# Patterns to ignore when building packages.
# This supports shell glob matching, relative path matching, and
# negation (prefixed with !). Only one pattern per line.
.DS_Store
# Common VCS dirs
.git/
.gitignore
.bzr/
.bzrignore
.hg/
.hgignore
.svn/
# Common backup files
*.swp
*.bak
*.tmp
*~
# Various IDEs
.project
.idea/
*.tmproj
.vscode/

================
File: charts/supermq/Chart.lock
================
dependencies:
- name: nats
  repository: https://nats-io.github.io/k8s/helm/charts/
  version: 1.2.1
- name: jaeger
  repository: https://jaegertracing.github.io/helm-charts
  version: 3.1.1
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: postgresql
  repository: https://charts.bitnami.com/bitnami
  version: 12.5.6
- name: redis
  repository: https://charts.bitnami.com/bitnami
  version: 19.6.2
- name: vault
  repository: https://helm.releases.hashicorp.com
  version: 0.28.1
digest: sha256:4486666650fcf3f0279212981a427869ac1d3cf3861bd90edbd37a2d7153a148
generated: "2025-01-27T16:20:52.384706554+03:00"

================
File: charts/supermq/Chart.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

apiVersion: v2
name: Supermq
description: Event-driven Infrastructure for Modern Cloud
icon: https://avatars1.githubusercontent.com/u/13207490
type: application
version: 0.16.0 # Incremented chart version if the chart is updated
appVersion: "0.16.0" # Update application version if the app is updated
home: https://abstractmachines.fr/supermq.html
sources:
  - https://hub.docker.com/u/supermq
maintainers:
  - name: drasko
    email: drasko.draskovic@abstractmachines.fr
  - name: dusan
    email: dusan.borovcanin@abstractmachines.fr

dependencies:
  - name: nats
    version: "1.2.1"
    repository: "@nats"

  - name: jaeger
    version: "3.1.1"
    repository: "@jaegertracing"

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlauth
    condition: postgresqlauth.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlspicedb
    condition: postgresqlspicedb.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlchannels
    condition: postgresqlchannels.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlclients
    condition: postgresqlclients.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqldomains
    condition: postgresqldomains.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlgroups
    condition: postgresqlgroups.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlusers
    condition: postgresqlusers.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlcerts
    condition: postgresqlcerts.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlinvitations
    condition: postgresqlinvitations.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqljournal
    condition: postgresqljournal.enabled

  - name: postgresql
    version: "12.5.6"
    repository: "@bitnami"
    alias: postgresqlui
    condition: postgresqlui.enabled

  - name: redis
    version: "19.6.2"
    repository: "@bitnami"
    alias: redis-clients

  - name: vault
    version: "0.28.1"
    repository: "@hashicorp"
    alias: "vault"
    condition: vault.enabled

================
File: charts/supermq/README.md
================
# Supermq

Event-driven Infrastructure for Modern Cloud

![Version: 0.16.0](https://img.shields.io/badge/Version-0.16.0-informational?style=flat-square) ![Type: application](https://img.shields.io/badge/Type-application-informational?style=flat-square) ![AppVersion: 0.16.0](https://img.shields.io/badge/AppVersion-0.16.0-informational?style=flat-square)

**Homepage:** <https://abstractmachines.fr/supermq.html>

## Maintainers

| Name | Email | Url |
| ---- | ------ | --- |
| drasko | <drasko.draskovic@abstractmachines.fr> |  |
| dusan | <dusan.borovcanin@abstractmachines.fr> |  |

## Source Code

* <https://hub.docker.com/u/supermq>

## Requirements

| Repository | Name | Version |
|------------|------|---------|
| @bitnami | postgresqldomains(postgresql) | 12.5.6 |
| @bitnami | postgresqlusers(postgresql) | 12.5.6 |
| @bitnami | postgresqlauth(postgresql) | 12.5.6 |
| @bitnami | postgresqlspicedb(postgresql) | 12.5.6 |
| @bitnami | postgresqlchannels(postgresql) | 12.5.6 |
| @bitnami | postgresqlclients(postgresql) | 12.5.6 |
| @bitnami | postgresqlui(postgresql) | 12.5.6 |
| @bitnami | postgresqlgroups(postgresql) | 12.5.6 |
| @bitnami | postgresqljournal(postgresql) | 12.5.6 |
| @bitnami | postgresqlcerts(postgresql) | 12.5.6 |
| @bitnami | postgresqlinvitations(postgresql) | 12.5.6 |
| @bitnami | redis-clients(redis) | 19.6.2 |
| @hashicorp | vault(vault) | 0.28.1 |
| @jaegertracing | jaeger | 3.1.1 |
| @nats | nats | 1.2.1 |

## Values

| Key | Type | Default | Description |
|-----|------|---------|-------------|
| adapter_coap.image | object | `{}` |  |
| adapter_coap.jaegerTraceRatio | float | `1` |  |
| adapter_coap.port | int | `5683` |  |
| adapter_coap.sendTelemetry | bool | `true` |  |
| adapter_http.httpPort | int | `8008` |  |
| adapter_http.image | object | `{}` |  |
| auth.accessTokenDuration | string | `"1h"` |  |
| auth.adminEmail | string | `"admin@example.com"` |  |
| auth.adminPassword | string | `"12345678"` |  |
| auth.affinity | object | `{}` |  |
| auth.grpcClientCert | string | `"./ssl/certs/auth-grpc-client.crt"` |  |
| auth.grpcClientKey | string | `"./ssl/certs/auth-grpc-client.key"` |  |
| auth.grpcPort | int | `7001` |  |
| auth.grpcTimeout | string | `"300s"` |  |
| auth.httpPort | int | `9001` |  |
| auth.image | object | `{}` |  |
| auth.invitationDuration | string | `"168h"` |  |
| auth.nodeSelector | object | `{}` |  |
| auth.refreshTokenDuration | string | `"24h"` |  |
| auth.secretKey | string | `"HyE2D4RUt9nnKG6v8zKEqAp6g6ka8hhZsqUpzgKvnwpXrNVQSH"` |  |
| auth.tolerations | object | `{}` |  |
| certs.enabled | bool | `true` |  |
| certs.httpPort | int | `9019` |  |
| certs.image | object | `{}` |  |
| certs.logLevel | string | `"info"` |  |
| certs.sdkCertsUrl | string | `"${SMQ_CERTS_SDK_HOST}:9010"` |  |
| certs.sdkHost | string | `"http://supermq-am-certs"` |  |
| certs.sdkTlsVerification | string | `"false"` |  |
| certs.signCAKeyPath | string | `"/etc/ssl/certs/ca.key"` |  |
| certs.signCAPath | string | `"/etc/ssl/certs/ca.crt"` |  |
| certs.vault.approleRoleid | string | `"supermq"` |  |
| certs.vault.approleSecret | string | `"supermq"` |  |
| certs.vault.namespace | string | `"supermq"` |  |
| certs.vault.thingsCertsPkiPath | string | `"pki_int"` |  |
| certs.vault.thingsCertsPkiRoleName | string | `"supermq_things_certs"` |  |
| certs.vault.url | string | `"http://supermq-vault:8200"` |  |
| channels.grpcClientCaCerts | string | `"./ssl/certs/ca.crt"` |  |
| channels.grpcClientCert | string | `"./ssl/certs/channels-grpc-client.crt"` |  |
| channels.grpcClientKey | string | `"./ssl/certs/channels-grpc-client.key"` |  |
| channels.grpcPort | int | `7005` |  |
| channels.grpcServerCert | string | `"./ssl/certs/channels-grpc-server.crt"` |  |
| channels.grpcServerKey | string | `"./ssl/certs/channels-grpc-server.key"` |  |
| channels.grpcTimeout | string | `"1s"` |  |
| channels.httpPort | int | `9005` |  |
| channels.image | object | `{}` |  |
| clients.authGrpcPort | int | `7006` |  |
| clients.authHttpPort | int | `9001` |  |
| clients.cacheKeyduration | string | `"10m"` |  |
| clients.grpcClientCert | string | `"./ssl/certs/clients-grpc-client.crt"` |  |
| clients.grpcClientKey | string | `"./ssl/certs/clients-grpc-client.key"` |  |
| clients.grpcTimeout | string | `"1s"` |  |
| clients.httpPort | int | `9006` |  |
| clients.image | object | `{}` |  |
| clients.redisCachePort | int | `6379` |  |
| clients.redisESPort | int | `6379` |  |
| defaults.eventStreamURL | string | `"supermq-nats:4222"` |  |
| defaults.image.pullPolicy | string | `"IfNotPresent"` |  |
| defaults.image.rootRepository | string | `"supermq"` |  |
| defaults.image.tag | string | `"latest"` |  |
| defaults.jaegerCollectorPort | int | `4318` |  |
| defaults.jaegerTraceRatio | float | `1` |  |
| defaults.logLevel | string | `"debug"` |  |
| defaults.natsPort | int | `4222` |  |
| defaults.replicaCount | int | `3` |  |
| defaults.sendTelemetry | bool | `true` |  |
| domains.cacheKeyduration | string | `"10m"` |  |
| domains.grpcClientCaCerts | string | `"./ssl/certs/ca.crt"` |  |
| domains.grpcClientCert | string | `"./ssl/certs/domains-grpc-client.crt"` |  |
| domains.grpcPort | int | `7003` |  |
| domains.grpcTimeout | string | `"300s"` |  |
| domains.httpPort | int | `9003` |  |
| domains.image | object | `{}` |  |
| domains.redisTCPPort | int | `6379` |  |
| envoy.image.pullPolicy | string | `"IfNotPresent"` |  |
| envoy.image.repository | string | `"envoyproxy/envoy"` |  |
| envoy.image.tag | string | `"v1.31-latest"` |  |
| groups.grpcClientCaCerts | string | `"./ssl/certs/ca.crt"` |  |
| groups.grpcClientCert | string | `"./ssl/certs/groups-grpc-client.crt"` |  |
| groups.grpcClientKey | string | `"./ssl/certs/groups-grpc-client.key"` |  |
| groups.grpcPort | int | `7004` |  |
| groups.grpcServerCert | string | `"./ssl/certs/groups-grpc-server.crt"` |  |
| groups.grpcServerKey | string | `"./ssl/certs/groups-grpc-server.key"` |  |
| groups.grpcTimeout | string | `"300s"` |  |
| groups.httpPort | int | `9004` |  |
| groups.image | object | `{}` |  |
| ingress.annotations | object | `{}` |  |
| ingress.enabled | bool | `true` |  |
| ingress.labels | object | `{}` |  |
| invitations.enabled | bool | `true` |  |
| invitations.httpPort | int | `9020` |  |
| invitations.image | object | `{}` |  |
| jaeger.agent.enabled | bool | `false` |  |
| jaeger.allInOne.enabled | bool | `false` |  |
| jaeger.cassandra.persistence.accessModes[0] | string | `"ReadWriteOnce"` |  |
| jaeger.cassandra.persistence.enabled | bool | `true` |  |
| jaeger.cassandra.persistence.size | string | `"10Gi"` |  |
| jaeger.cassandra.persistence.storageClass | string | `"do-block-storage"` |  |
| jaeger.collector.service.otlp.grpc.name | string | `"otlp-grpc"` |  |
| jaeger.collector.service.otlp.grpc.port | int | `4317` |  |
| jaeger.collector.service.otlp.http.name | string | `"otlp-http"` |  |
| jaeger.collector.service.otlp.http.port | int | `4318` |  |
| jaeger.fullnameOverride | string | `"supermq-jaeger"` |  |
| jaeger.provisionDataStore.cassandra | bool | `true` |  |
| jaeger.storage.type | string | `"cassandra"` |  |
| journal.enabled | bool | `true` |  |
| journal.httpPort | int | `9021` |  |
| journal.image | object | `{}` |  |
| mqtt.adapter.forwarderTimeout | string | `"30s"` |  |
| mqtt.adapter.image.pullSecrets | object | `{}` |  |
| mqtt.adapter.logLevel | string | `"debug"` |  |
| mqtt.adapter.mqttPort | int | `1884` |  |
| mqtt.adapter.qos | string | `"2"` |  |
| mqtt.adapter.wsPort | int | `8081` |  |
| mqtt.broker.image.repository | string | `"supermq/vernemq"` |  |
| mqtt.broker.logLevel | string | `"info"` |  |
| mqtt.broker.mqttPort | int | `1883` |  |
| mqtt.broker.persistentVolume.size | string | `"5Gi"` |  |
| mqtt.broker.wsPort | int | `8080` |  |
| mqtt.enabled | bool | `true` |  |
| mqtt.redisCachePort | int | `6379` |  |
| mqtt.redisESPort | int | `6379` |  |
| mqtt.securityContext.fsGroup | int | `10000` |  |
| mqtt.securityContext.runAsGroup | int | `10000` |  |
| mqtt.securityContext.runAsUser | int | `10000` |  |
| nats.config.cluster.enabled | bool | `false` |  |
| nats.config.cluster.replicas | int | `3` |  |
| nats.config.jetstream.enabled | bool | `true` |  |
| nats.config.jetstream.fileStore.enabled | bool | `true` |  |
| nats.config.jetstream.fileStore.pvc.enabled | bool | `true` |  |
| nats.config.jetstream.memoryStore.enabled | bool | `true` |  |
| nats.config.jetstream.memoryStore.maxSize | string | `"2Gi"` |  |
| nginxInternal.image.pullPolicy | string | `"IfNotPresent"` |  |
| nginxInternal.image.repository | string | `"nginx"` |  |
| nginxInternal.image.tag | string | `"1.19.1-alpine"` |  |
| nginxInternal.mtls.intermediateCrt | string | `""` |  |
| nginxInternal.mtls.tls | string | `""` |  |
| postgresqlauth.database | string | `"auth"` |  |
| postgresqlauth.enabled | bool | `true` |  |
| postgresqlauth.global.postgresql.auth.database | string | `"auth"` |  |
| postgresqlauth.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlauth.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlauth.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlauth.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlauth.host | string | `"postgresql-auth"` |  |
| postgresqlauth.name | string | `"postgresql-auth"` |  |
| postgresqlauth.password | string | `"supermq"` |  |
| postgresqlauth.port | int | `5432` |  |
| postgresqlauth.username | string | `"supermq"` |  |
| postgresqlcerts.database | string | `"certs"` |  |
| postgresqlcerts.enabled | bool | `true` |  |
| postgresqlcerts.global.postgresql.auth.database | string | `"certs"` |  |
| postgresqlcerts.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlcerts.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlcerts.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlcerts.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlcerts.host | string | `"postgresql-certs"` |  |
| postgresqlcerts.name | string | `"postgresql-certs"` |  |
| postgresqlcerts.password | string | `"supermq"` |  |
| postgresqlcerts.port | int | `5432` |  |
| postgresqlcerts.username | string | `"supermq"` |  |
| postgresqlchannels.database | string | `"channels"` |  |
| postgresqlchannels.enabled | bool | `true` |  |
| postgresqlchannels.global.postgresql.auth.database | string | `"channels"` |  |
| postgresqlchannels.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlchannels.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlchannels.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlchannels.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlchannels.host | string | `"channels-db"` |  |
| postgresqlchannels.name | string | `"postgresql-channels"` |  |
| postgresqlchannels.password | string | `"supermq"` |  |
| postgresqlchannels.port | int | `5432` |  |
| postgresqlchannels.username | string | `"supermq"` |  |
| postgresqlclients.database | string | `"clients"` |  |
| postgresqlclients.enabled | bool | `true` |  |
| postgresqlclients.global.postgresql.auth.database | string | `"clients"` |  |
| postgresqlclients.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlclients.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlclients.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlclients.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlclients.host | string | `"postgresql-clients"` |  |
| postgresqlclients.name | string | `"postgresql-clients"` |  |
| postgresqlclients.password | string | `"supermq"` |  |
| postgresqlclients.port | int | `5432` |  |
| postgresqlclients.username | string | `"supermq"` |  |
| postgresqldomains.database | string | `"domains"` |  |
| postgresqldomains.enabled | bool | `true` |  |
| postgresqldomains.global.postgresql.auth.database | string | `"domains"` |  |
| postgresqldomains.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqldomains.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqldomains.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqldomains.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqldomains.host | string | `"postgresql-domains"` |  |
| postgresqldomains.name | string | `"postgresql-domains"` |  |
| postgresqldomains.password | string | `"supermq"` |  |
| postgresqldomains.port | int | `5432` |  |
| postgresqldomains.username | string | `"supermq"` |  |
| postgresqlgroups.database | string | `"groups"` |  |
| postgresqlgroups.enabled | bool | `true` |  |
| postgresqlgroups.global.postgresql.auth.database | string | `"groups"` |  |
| postgresqlgroups.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlgroups.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlgroups.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlgroups.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlgroups.host | string | `"postgresql-groups"` |  |
| postgresqlgroups.name | string | `"postgresql-groups"` |  |
| postgresqlgroups.password | string | `"supermq"` |  |
| postgresqlgroups.port | int | `5432` |  |
| postgresqlgroups.username | string | `"supermq"` |  |
| postgresqlinvitations.database | string | `"invitations"` |  |
| postgresqlinvitations.enabled | bool | `true` |  |
| postgresqlinvitations.global.postgresql.auth.database | string | `"invitations"` |  |
| postgresqlinvitations.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlinvitations.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlinvitations.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlinvitations.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlinvitations.host | string | `"postgresql-invitations"` |  |
| postgresqlinvitations.name | string | `"postgresql-invitations"` |  |
| postgresqlinvitations.password | string | `"supermq"` |  |
| postgresqlinvitations.port | int | `5432` |  |
| postgresqlinvitations.username | string | `"supermq"` |  |
| postgresqljournal.database | string | `"journal"` |  |
| postgresqljournal.enabled | bool | `true` |  |
| postgresqljournal.global.postgresql.auth.database | string | `"journal"` |  |
| postgresqljournal.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqljournal.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqljournal.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqljournal.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqljournal.host | string | `"postgresql-journal"` |  |
| postgresqljournal.name | string | `"postgresql-journal"` |  |
| postgresqljournal.password | string | `"supermq"` |  |
| postgresqljournal.port | int | `5432` |  |
| postgresqljournal.username | string | `"supermq"` |  |
| postgresqlspicedb.database | string | `"spicedb"` |  |
| postgresqlspicedb.enabled | bool | `true` |  |
| postgresqlspicedb.global.postgresql.auth.database | string | `"spicedb"` |  |
| postgresqlspicedb.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlspicedb.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlspicedb.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlspicedb.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlspicedb.host | string | `"postgresql-spicedb"` |  |
| postgresqlspicedb.name | string | `"postgresql-spicedb"` |  |
| postgresqlspicedb.password | string | `"supermq"` |  |
| postgresqlspicedb.port | int | `5432` |  |
| postgresqlspicedb.username | string | `"supermq"` |  |
| postgresqlui.database | string | `"ui"` |  |
| postgresqlui.enabled | bool | `true` |  |
| postgresqlui.global.postgresql.auth.database | string | `"ui"` |  |
| postgresqlui.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlui.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlui.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlui.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlui.host | string | `"postgresql-ui"` |  |
| postgresqlui.name | string | `"postgresql-ui"` |  |
| postgresqlui.password | string | `"supermq"` |  |
| postgresqlui.port | int | `5432` |  |
| postgresqlui.username | string | `"supermq"` |  |
| postgresqlusers.database | string | `"users"` |  |
| postgresqlusers.enabled | bool | `true` |  |
| postgresqlusers.global.postgresql.auth.database | string | `"users"` |  |
| postgresqlusers.global.postgresql.auth.password | string | `"supermq"` |  |
| postgresqlusers.global.postgresql.auth.postgresPassword | string | `"supermq"` |  |
| postgresqlusers.global.postgresql.auth.username | string | `"supermq"` |  |
| postgresqlusers.global.postgresql.service.ports.postgresql | int | `5432` |  |
| postgresqlusers.host | string | `"postgresql-users"` |  |
| postgresqlusers.name | string | `"postgresql-users"` |  |
| postgresqlusers.password | string | `"supermq"` |  |
| postgresqlusers.port | int | `5432` |  |
| postgresqlusers.username | string | `"supermq"` |  |
| redis-clients.cluster.enabled | bool | `false` |  |
| redis-clients.usePassword | bool | `false` |  |
| redis-clients.volumePermissions.enabled | bool | `true` |  |
| spicedb.affinity | object | `{}` |  |
| spicedb.datastore.engine | string | `"postgres"` |  |
| spicedb.dispatch.enabled | bool | `false` |  |
| spicedb.dispatch.port | int | `50053` |  |
| spicedb.grpc.port | int | `50051` |  |
| spicedb.grpc.presharedKey | string | `"12345678"` |  |
| spicedb.http.enabled | bool | `false` |  |
| spicedb.http.port | int | `8443` |  |
| spicedb.image.pullSecrets | object | `{}` |  |
| spicedb.image.repository | string | `"authzed/spicedb"` |  |
| spicedb.image.tag | string | `"latest"` |  |
| spicedb.metrics.enabled | bool | `true` |  |
| spicedb.metrics.port | int | `9090` |  |
| spicedb.nodeSelector | object | `{}` |  |
| spicedb.tolerations | object | `{}` |  |
| ui.blockKey | string | `"UtgZjr92jwRY6SPUndHXiyl9QY8qTUyZ"` |  |
| ui.contentType | string | `"application/senml+json"` |  |
| ui.enabled | bool | `true` |  |
| ui.googleClientID | string | `""` |  |
| ui.googleClientSecret | string | `""` |  |
| ui.googleRedirectHostname | string | `"https://stage-domain-name"` |  |
| ui.googleRedirectPath | string | `"/oauth/callback/google"` |  |
| ui.googleState | string | `"somerandomstring"` |  |
| ui.hashKey | string | `"5jx4x2Qg9OUmzpP5dbveWQ"` |  |
| ui.image | object | `{}` |  |
| ui.pathPrefix | string | `"/ui"` |  |
| ui.port | int | `9095` |  |
| users.accessTokenDuration | string | `"15m"` |  |
| users.admin.email | string | `"admin@example.com"` |  |
| users.admin.firstname | string | `"super"` |  |
| users.admin.lastname | string | `"admin"` |  |
| users.admin.password | string | `"12345678"` |  |
| users.admin.username | string | `"admin"` |  |
| users.allowSelfRegister | bool | `true` |  |
| users.deleteAfter | string | `"720h"` |  |
| users.deleteInterval | string | `"24h"` |  |
| users.grpcPort | int | `7001` |  |
| users.httpPort | int | `9002` |  |
| users.image | object | `{}` |  |
| users.passwordRegex | string | `"^.{8,}$"` |  |
| users.refreshTokenDuration | string | `"24h"` |  |
| users.secretKey | string | `"HyE2D4RUt9nnKG6v8zKEqAp6g6ka8hhZsqUpzgKvnwpXrNVQSH"` |  |
| users.tokenResetEndpoint | string | `"/reset-request"` |  |
| vault.enabled | bool | `false` |  |

================
File: charts/supermq/README.md.gotmpl
================
{{ template "chart.header" . }}

{{ template "chart.description" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

================
File: charts/supermq/values.yaml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

# The explanations for optional configuration parameters described in the adapter_coap section
# apply across other services where the same named configuration parameters are used.

defaults:
  logLevel: "debug"
  image:
    pullPolicy: "IfNotPresent"
    rootRepository: "supermq"
    tag: "latest"
    # pullSecrets: {}
  # Replicas of MQTT adapter, NATS, Things, Envoy and Auth
  replicaCount: 3
  natsPort: 4222
  jaegerCollectorPort: 4318
  jaegerTraceRatio: 1.0
  sendTelemetry: true
  eventStreamURL: "supermq-nats:4222"

adapter_coap:
  image:
    {}
    # pullSecrets: {}
    # If your image repository requires authentication, you can specify image pull secrets here.
    # Example:
    # pullSecrets:
    #   - my-registry-key

    # repository: "supermq"
    # The Docker repository where the adapter_coap image is stored.
    # Set this to your preferred image repository if you are using a custom image.

    # tag: "latest"
    # The specific tag of the adapter_coap image to use.
    # Change this to pin to a specific version or use "latest" for the most recent version.

    # pullPolicy: "IfNotPresent"
    # The image pull policy. This defines when Kubernetes should pull the Docker image.
    # Options are "Always", "IfNotPresent", or "Never". "IfNotPresent" is generally used to avoid unnecessary pulls.

  port: 5683
  # The primary port used by the CoAP adapter for communication.
  # Default: 5683 (standard CoAP UDP port).

  jaegerTraceRatio: 1.0
  # Defines the fraction of requests to trace using Jaeger. Distributed tracing monitors requests across services.
  # Value range:
  # - 1.0: Trace all requests (100% sampling)
  # - 0.5: Trace 50% of requests
  # - 0.0: Disable tracing (0% sampling)
  # Adjust this based on your observability needs and performance considerations.

  sendTelemetry: true
  # Enables or disables telemetry data reporting. Telemetry collects metrics and events for monitoring.
  # If true, the service will send telemetry data to the configured telemetry backend.
  # Set to false if telemetry reporting is not required or should be disabled for privacy concerns.

  # logLevel: "info"
  # The logging level for the adapter_coap service. Common options are "debug", "info", "warn", "error".
  # Adjust this based on the verbosity of logs you require.

  # nodeSelector: {}
  # Node selector for pod assignment. This can be used to restrict the pod to run on specific nodes.
  # Example:
  # nodeSelector:
  #   disktype: ssd

  # affinity: {}
  # Pod affinity and anti-affinity settings. Use this to specify rules about how pods should be placed relative to other pods.
  # Example:
  # affinity:
  #   podAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       - labelSelector:
  #           matchExpressions:
  #             - key: app
  #               operator: In
  #               values:
  #                 - my-app
  #         topologyKey: "kubernetes.io/hostname"

  # tolerations: {}
  # Tolerations for pod scheduling. Use this to allow pods to be scheduled on nodes with specific taints.
  # Example:
  # tolerations:
  #   - key: "key1"
  #     operator: "Equal"
  #     value: "value1"
  #     effect: "NoSchedule"

adapter_http:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/adapter-http"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  httpPort: 8008
  # logLevel: "debug"
  # The logging level for the adapter_http service. Common options are "debug", "info", "warn", "error".
  # Adjust this based on the verbosity of logs you require.

  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

adapter_ws:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/ws"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: "debug"
  httpPort: 8186
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

auth:
  image:
    {}
    # pullSecrets: {}
    # rootRepository: "supermq/auth"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: error
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  httpPort: 9001
  grpcPort: 7001
  grpcTimeout: "300s"
  secretKey: "HyE2D4RUt9nnKG6v8zKEqAp6g6ka8hhZsqUpzgKvnwpXrNVQSH"
  adminEmail: "admin@example.com"
  adminPassword: "12345678"
  accessTokenDuration: "1h"
  refreshTokenDuration: "24h"
  invitationDuration: "168h"
  grpcClientCert: "./ssl/certs/auth-grpc-client.crt"
  grpcClientKey: "./ssl/certs/auth-grpc-client.key"
  nodeSelector: {}
  affinity: {}
  tolerations: {}

postgresqlauth:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-auth
  host: postgresql-auth
  port: &postgresqlAuthPort 5432
  database: &postgresqlAuthDatabase auth
  username: &postgresqlAuthUsername supermq
  password: &postgresqlAuthPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlAuthPassword
        username: *postgresqlAuthUsername
        password: *postgresqlAuthPassword
        database: *postgresqlAuthDatabase
      service:
        ports:
          postgresql: *postgresqlAuthPort

certs:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/certs"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # logLevel: error
  # sendTelemetry: true
  httpPort: 9019
  logLevel: "debug"
  signCAPath: "/etc/ssl/certs/ca.crt"
  signCAKeyPath: "/etc/ssl/certs/ca.key"
  sdkHost: "http://supermq-am-certs"
  sdkCertsUrl: "${SMQ_CERTS_SDK_HOST}:9010"
  sdkTlsVerification: "false"
  vault:
    url: "http://supermq-vault:8200"
    approleRoleid: supermq
    approleSecret: supermq
    namespace: supermq
    thingsCertsPkiPath: pki_int
    thingsCertsPkiRoleName: supermq_things_certs

postgresqlcerts:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-certs
  host: postgresql-certs
  port: &postgresqlCertsPort 5432
  database: &postgresqlCertsDatabase certs
  username: &postgresqlCertsUsername supermq
  password: &postgresqlCertsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlCertsPassword
        username: *postgresqlCertsUsername
        password: *postgresqlCertsPassword
        database: *postgresqlCertsDatabase
      service:
        ports:
          postgresql: *postgresqlCertsPort

channels:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/channels"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # sendTelemetry: true
  # logLevel: error
  # jaegerTraceRatio: 1.0
  httpPort: 9005
  grpcPort: 7005
  grpcTimeout: "1s"
  grpcClientCert: "./ssl/certs/channels-grpc-client.crt"
  grpcClientKey: "./ssl/certs/channels-grpc-client.key"
  grpcServerCert: "./ssl/certs/channels-grpc-server.crt"
  grpcServerKey: "./ssl/certs/channels-grpc-server.key"
  grpcClientCaCerts: "./ssl/certs/ca.crt"

postgresqlchannels:
  enabled: true
  name: postgresql-channels
  host: channels-db
  port: &postgresqlChannelsPort 5432
  database: &postgresqlChannelsDatabase channels
  username: &postgresqlChannelsUsername supermq
  password: &postgresqlChannelsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlChannelsPassword
        username: *postgresqlChannelsUsername
        password: *postgresqlChannelsPassword
        database: *postgresqlChannelsDatabase
      service:
        ports:
          postgresql: *postgresqlChannelsPort

clients:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/clients"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: error
  # sendTelemetry: true
  # jaegerTraceRatio: 1.0
  httpPort: 9006
  authGrpcPort: 7006
  grpcTimeout: "1s"
  grpcClientCert: "./ssl/certs/clients-grpc-client.crt"
  grpcClientKey: "./ssl/certs/clients-grpc-client.key"
  authHttpPort: 9001
  redisESPort: 6379
  redisCachePort: 6379
  cacheKeyduration: "10m"
  # logLevel: "debug"
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlclients:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-clients
  host: postgresql-clients
  port: &postgresqlThingsPort 5432
  database: &postgresqlThingsDatabase clients
  username: &postgresqlThingsUsername supermq
  password: &postgresqlThingsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlThingsPassword
        username: *postgresqlThingsUsername
        password: *postgresqlThingsPassword
        database: *postgresqlThingsDatabase
      service:
        ports:
          postgresql: *postgresqlThingsPort

redis-clients:
  volumePermissions:
    enabled: true
  cluster:
    enabled: false
  usePassword: false

domains:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/domains"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # sendTelemetry: true
  httpPort: 9003
  grpcPort: 7003
  redisTCPPort: 6379
  cacheKeyduration: "10m"
  grpcTimeout: "300s"
  grpcClientCert: "./ssl/certs/domains-grpc-client.crt"
  grpcClientCaCerts: "./ssl/certs/ca.crt"

postgresqldomains:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-domains
  host: postgresql-domains
  port: &postgresqlDomainsPort 5432
  database: &postgresqlDomainsDatabase domains
  username: &postgresqlDomainsUsername supermq
  password: &postgresqlDomainsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlDomainsPassword
        username: *postgresqlDomainsUsername
        password: *postgresqlDomainsPassword
        database: *postgresqlDomainsDatabase
      service:
        ports:
          postgresql: *postgresqlDomainsPort

envoy:
  image:
    pullPolicy: "IfNotPresent"
    repository: "envoyproxy/envoy"
    tag: "v1.31-latest"

groups:
  image:
    {}
    # pullSecrets: {}
    # rootRepository: "supermq/groups"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: "debug"
  # sendTelemetry: true
  # jaegerTraceRatio: 1.0
  httpPort: 9004
  grpcPort: 7004
  grpcTimeout: "300s"
  grpcClientCert: "./ssl/certs/groups-grpc-client.crt"
  grpcClientKey: "./ssl/certs/groups-grpc-client.key"
  grpcClientCaCerts: "./ssl/certs/ca.crt"
  grpcServerCert: "./ssl/certs/groups-grpc-server.crt"
  grpcServerKey: "./ssl/certs/groups-grpc-server.key"

postgresqlgroups:
  enabled: true
  name: postgresql-groups
  host: postgresql-groups
  port: &postgresqlGroupsPort 5432
  database: &postgresqlGroupsDatabase groups
  username: &postgresqlGroupsUsername supermq
  password: &postgresqlGroupsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlGroupsPassword
        username: *postgresqlGroupsUsername
        password: *postgresqlGroupsPassword
        database: *postgresqlGroupsDatabase
      service:
        ports:
          postgresql: *postgresqlGroupsPort

ingress:
  enabled: true
  annotations: {}
  labels: {}
  # Uncomment this block for TLS support in public ingress
  # hostname: ""
  # tls:
  #   hostname: ""
  #   secret: "supermq-server"

invitations:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/invitations"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  # logLevel: "debug"
  httpPort: 9020
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlinvitations:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-invitations
  host: postgresql-invitations
  port: &postgresqlInvitationsPort 5432
  database: &postgresqlInvitationsDatabase invitations
  username: &postgresqlInvitationsUsername supermq
  password: &postgresqlInvitationsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlInvitationsPassword
        username: *postgresqlInvitationsUsername
        password: *postgresqlInvitationsPassword
        database: *postgresqlInvitationsDatabase
      service:
        ports:
          postgresql: *postgresqlInvitationsPort

jaeger:
  fullnameOverride: supermq-jaeger
  provisionDataStore:
    cassandra: true
  agent:
    enabled: false
  allInOne:
    enabled: false
  storage:
    type: cassandra
  cassandra:
    persistence:
      enabled: true
      storageClass: "do-block-storage"
      accessModes:
        - ReadWriteOnce
      size: 10Gi
  collector:
    service:
      otlp:
        grpc:
          name: otlp-grpc
          port: 4317
        http:
          name: otlp-http
          port: 4318

journal:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/journal"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  # logLevel: "debug"
  httpPort: 9021
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqljournal:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-journal
  host: postgresql-journal
  port: &postgresqlJournalPort 5432
  database: &postgresqlJournalDatabase journal
  username: &postgresqlJournalUsername supermq
  password: &postgresqlJournalPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlJournalPassword
        username: *postgresqlJournalUsername
        password: *postgresqlJournalPassword
        database: *postgresqlJournalDatabase
      service:
        ports:
          postgresql: *postgresqlJournalPort

loki:
  enabled: true
  serviceMonitor:
    enabled: true
  persistence:
    enabled: true
    size: 10Gi
  config:
    auth_enabled: false
    storage_config:
      boltdb_shipper:
        active_index_directory: /data/loki/index
        cache_location: /data/loki/cache
        shared_store: filesystem
      filesystem:
        directory: /data/loki/chunks
    schema_config:
      configs:
        - from: 2024-01-01
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    limits_config:
      retention_period: 168h

fluent_bit:
  enabled: true
  image: fluent/fluent-bit:latest
  resources:
    limits:
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi

prometheus:
  enabled: true
  serviceMonitor:
    enabled: true
  scrapeInterval: 30s

nats:
  config:
    cluster:
      enabled: false
      replicas: 3
    jetstream:
      enabled: true
      fileStore:
        enabled: true
        pvc:
          enabled: true
      memoryStore:
        enabled: true
        maxSize: 2Gi

nginxInternal:
  image:
    pullPolicy: "IfNotPresent"
    repository: "nginx"
    tag: "1.19.1-alpine"
  mtls:
    # By default mTLS is disabled. If you use mTLS, comment this block.
    tls: ""
    intermediateCrt: ""
    # Uncomment this block for TLS and mTLS support.
    # Use sh script from /secrets/secrets.sh to create config maps with your certs
    # tls: "supermq-server"
    # intermediateCrt: "ca"

mqtt:
  enabled: true
  securityContext:
    runAsUser: 10000
    runAsGroup: 10000
    fsGroup: 10000
  adapter:
    image:
      pullSecrets: {}
      # repository: "supermq/mqtt"
      # tag: "latest"
      # pullPolicy: "IfNotPresent"
    mqttPort: 1884
    wsPort: 8081
    logLevel: "debug"
    forwarderTimeout: "30s"
    qos: "2"
  broker:
    image:
      repository: "supermq/vernemq"
      # tag: "latest"
      # pullPolicy: "IfNotPresent"
    mqttPort: 1883
    wsPort: 8080
    logLevel: "debug"
    persistentVolume:
      size: 5Gi
  redisESPort: 6379
  redisCachePort: 6379

spicedb:
  # replicaCount: 1
  image:
    pullSecrets: {}
    repository: authzed/spicedb
    tag: latest
    # pullPolicy: "IfNotPresent"
  grpc:
    presharedKey: "12345678"
    port: 50051
  datastore:
    ## engine can be any one of the two options: postgres (default) , memory
    engine: postgres
  dispatch:
    port: 50053
    enabled: false
  http:
    enabled: false
    port: 8443
  metrics:
    enabled: true
    port: 9090
  nodeSelector: {}
  affinity: {}
  tolerations: {}

postgresqlspicedb:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-spicedb
  host: postgresql-spicedb
  port: &postgresqlSpicedbPort 5432
  database: &postgresqlSpicedbDatabase spicedb
  username: &postgresqlSpicedbUsername supermq
  password: &postgresqlSpicedbPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlSpicedbPassword
        username: *postgresqlSpicedbUsername
        password: *postgresqlSpicedbPassword
        database: *postgresqlSpicedbDatabase
      service:
        ports:
          postgresql: *postgresqlSpicedbPort

users:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/users"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  # logLevel: "debug"
  httpPort: 9002
  grpcPort: 7001
  admin:
    email: "admin@example.com"
    password: "12345678"
    username: "admin"
    firstname: "super"
    lastname: "admin"
  secretKey: "HyE2D4RUt9nnKG6v8zKEqAp6g6ka8hhZsqUpzgKvnwpXrNVQSH"
  accessTokenDuration: "15m"
  refreshTokenDuration: "24h"
  passwordRegex: "^.{8,}$"
  tokenResetEndpoint: "/reset-request"
  allowSelfRegister: true
  deleteInterval: "24h"
  deleteAfter: "720h"
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlusers:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-users
  host: postgresql-users
  port: &postgresqlUsersPort 5432
  database: &postgresqlUsersDatabase users
  username: &postgresqlUsersUsername supermq
  password: &postgresqlUsersPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlUsersPassword
        username: *postgresqlUsersUsername
        password: *postgresqlUsersPassword
        database: *postgresqlUsersDatabase
      service:
        ports:
          postgresql: *postgresqlUsersPort

ui:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/ui"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
    # logLevel: "debug"
  # hostname: ""
  # contentTypes: "application/senml+json"
  port: 9095
  pathPrefix: "/ui"
  # hostUrl: "https://domain-name"
  # httpAdapterUrl: "http://supermq-adapter-http:8008"
  # usersUrl: "http://supermq-users:9002"
  # authUrl: "http://supermq-auth:8189"
  # clientsUrl: "http://supermq-clients:9000"
  # invitationsUrl: "http:///supermq-auth:9020"
  # journalUrl: "http:///supermq-auth:9021"
  # domainsUrl: "http://supermq-auth:8189"
  googleClientID: ""
  googleClientSecret: ""
  googleRedirectHostname: "https://stage-domain-name"
  googleRedirectPath: "/oauth/callback/google"
  googleState: "somerandomstring"
  contentType: "application/senml+json"
  hashKey: "5jx4x2Qg9OUmzpP5dbveWQ"
  blockKey: "UtgZjr92jwRY6SPUndHXiyl9QY8qTUyZ"

postgresqlui:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-ui
  host: postgresql-ui
  port: &postgresqlUIPort 5432
  database: &postgresqlUIDatabase ui
  username: &postgresqlUIUsername supermq
  password: &postgresqlUIPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlUIPassword
        username: *postgresqlUIUsername
        password: *postgresqlUIPassword
        database: *postgresqlUIDatabase
      service:
        ports:
          postgresql: *postgresqlUIPort

vault:
  enabled: false

================
File: scripts/vault/.gitignore
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

data
magistrala_things_certs_issue.hcl
.env

================
File: scripts/vault/config.hcl
================
storage "file" {
  path = "/vault/file"
}

listener "tcp" {
  address     = "0.0.0.0:8200"
  tls_disable = 1
}

ui = true

================
File: scripts/vault/docker-compose.yml
================
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

# This docker-compose file contains optional Vault service for Magistrala platform.
# Since this is optional, this file is dependent of docker-compose file
# from <project_root>/docker. In order to run these services, execute command:
# docker compose -f docker/docker-compose.yml -f docker/addons/vault/docker-compose.yml up
# from project root. Vault default port (8200) is exposed, so you can use Vault CLI tool for
# vault inspection and administration, as well as access the UI.

networks:
  magistrala-base-net:

volumes:
  magistrala-vault-volume:

services:
  vault:
    image: hashicorp/vault:1.15.4
    container_name: magistrala-vault
    ports:
      - ${MG_VAULT_PORT}:8200
    networks:
      - magistrala-base-net
    volumes:
      - magistrala-vault-volume:/vault/file
      - magistrala-vault-volume:/vault/logs
      - ./config.hcl:/vault/config/config.hcl
      - ./entrypoint.sh:/entrypoint.sh
    environment:
      VAULT_ADDR: http://127.0.0.1:${MG_VAULT_PORT}
      MG_VAULT_PORT: ${MG_VAULT_PORT}
      MG_VAULT_UNSEAL_KEY_1: ${MG_VAULT_UNSEAL_KEY_1}
      MG_VAULT_UNSEAL_KEY_2: ${MG_VAULT_UNSEAL_KEY_2}
      MG_VAULT_UNSEAL_KEY_3: ${MG_VAULT_UNSEAL_KEY_3}
    entrypoint: /bin/sh
    command: /entrypoint.sh
    cap_add:
      - IPC_LOCK

================
File: scripts/vault/entrypoint.sh
================
#!/usr/bin/dumb-init /bin/sh
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

VAULT_CONFIG_DIR=/vault/config

docker-entrypoint.sh server &
VAULT_PID=$!

sleep 2

echo $MG_VAULT_UNSEAL_KEY_1
echo $MG_VAULT_UNSEAL_KEY_2
echo $MG_VAULT_UNSEAL_KEY_3

if [[ ! -z "${MG_VAULT_UNSEAL_KEY_1}" ]] &&
   [[ ! -z "${MG_VAULT_UNSEAL_KEY_2}" ]] &&
   [[ ! -z "${MG_VAULT_UNSEAL_KEY_3}" ]]; then
	echo "Unsealing Vault"
	vault operator unseal ${MG_VAULT_UNSEAL_KEY_1}
	vault operator unseal ${MG_VAULT_UNSEAL_KEY_2}
	vault operator unseal ${MG_VAULT_UNSEAL_KEY_3}
fi

wait $VAULT_PID

================
File: scripts/vault/README.md
================
# Vault

This is Vault service deployment to be used with Magistrala.

When the Vault service is started, some initialization steps need to be done to set things up.

## Configuration

| Variable                                | Description                                                                   | Default                               |
| :-------------------------------------- | ----------------------------------------------------------------------------- | ------------------------------------- |
| MG_VAULT_ADDR                           | Vault Address                                                                 | http://vault:8200                     |
| MG_VAULT_UNSEAL_KEY_1                   | Vault unseal key                                                              | ""                                    |
| MG_VAULT_UNSEAL_KEY_2                   | Vault unseal key                                                              | ""                                    |
| MG_VAULT_UNSEAL_KEY_3                   | Vault unseal key                                                              | ""                                    |
| MG_VAULT_TOKEN                          | Vault cli access token                                                        | ""                                    |
| MG_VAULT_PKI_PATH                       | Vault secrets engine path for Root CA                                         | pki                                   |
| MG_VAULT_PKI_ROLE_NAME                  | Vault Root CA role name to issue intermediate CA                              | magistrala_int_ca                     |
| MG_VAULT_PKI_FILE_NAME                  | Root CA Certificates name used by`vault_set_pki.sh`                           | mg_root                               |
| MG_VAULT_PKI_CA_CN                      | Common name used for Root CA creation by`vault_set_pki.sh`                    | Magistrala Root Certificate Authority |
| MG_VAULT_PKI_CA_OU                      | Organization unit used for Root CA creation by`vault_set_pki.sh`              | Magistrala                            |
| MG_VAULT_PKI_CA_O                       | Organization used for Root CA creation by`vault_set_pki.sh`                   | Magistrala                            |
| MG_VAULT_PKI_CA_C                       | Country used for Root CA creation by`vault_set_pki.sh`                        | FRANCE                                |
| MG_VAULT_PKI_CA_L                       | Location used for Root CA creation by`vault_set_pki.sh`                       | PARIS                                 |
| MG_VAULT_PKI_CA_ST                      | State or Provisions used for Root CA creation by`vault_set_pki.sh`            | PARIS                                 |
| MG_VAULT_PKI_CA_ADDR                    | Address used for Root CA creation by`vault_set_pki.sh`                        | 5 Av. Anatole                         |
| MG_VAULT_PKI_CA_PO                      | Postal code used for Root CA creation by`vault_set_pki.sh`                    | 75007                                 |
| MG_VAULT_PKI_CLUSTER_PATH               | Vault Root CA Cluster Path                                                    | http://localhost                      |
| MG_VAULT_PKI_CLUSTER_AIA_PATH           | Vault Root CA Cluster AIA Path                                                | http://localhost                      |
| MG_VAULT_PKI_INT_PATH                   | Vault secrets engine path for Intermediate CA                                 | pki_int                               |
| MG_VAULT_PKI_INT_SERVER_CERTS_ROLE_NAME | Vault Intermediate CA role name to issue server certificate                   | magistrala_server_certs               |
| MG_VAULT_PKI_INT_THINGS_CERTS_ROLE_NAME | Vault Intermediate CA role name to issue Things certificates                  | magistrala_things_certs               |
| MG_VAULT_PKI_INT_FILE_NAME              | Intermediate CA Certificates name used by`vault_set_pki.sh`                   | mg_root                               |
| MG_VAULT_PKI_INT_CA_CN                  | Common name used for Intermediate CA creation by`vault_set_pki.sh`            | Magistrala Root Certificate Authority |
| MG_VAULT_PKI_INT_CA_OU                  | Organization unit used for Root CA creation by`vault_set_pki.sh`              | Magistrala                            |
| MG_VAULT_PKI_INT_CA_O                   | Organization used for Intermediate CA creation by`vault_set_pki.sh`           | Magistrala                            |
| MG_VAULT_PKI_INT_CA_C                   | Country used for Intermediate CA creation by`vault_set_pki.sh`                | FRANCE                                |
| MG_VAULT_PKI_INT_CA_L                   | Location used for Intermediate CA creation by`vault_set_pki.sh`               | PARIS                                 |
| MG_VAULT_PKI_INT_CA_ST                  | State or Provisions used for Intermediate CA creation by`vault_set_pki.sh`    | PARIS                                 |
| MG_VAULT_PKI_INT_CA_ADDR                | Address used for Intermediate CA creation by`vault_set_pki.sh`                | 5 Av. Anatole                         |
| MG_VAULT_PKI_INT_CA_PO                  | Postal code used for Intermediate CA creation by`vault_set_pki.sh`            | 75007                                 |
| MG_VAULT_PKI_INT_CLUSTER_PATH           | Vault Intermediate CA Cluster Path                                            | http://localhost                      |
| MG_VAULT_PKI_INT_CLUSTER_AIA_PATH       | Vault Intermediate CA Cluster AIA Path                                        | http://localhost                      |
| MG_VAULT_THINGS_CERTS_ISSUER_ROLEID     | Vault Intermediate CA Things Certificate issuer AppRole authentication RoleID | magistrala                            |
| MG_VAULT_THINGS_CERTS_ISSUER_SECRET     | Vault Intermediate CA Things Certificate issuer AppRole authentication Secret | magistrala                            |

## Setup

The following scripts are provided, which work on the running Vault service in Docker.

### 1. `vault_init.sh`

Calls `vault operator init` to perform the initial vault initialization and generates a `docker/addons/vault/data/secrets` file which contains the Vault unseal keys and root tokens.

Example contents for `data/secrets`:

```bash
Unseal Key 1: Ay0YZecYJ2HVtNtXfPootXK5LtF+JZoDmBb7IbbYdLBI
Unseal Key 2: P6hb7x2cglv0p61jdLyNE3+d44cJUOFaDt9jHFDfr8Df
Unseal Key 3: zSBfDHzUiWoOzXKY1pnnBqKO8UD2MDLuy8DNTxNtEBFy
Unseal Key 4: 5oJuDDuMI0I8snaw/n4VLNpvndvvKi6JlkgOxuWXqMSz
Unseal Key 5: ZhsUkk2tXBYEcWgz4WUCHH9rocoW6qZoiARWlkE5Epi5

Initial Root Token: s.V2hdd00P4bHtUQnoWZK2hSaS

Vault initialized with 5 key shares and a key threshold of 3. Please securely
distribute the key shares printed above. When the Vault is re-sealed,
restarted, or stopped, you must supply at least 3 of these keys to unseal it
before it can start servicing requests.

Vault does not store the generated master key. Without at least 3 key to
reconstruct the master key, Vault will remain permanently sealed!

It is possible to generate new unseal keys, provided you have a quorum of
existing unseal keys shares. See "vault operator rekey" for more information.
bash-4.4

Use 3 out of five keys presented and put it into .env file and than start the composition again Vault should be in unsealed state ( take a note that this is not recommended in terms of security, this is deployment for development) A real production deployment can use Vault auto unseal mode where vault gets unseal keys from some 3rd party KMS ( on AWS for example)
```

### 2. `vault_copy_env.sh`

After first step, the corresponding Vault environment variables (`MG_VAULT_TOKEN`, `MG_VAULT_UNSEAL_KEY_1`, `MG_VAULT_UNSEAL_KEY_2`, `MG_VAULT_UNSEAL_KEY_3`) should be updated in `.env` file.

`vault_copy_env.sh` scripts copies values from `docker/addons/vault/data/secrets` file and update environmental variables `MG_VAULT_TOKEN`, `MG_VAULT_UNSEAL_KEY_1`, `MG_VAULT_UNSEAL_KEY_2`, `MG_VAULT_UNSEAL_KEY_3` present in `.env` file.

### 3. `vault_unseal.sh`

This can be run after the initialization to unseal Vault, which is necessary for it to be used to store and/or get secrets.

This can be used if you don't want to restart the service.

The unseal environment variables need to be set in `.env` for the script to work (`MG_VAULT_TOKEN`,`MG_VAULT_UNSEAL_KEY_1`, `MG_VAULT_UNSEAL_KEY_2`, `MG_VAULT_UNSEAL_KEY_3`).

This script should not be necessary to run after the initial setup, since the Vault service unseals itself when starting the container.

### 4. `vault_set_pki.sh`

This script is used to generate the root certificate, intermediate certificate and HTTPS server certificate.  
All generate certificates, keys and CSR by `vault_set_pki.sh` will be present at `docker/addons/vault/data`.  

The parameters required for generating certificate are obtained from the environment variables which are loaded from `docker/.env`.  

Environmental variables starting with `MG_VAULT_PKI` in `docker/.env` file are used by `vault_set_pki.sh` to generate root CA.  
Environmental variables starting with`MG_VAULT_PKI_INT` in `docker/.env` file are used by `vault_set_pki.sh` to generate intermediate CA.  

Passing command line args `--skip-server-cert` to `vault_set_pki.sh` will skip server certificate role & process of generation of server certificate & key.

### 5. `vault_create_approle.sh`  

This script is used to enable app role authorization in Vault. Certs service used the approle credentials to issue, revoke things certificate from vault intermedate CA.  

`vault_create_approle.sh` script by default tries to enable auth approle.  
If approle is already enabled in vault, then use args `--skip-enable-approle` to skip enable auth approle step.  
To skip enable auth approle step use the following  `vault_create_approle.sh   --skip-enable-approle`

### 6. `vault_copy_certs.sh`

This scripts copies the necessary certificates and keys from `docker/addons/vault/data` to the `docker/ssl/certs` folder.

## Hashicorp Cloud Platform (HCP) Vault

To have the same PKI setup can done in Hashicorp Cloud Platform (HCP) Vault follow the below steps:
Requirement: [VAULT CLI](https://developer.hashicorp.com/vault/tutorials/getting-started/getting-started-install)

- Replace the environmental variable `MG_VAULT_ADDR` in `docker/.env` with HCP Vault address.
- Replace the environmental variable `MG_VAULT_TOKEN` in `docker/.env` with HCP Vault Admin token.
- Run script `vault_set_pki.sh` and   `vault_create_approle.sh`.
- Optional step, run script `vault_copy_certs.sh` to copy certificates to magistrala default path.

## Vault CLI

It can also be useful to run the Vault CLI for inspection and administration work.

```bash
Usage: vault <command> [args]

Common commands:
    read        Read data and retrieves secrets
    write       Write data, configuration, and secrets
    delete      Delete secrets and configuration
    list        List data or secrets
    login       Authenticate locally
    agent       Start a Vault agent
    server      Start a Vault server
    status      Print seal and HA status
    unwrap      Unwrap a wrapped secret

Other commands:
    audit          Interact with audit devices
    auth           Interact with auth methods
    debug          Runs the debug command
    kv             Interact with Vault's Key-Value storage
    lease          Interact with leases
    monitor        Stream log messages from a Vault server
    namespace      Interact with namespaces
    operator       Perform operator-specific tasks
    path-help      Retrieve API help for paths
    plugin         Interact with Vault plugins and catalog
    policy         Interact with policies
    print          Prints runtime configurations
    secrets        Interact with secrets engines
    ssh            Initiate an SSH session
    token          Interact with tokens
```

If the Vault is setup through `docker/addons/vault`, then Vault CLI can be run directly using the Vault image in Docker: `docker run -it magistrala/vault:latest vault`

## Vault Web UI

If the Vault is setup through `docker/addons/vault`, Then Vault Web UI is accessible by default on `http://localhost:8200/ui`.

================
File: scripts/vault/supermq_clients_certs_issue.template.hcl
================
# Allow issue certificate with role with default issuer from Intermediate PKI
path "${MG_VAULT_PKI_INT_PATH}/issue/${MG_VAULT_PKI_INT_THINGS_CERTS_ROLE_NAME}" {
   capabilities = ["create",  "update"]
}

## Revole certificate from Intermediate PKI
path "${MG_VAULT_PKI_INT_PATH}/revoke" {
  capabilities = ["create",  "update"]
}

## List Revoked Certificates from Intermediate PKI
path "${MG_VAULT_PKI_INT_PATH}/certs/revoked" {
  capabilities = ["list"]
}


## List Certificates from Intermediate PKI
path "${MG_VAULT_PKI_INT_PATH}/certs" {
  capabilities = ["list"]
}

## Read Certificate from Intermediate PKI
path "${MG_VAULT_PKI_INT_PATH}/cert/+" {
  capabilities = ["read"]
}
path "${MG_VAULT_PKI_INT_PATH}/cert/+/raw" {
  capabilities = ["read"]
}
path "${MG_VAULT_PKI_INT_PATH}/cert/+/raw/pem" {
  capabilities = ["read"]
}

================
File: scripts/vault/vault_cmd.sh
================
#!/usr/bin/bash
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

vault() {
    kubectl exec magistrala-vault-0 -n mg -- vault "$@"
}

================
File: scripts/vault/vault_create_approle.sh
================
#!/usr/bin/bash
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

set -euo pipefail

scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

cd $scriptdir
echo "Script directory set to: $scriptdir"

SKIP_ENABLE_APP_ROLE=${1:-}

readDotEnv() {
    set -o allexport
    echo "Sourcing environment variables from .env file..."
    source $scriptdir/.env
    set +o allexport
}

# Check if a service is running in the Kubernetes cluster
is_service_running() {
    local service_name="$1"
    local namespace="${2:-default}"  # Default namespace is 'default' if not specified

    echo "Checking if service $service_name is running in namespace $namespace..."
    if kubectl get svc -n "$namespace" | grep -q "^$service_name"; then
        echo "Service $service_name is running."
        return 0
    else
        echo "Service $service_name is not running or not found in the namespace $namespace."
        return 1
    fi
}

source vault_cmd.sh

vaultCreatePolicyFile() {
    echo "Creating policy file from template..."
    envsubst '
    ${MG_VAULT_PKI_INT_PATH}
    ${MG_VAULT_PKI_INT_THINGS_CERTS_ROLE_NAME}
    ' < magistrala_things_certs_issue.template.hcl > magistrala_things_certs_issue.hcl

    if [ -f magistrala_things_certs_issue.hcl ]; then
        echo "Policy file magistrala_things_certs_issue.hcl created successfully."
    else
        echo "Failed to create policy file magistrala_things_certs_issue.hcl."
        exit 1
    fi
}

vaultCreatePolicy() {
    echo "Creating new policy for AppRole"
    if is_service_running "magistrala-vault" "mg"; then
        echo "Proceeding with policy creation..."
        
        echo "Copying policy file to the pod..."
        kubectl cp magistrala_things_certs_issue.hcl mg/magistrala-vault-0:/tmp/magistrala_things_certs_issue.hcl
        
        echo "Policy file copied to pod. Now attempting to create policy in Vault..."
        
        # Run the policy creation inside the pod
        kubectl exec magistrala-vault-0 -n mg -- vault policy write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} magistrala_things_certs_issue /tmp/magistrala_things_certs_issue.hcl
        
    else
        echo "Service magistrala-vault is not running or not found in the mg namespace."
        exit 1
    fi
}

vaultEnableAppRole() {
   if [ "$SKIP_ENABLE_APP_ROLE" == "--skip-enable-approle" ]; then
        echo "Skipping Enable AppRole"
    else
        echo "Enabling AppRole"
        vault auth enable -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} approle
    fi
}

vaultDeleteRole() {
    echo "Deleting old AppRole"
    vault delete -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} auth/approle/role/magistrala_things_certs_issuer
}

vaultCreateRole() {
    echo "Creating new AppRole"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} auth/approle/role/magistrala_things_certs_issuer \
    token_policies=magistrala_things_certs_issue  secret_id_num_uses=0 \
    secret_id_ttl=0 token_ttl=1h token_max_ttl=3h  token_num_uses=0
}

vaultWriteCustomRoleID(){
    echo "Writing custom role id"
    vault read -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} auth/approle/role/magistrala_things_certs_issuer/role-id
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} auth/approle/role/magistrala_things_certs_issuer/role-id role_id=${MG_VAULT_THINGS_CERTS_ISSUER_ROLEID}
}

vaultWriteCustomSecret() {
    echo "Writing custom secret"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} -f auth/approle/role/magistrala_things_certs_issuer/secret-id
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} auth/approle/role/magistrala_things_certs_issuer/custom-secret-id secret_id=${MG_VAULT_THINGS_CERTS_ISSUER_SECRET} num_uses=0 ttl=0
}

vaultTestRoleLogin() {
    echo "Testing custom roleid secret by logging in"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} auth/approle/login \
        role_id=${MG_VAULT_THINGS_CERTS_ISSUER_ROLEID} \
        secret_id=${MG_VAULT_THINGS_CERTS_ISSUER_SECRET}

}
if ! command -v jq &> /dev/null
then
    echo "jq command could not be found, please install it and try again."
    exit 1
fi

echo "Reading environment variables..."
readDotEnv

echo "Logging into Vault..."
vault login -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_TOKEN}

echo "Creating policy file..."
vaultCreatePolicyFile

echo "Creating policy in Vault..."
vaultCreatePolicy

vaultEnableAppRole
vaultDeleteRole
vaultCreateRole
vaultWriteCustomRoleID
vaultWriteCustomSecret
vaultTestRoleLogin

exit 0

================
File: scripts/vault/vault_init.sh
================
#!/usr/bin/bash
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

cd $scriptdir

readDotEnv() {
    set -o allexport
    source $scriptdir/.env
    set +o allexport
}


write_env() {
    if [ -e "data/secrets" ]; then
        sed -i "s,MG_VAULT_UNSEAL_KEY_1=.*,MG_VAULT_UNSEAL_KEY_1=$(awk -F ": " '$1 == "Unseal Key 1" {print $2}' data/secrets)," .env
        sed -i "s,MG_VAULT_UNSEAL_KEY_2=.*,MG_VAULT_UNSEAL_KEY_2=$(awk -F ": " '$1 == "Unseal Key 2" {print $2}' data/secrets)," .env
        sed -i "s,MG_VAULT_UNSEAL_KEY_3=.*,MG_VAULT_UNSEAL_KEY_3=$(awk -F ": " '$1 == "Unseal Key 3" {print $2}' data/secrets)," .env
        sed -i "s,MG_VAULT_TOKEN=.*,MG_VAULT_TOKEN=$(awk -F ": " '$1 == "Initial Root Token" {print $2}' data/secrets)," .env
        echo "Vault environment varaibles are set successfully in docker/.env"
    else
        echo "Error: Source file 'data/secrets' not found."
    fi
}



source vault_cmd.sh

readDotEnv
mkdir -p data

# Check Vault initialization status
vault operator init -status -address=$MG_VAULT_ADDR
INIT_STATUS=$?
set -euo pipefail

# Check if Vault is not initialized (exit status 2)
if [ $INIT_STATUS -eq 2 ]; then
  echo "Vault is not initialized. Initializing now..."

  # Initialize Vault and store secrets
  vault operator init -address=$MG_VAULT_ADDR 2>&1 | tee >(sed -r 's/\x1b\[[0-9;]*m//g' > data/secrets)

  echo "Vault initialization complete. Secrets stored in data/secrets."
elif [ $INIT_STATUS -eq 0 ]; then
  echo "Vault is already initialized."
else
  echo "An error occurred while checking Vault initialization status. Exit status: $INIT_STATUS"
fi

readDotEnv
write_env

readDotEnv
vault operator unseal -address=${MG_VAULT_ADDR} ${MG_VAULT_UNSEAL_KEY_1}
vault operator unseal -address=${MG_VAULT_ADDR} ${MG_VAULT_UNSEAL_KEY_2}
vault operator unseal -address=${MG_VAULT_ADDR} ${MG_VAULT_UNSEAL_KEY_3}


./vault_set_pki.sh
./vault_create_approle.sh

================
File: scripts/vault/vault_set_pki.sh
================
#!/usr/bin/bash
# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

set -euo pipefail

scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

cd $scriptdir

SKIP_SERVER_CERT=${1:-}


readDotEnv() {
    set -o allexport
    source $scriptdir/.env
    set +o allexport
}

server_name="localhost"

# Check if MG_NGINX_SERVER_NAME is set or not empty
if [ -n "${MG_NGINX_SERVER_NAME:-}" ]; then
    server_name="$MG_NGINX_SERVER_NAME"
fi

source vault_cmd.sh

vaultEnablePKI() {
    vault secrets enable -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR}  -path ${MG_VAULT_PKI_PATH} pki
    vault secrets tune -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR}  -max-lease-ttl=87600h ${MG_VAULT_PKI_PATH}
}

vaultConfigPKIClusterPath() {
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_PATH}/config/cluster aia_path=${MG_VAULT_PKI_CLUSTER_AIA_PATH} path=${MG_VAULT_PKI_CLUSTER_PATH}
}

vaultConfigPKICrl() {
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_PATH}/config/crl expiry="5m"  ocsp_disable=false ocsp_expiry=0 auto_rebuild=true auto_rebuild_grace_period="2m" enable_delta=true delta_rebuild_interval="1m"
}

vaultAddRoleToSecret() {
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_PATH}/roles/${MG_VAULT_PKI_ROLE_NAME} \
        allow_any_name=true \
        max_ttl="8760h" \
        default_ttl="8760h" \
        generate_lease=true
}

vaultGenerateRootCACertificate() {
    echo "Generate root CA certificate"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} -format=json ${MG_VAULT_PKI_PATH}/root/generate/exported \
        common_name="\"$MG_VAULT_PKI_CA_CN\"" \
        ou="\"$MG_VAULT_PKI_CA_OU\"" \
        organization="\"$MG_VAULT_PKI_CA_O\"" \
        country="\"$MG_VAULT_PKI_CA_C\"" \
        locality="\"$MG_VAULT_PKI_CA_L\"" \
        province="\"$MG_VAULT_PKI_CA_ST\"" \
        street_address="\"$MG_VAULT_PKI_CA_ADDR\"" \
        postal_code="\"$MG_VAULT_PKI_CA_PO\"" \
        ttl=87600h | tee >(jq -r .data.certificate >data/${MG_VAULT_PKI_FILE_NAME}_ca.crt) \
                         >(jq -r .data.issuing_ca  >data/${MG_VAULT_PKI_FILE_NAME}_issuing_ca.crt) \
                         >(jq -r .data.private_key >data/${MG_VAULT_PKI_FILE_NAME}_ca.key)
}

vaultSetupRootCAIssuingURLs() {
    echo "Setup URLs for CRL and issuing"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_PATH}/config/urls \
        issuing_certificates="{{cluster_aia_path}}/v1/${MG_VAULT_PKI_PATH}/ca" \
        crl_distribution_points="{{cluster_aia_path}}/v1/${MG_VAULT_PKI_PATH}/crl" \
        ocsp_servers="{{cluster_aia_path}}/v1/${MG_VAULT_PKI_PATH}/ocsp" \
        enable_templating=true
}

vaultGenerateIntermediateCAPKI() {
    echo "Generate Intermediate CA PKI"
    vault secrets enable -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR}  -path=${MG_VAULT_PKI_INT_PATH} pki
    vault secrets tune -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR}  -max-lease-ttl=43800h ${MG_VAULT_PKI_INT_PATH}
}

vaultConfigIntermediatePKIClusterPath() {
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_INT_PATH}/config/cluster aia_path=${MG_VAULT_PKI_INT_CLUSTER_AIA_PATH} path=${MG_VAULT_PKI_INT_CLUSTER_PATH}
}

vaultConfigIntermediatePKICrl() {
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_INT_PATH}/config/crl expiry="5m"  ocsp_disable=false ocsp_expiry=0 auto_rebuild=true auto_rebuild_grace_period="2m" enable_delta=true delta_rebuild_interval="1m"
}

vaultGenerateIntermediateCSR() {
    echo "Generate intermediate CSR"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} -format=json  ${MG_VAULT_PKI_INT_PATH}/intermediate/generate/exported \
        common_name="\"$MG_VAULT_PKI_INT_CA_CN\"" \
        ou="\"$MG_VAULT_PKI_INT_CA_OU\""\
        organization="\"$MG_VAULT_PKI_INT_CA_O\"" \
        country="\"$MG_VAULT_PKI_INT_CA_C\"" \
        locality="\"$MG_VAULT_PKI_INT_CA_L\"" \
        province="\"$MG_VAULT_PKI_INT_CA_ST\"" \
        street_address="\"$MG_VAULT_PKI_INT_CA_ADDR\"" \
        postal_code="\"$MG_VAULT_PKI_INT_CA_PO\"" \
        | tee >(jq -r .data.csr         >data/${MG_VAULT_PKI_INT_FILE_NAME}.csr) \
              >(jq -r .data.private_key >data/${MG_VAULT_PKI_INT_FILE_NAME}.key)
}

vaultSignIntermediateCSR() {
    echo "Sign intermediate CSR"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} -format=json  ${MG_VAULT_PKI_PATH}/root/sign-intermediate \
        csr=@data/${MG_VAULT_PKI_INT_FILE_NAME}.csr  ttl="8760h" \
        ou="\"$MG_VAULT_PKI_INT_CA_OU\""\
        organization="\"$MG_VAULT_PKI_INT_CA_O\"" \
        country="\"$MG_VAULT_PKI_INT_CA_C\"" \
        locality="\"$MG_VAULT_PKI_INT_CA_L\"" \
        province="\"$MG_VAULT_PKI_INT_CA_ST\"" \
        street_address="\"$MG_VAULT_PKI_INT_CA_ADDR\"" \
        postal_code="\"$MG_VAULT_PKI_INT_CA_PO\"" \
        | tee >(jq -r .data.certificate >data/${MG_VAULT_PKI_INT_FILE_NAME}.crt) \
            >(jq -r .data.issuing_ca >data/${MG_VAULT_PKI_INT_FILE_NAME}_issuing_ca.crt)
}

vaultInjectIntermediateCertificate() {
    echo "Inject Intermediate Certificate"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_INT_PATH}/intermediate/set-signed certificate=@data/${MG_VAULT_PKI_INT_FILE_NAME}.crt
}

vaultGenerateIntermediateCertificateBundle() {
    echo "Generate intermediate certificate bundle"
    cat data/${MG_VAULT_PKI_INT_FILE_NAME}.crt data/${MG_VAULT_PKI_FILE_NAME}_ca.crt \
       > data/${MG_VAULT_PKI_INT_FILE_NAME}_bundle.crt
}

vaultSetupIntermediateIssuingURLs() {
    echo "Setup URLs for CRL and issuing"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_INT_PATH}/config/urls \
        issuing_certificates="{{cluster_aia_path}}/v1/${MG_VAULT_PKI_INT_PATH}/ca" \
        crl_distribution_points="{{cluster_aia_path}}/v1/${MG_VAULT_PKI_INT_PATH}/crl" \
        ocsp_servers="{{cluster_aia_path}}/v1/${MG_VAULT_PKI_INT_PATH}/ocsp" \
        enable_templating=true
}

vaultSetupServerCertsRole() {
    if [ "$SKIP_SERVER_CERT" == "--skip-server-cert" ]; then
        echo "Skipping server certificate role"
    else
        echo "Setup Server certificate role"
        vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_INT_PATH}/roles/${MG_VAULT_PKI_INT_SERVER_CERTS_ROLE_NAME} \
            allow_subdomains=true \
            max_ttl="4320h"
    fi
}

vaultGenerateServerCertificate() {
    if [ "$SKIP_SERVER_CERT" == "--skip-server-cert" ]; then
        echo "Skipping generate server certificate"
    else
        echo "Generate server certificate"
        vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} -format=json ${MG_VAULT_PKI_INT_PATH}/issue/${MG_VAULT_PKI_INT_SERVER_CERTS_ROLE_NAME} \
            common_name="$server_name" ttl="4320h" \
            | tee >(jq -r .data.certificate >data/${server_name}.crt) \
                >(jq -r .data.private_key >data/${server_name}.key)
    fi

}

vaultSetupThingCertsRole() {
    echo "Setup Thing Certs role"
    vault write -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_PKI_INT_PATH}/roles/${MG_VAULT_PKI_INT_THINGS_CERTS_ROLE_NAME} \
        allow_subdomains=true \
        allow_any_name=true \
        max_ttl="2160h"
}

if ! command -v jq &> /dev/null
then
    echo "jq command could not be found, please install it and try again."
    exit
fi

readDotEnv

mkdir -p data

vault login  -namespace=${MG_VAULT_NAMESPACE} -address=${MG_VAULT_ADDR} ${MG_VAULT_TOKEN}

vaultEnablePKI
vaultConfigPKIClusterPath
vaultConfigPKICrl
vaultAddRoleToSecret
vaultGenerateRootCACertificate
vaultSetupRootCAIssuingURLs
vaultGenerateIntermediateCAPKI
vaultConfigIntermediatePKIClusterPath
vaultConfigIntermediatePKICrl
vaultGenerateIntermediateCSR
vaultSignIntermediateCSR
vaultInjectIntermediateCertificate
vaultGenerateIntermediateCertificateBundle
vaultSetupIntermediateIssuingURLs
vaultSetupServerCertsRole
vaultGenerateServerCertificate
vaultSetupThingCertsRole

exit 0

================
File: scripts/vault/vault.md
================
## How to Install and Configure `vault` with `certs`

### Prerequisites:

1. **Kubernetes Configuration**: Ensure your `KUBECONFIG` is set up to point to the Kubernetes cluster where you want to deploy `vault`. This can typically be done by running:
   ```bash
   export KUBECONFIG=/path/to/your/kubeconfig
   ```
   This command tells your local machine which Kubernetes cluster to interact with.

### Step 1: Install `vault` using Helm

1. **Navigate to the `magistrala` Helm chart directory**:

   ```bash
   cd charts/magistrala
   ```

2. **Install `vault`**:
   ```bash
   helm upgrade magistrala . -n mg --set vault.enabled=true
   ```
   This command uses Helm to upgrade (or install) the `magistrala` release in the `mg` namespace with `vault` enabled.

### Step 2: Initialize `vault`

1. **Navigate to the `vault` Scripts Directory**:

   If you are currently in the `charts/magistrala` directory, go up two levels to the root and then to the `vault` scripts directory by running:

   ```bash
   cd ../../scripts/vault
   ```

   If you are at the root of the repository, navigate to the `vault` scripts directory directly by running:

   ```bash
   cd scripts/vault
   ```

2. **Run the `vault_init.sh` script**:
   ```bash
   ./vault_init.sh
   ```
   This script initializes `vault` by setting up necessary configurations, such as unsealing the vault and applying initial policies. This is a crucial step to get `vault` ready for use.

### Step 3: Enable the `certs` Service and Apply Configuration

1. **Load Environment Variables**:

   ```bash
   source .env
   ```

   This command loads environment variables from the `.env` file into your current shell session. These variables are required for the next step to configure the `certs` service.

2. **Navigate back to the `magistrala` Helm chart directory**:

   ```bash
   cd ../../charts/magistrala
   ```

3. **Upgrade the `magistrala` installation with `certs` enabled**:
   ```bash
   helm upgrade magistrala --create-namespace -n mg . \
       --set certs.vault.url=$MG_VAULT_ADDR \
       --set certs.vault.approleRoleid=$MG_VAULT_THINGS_CERTS_ISSUER_ROLEID \
       --set certs.vault.approleSecret=$MG_VAULT_THINGS_CERTS_ISSUER_SECRET \
       --set certs.vault.namespace=$MG_VAULT_NAMESPACE
   ```

================
File: scripts/.gitignore
================
data

================
File: scripts/efk.sh
================
#!/bin/bash

helm install elasticsearch stable/elasticsearch \
    --set data.resources.requests.memory=512Mi \
    --set client.replicas=1 \
    --set master.replicas=1 \
    --set cluster.env.MINIMUM_MASTER_NODES=1 \
    --set cluster.env.RECOVER_AFTER_MASTER_NODES=1 \
    --set cluster.env.EXPECTED_MASTER_NODES=1 \
    --set data.replicas=1 \
    --set data.heapSize=300m \
    --set master.persistence.size=10Gi \
    --set data.persistence.size=10Gi \
    --wait

helm install fluent-bit stable/fluent-bit \
    --set backend.type=es \
    --set backend.es.host=elasticsearch-client \
    --set filter.mergeJSONLog=false

helm install kibana stable/kibana \
    --set env.ELASTICSEARCH_HOSTS=http://elasticsearch-client:9200

================
File: LICENSE
================
Apache License
                           Version 2.0, January 2004
                        https://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   Copyright 2015-2019 Magistrala

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       https://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

================
File: README.md
================
## DevOps

Scripts for managing the Magistrala IoT platform. For installation instructions, refer to [Magistrala Kubernetes Documentation](https://docs.magistrala.abstractmachines.fr/kubernetes/).

### Autogenerating Helm Chart Documentation

The documentation for Magistrala Helm charts in `charts/magistrala/README.md` is generated using `helm-docs`, which extracts metadata from `Chart.yaml` and `values.yaml`. To update the documentation after changes, follow these steps:

### Prerequisites

Before starting, ensure the following tools are installed:

1. **Helm**  
   Make sure [Helm](https://helm.sh) is installed on your system. If not, follow the [Helm installation guide](https://helm.sh/docs) to get started.

2. **Helm Docs Tool**  
   The documentation for the Magistrala Helm charts is autogenerated using the `helm-docs` tool. To install `helm-docs`, use the following command:

   ```bash
   go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
   ```

   If Go is not installed, follow the [Go installation guide](https://golang.org/doc/install).

### Step 1: Navigate to Your Project Directory

First, move to the directory where the Helm charts are stored. For this project, the command would be:

```bash
cd devops
```

### Step 2: Run the `helm-docs` Command

Generate or update the documentation for your Helm charts by running:

```bash
helm-docs
```

This command will parse the charts in the `charts` directory and update the `charts/magistrala/README.md` file. A typical successful run looks like this:

```bash
INFO[2024-09-11T11:34:20+03:00] Found Chart directories [charts/magistrala]
INFO[2024-09-11T11:34:20+03:00] Generating README Documentation for chart charts/magistrala
```

### Step 3: Commit and Push the Changes

After `helm-docs` has updated the documentation, review the changes, and then commit and push them to your Git repository:

```bash
git add charts/magistrala/README.md
git commit -m "Update Helm chart documentation"
git push origin <your-branch>
```

Replace `<your-branch>` with the branch you are working on.

## License

This project is licensed under the [Apache-2.0](LICENSE).
