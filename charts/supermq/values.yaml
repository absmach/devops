# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0

# The explanations for optional configuration parameters described in the adapter_coap section
# apply across other services where the same named configuration parameters are used.

defaults:
  logLevel: "error"
  image:
    pullPolicy: "IfNotPresent"
    rootRepository: "supermq"
    tag: "latest"
    # pullSecrets: {}
  # Replicas of MQTT adapter, NATS, Things, Envoy and Auth
  replicaCount: 3
  natsPort: 4222
  jaegerCollectorPort: 4318
  jaegerTraceRatio: 1.0
  sendTelemetry: true
  eventStreamURL: "supermq-nats:4222"

adapter_coap:
  image:
    {}
    # pullSecrets: {}
    # If your image repository requires authentication, you can specify image pull secrets here.
    # Example:
    # pullSecrets:
    #   - my-registry-key

    # repository: "supermq"
    # The Docker repository where the adapter_coap image is stored.
    # Set this to your preferred image repository if you are using a custom image.

    # tag: "latest"
    # The specific tag of the adapter_coap image to use.
    # Change this to pin to a specific version or use "latest" for the most recent version.

    # pullPolicy: "IfNotPresent"
    # The image pull policy. This defines when Kubernetes should pull the Docker image.
    # Options are "Always", "IfNotPresent", or "Never". "IfNotPresent" is generally used to avoid unnecessary pulls.

  port: 5683
  # The primary port used by the CoAP adapter for communication.
  # Default: 5683 (standard CoAP UDP port).

  jaegerTraceRatio: 1.0
  # Defines the fraction of requests to trace using Jaeger. Distributed tracing monitors requests across services.
  # Value range:
  # - 1.0: Trace all requests (100% sampling)
  # - 0.5: Trace 50% of requests
  # - 0.0: Disable tracing (0% sampling)
  # Adjust this based on your observability needs and performance considerations.

  sendTelemetry: true
  # Enables or disables telemetry data reporting. Telemetry collects metrics and events for monitoring.
  # If true, the service will send telemetry data to the configured telemetry backend.
  # Set to false if telemetry reporting is not required or should be disabled for privacy concerns.

  # logLevel: "info"
  # The logging level for the adapter_coap service. Common options are "debug", "info", "warn", "error".
  # Adjust this based on the verbosity of logs you require.

  # nodeSelector: {}
  # Node selector for pod assignment. This can be used to restrict the pod to run on specific nodes.
  # Example:
  # nodeSelector:
  #   disktype: ssd

  # affinity: {}
  # Pod affinity and anti-affinity settings. Use this to specify rules about how pods should be placed relative to other pods.
  # Example:
  # affinity:
  #   podAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       - labelSelector:
  #           matchExpressions:
  #             - key: app
  #               operator: In
  #               values:
  #                 - my-app
  #         topologyKey: "kubernetes.io/hostname"

  # tolerations: {}
  # Tolerations for pod scheduling. Use this to allow pods to be scheduled on nodes with specific taints.
  # Example:
  # tolerations:
  #   - key: "key1"
  #     operator: "Equal"
  #     value: "value1"
  #     effect: "NoSchedule"

adapter_http:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/adapter-http"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  httpPort: 8008
  # logLevel: "error"
  # The logging level for the adapter_http service. Common options are "debug", "info", "warn", "error".
  # Adjust this based on the verbosity of logs you require.

  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

adapter_ws:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/ws"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: "error"
  httpPort: 8186
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

auth:
  image:
    {}
    # pullSecrets: {}
    # rootRepository: "supermq/auth"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: error
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  httpPort: 9001
  grpcPort: 7001
  grpcTimeout: "300s"
  secretKey: "supersecret"
  adminEmail: "admin@example.com"
  adminPassword: "12345678"
  accessTokenDuration: "1h"
  refreshTokenDuration: "24h"
  invitationDuration: "168h"
  grpcClientCert: "./ssl/certs/auth-grpc-client.crt"
  grpcClientKey: "./ssl/certs/auth-grpc-client.key"
  nodeSelector: {}
  affinity: {}
  tolerations: {}

postgresqlauth:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-auth
  host: postgresql-auth
  port: &postgresqlAuthPort 5432
  database: &postgresqlAuthDatabase auth
  username: &postgresqlAuthUsername supermq
  password: &postgresqlAuthPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlAuthPassword
        username: *postgresqlAuthUsername
        password: *postgresqlAuthPassword
        database: *postgresqlAuthDatabase
      service:
        ports:
          postgresql: *postgresqlAuthPort

certs:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/certs"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # logLevel: error
  # sendTelemetry: true
  httpPort: 9019
  logLevel: "error"
  signCAPath: "/etc/ssl/certs/ca.crt"
  signCAKeyPath: "/etc/ssl/certs/ca.key"
  sdkHost: "http://supermq-am-certs"
  sdkCertsUrl: "${SMQ_CERTS_SDK_HOST}:9010"
  sdkTlsVerification: "false"
  vault:
    url: "http://supermq-vault:8200"
    approleRoleid: supermq
    approleSecret: supermq
    namespace: supermq
    thingsCertsPkiPath: pki_int
    thingsCertsPkiRoleName: supermq_things_certs

postgresqlcerts:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-certs
  host: postgresql-certs
  port: &postgresqlCertsPort 5432
  database: &postgresqlCertsDatabase certs
  username: &postgresqlCertsUsername supermq
  password: &postgresqlCertsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlCertsPassword
        username: *postgresqlCertsUsername
        password: *postgresqlCertsPassword
        database: *postgresqlCertsDatabase
      service:
        ports:
          postgresql: *postgresqlCertsPort

channels:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/channels"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # sendTelemetry: true
  # logLevel: error
  # jaegerTraceRatio: 1.0
  httpPort: 9005
  grpcPort: 7005
  grpcTimeout: "1s"
  grpcClientCert: "./ssl/certs/channels-grpc-client.crt"
  grpcClientKey: "./ssl/certs/channels-grpc-client.key"
  grpcServerCert: "./ssl/certs/channels-grpc-server.crt"
  grpcServerKey: "./ssl/certs/channels-grpc-server.key"
  grpcClientCaCerts: "./ssl/certs/ca.crt"

postgresqlchannels:
  enabled: true
  name: postgresql-channels
  host: channels-db
  port: &postgresqlChannelsPort 5432
  database: &postgresqlChannelsDatabase channels
  username: &postgresqlChannelsUsername supermq
  password: &postgresqlChannelsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlChannelsPassword
        username: *postgresqlChannelsUsername
        password: *postgresqlChannelsPassword
        database: *postgresqlChannelsDatabase
      service:
        ports:
          postgresql: *postgresqlChannelsPort

clients:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/clients"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: error
  # sendTelemetry: true
  # jaegerTraceRatio: 1.0
  httpPort: 9006
  authGrpcPort: 7006
  grpcTimeout: "1s"
  grpcClientCert: "./ssl/certs/clients-grpc-client.crt"
  grpcClientKey: "./ssl/certs/clients-grpc-client.key"
  authHttpPort: 9001
  redisESPort: 6379
  redisCachePort: 6379
  cacheKeyduration: "10m"
  # logLevel: "error"
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlclients:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-clients
  host: postgresql-clients
  port: &postgresqlThingsPort 5432
  database: &postgresqlThingsDatabase clients
  username: &postgresqlThingsUsername supermq
  password: &postgresqlThingsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlThingsPassword
        username: *postgresqlThingsUsername
        password: *postgresqlThingsPassword
        database: *postgresqlThingsDatabase
      service:
        ports:
          postgresql: *postgresqlThingsPort

redis-clients:
  volumePermissions:
    enabled: true
  cluster:
    enabled: false
  usePassword: false

domains:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/domains"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # sendTelemetry: true
  httpPort: 9003
  grpcPort: 7003
  redisTCPPort: 6379
  cacheKeyduration: "10m"
  grpcTimeout: "300s"
  grpcClientCert: "./ssl/certs/domains-grpc-client.crt"
  grpcClientCaCerts: "./ssl/certs/ca.crt"

postgresqldomains:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-domains
  host: postgresql-domains
  port: &postgresqlDomainsPort 5432
  database: &postgresqlDomainsDatabase domains
  username: &postgresqlDomainsUsername supermq
  password: &postgresqlDomainsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlDomainsPassword
        username: *postgresqlDomainsUsername
        password: *postgresqlDomainsPassword
        database: *postgresqlDomainsDatabase
      service:
        ports:
          postgresql: *postgresqlDomainsPort

envoy:
  image:
    pullPolicy: "IfNotPresent"
    repository: "envoyproxy/envoy"
    tag: "v1.31-latest"

fluent-bit:
  enabled: true
  serviceAccount:
    create: true
  config:
    inputs: |
      [INPUT]
          Name             tail
          Path             /var/log/containers/*.log
          Read_from_head   true
          Tag              kube.*
    filters: |
      [FILTER]
          Name         kubernetes
          Match        kube.*
          k8s-logging.exclude off
          Buffer_Size 256k
    outputs: |
      [OUTPUT]
          Name        loki
          Match       *
          Host        supermq-loki.loki
          Port        3100
          Uri         /loki/api/v1/push
          Labels      job=fluent-bit
          Label_Keys  $kubernetes['namespace_name'], $kubernetes['pod_name']
          Line_Format json
          Auto_Kubernetes_Labels off
  resources: {}

groups:
  image:
    {}
    # pullSecrets: {}
    # rootRepository: "supermq/groups"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # logLevel: "error"
  # sendTelemetry: true
  # jaegerTraceRatio: 1.0
  httpPort: 9004
  grpcPort: 7004
  grpcTimeout: "300s"
  grpcClientCert: "./ssl/certs/groups-grpc-client.crt"
  grpcClientKey: "./ssl/certs/groups-grpc-client.key"
  grpcClientCaCerts: "./ssl/certs/ca.crt"
  grpcServerCert: "./ssl/certs/groups-grpc-server.crt"
  grpcServerKey: "./ssl/certs/groups-grpc-server.key"

postgresqlgroups:
  enabled: true
  name: postgresql-groups
  host: postgresql-groups
  port: &postgresqlGroupsPort 5432
  database: &postgresqlGroupsDatabase groups
  username: &postgresqlGroupsUsername supermq
  password: &postgresqlGroupsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlGroupsPassword
        username: *postgresqlGroupsUsername
        password: *postgresqlGroupsPassword
        database: *postgresqlGroupsDatabase
      service:
        ports:
          postgresql: *postgresqlGroupsPort

grafana:
  enabled: true
  adminUser: "admin"
  adminPassword: "12345678"
  service:
    type: LoadBalancer
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus-server:80
          isDefault: true
        - name: Loki
          type: loki
          access: proxy
          url: http://supermq-loki.loki:3100
          isDefault: false

ingress:
  enabled: true
  annotations: {}
  labels: {}
  # Uncomment this block for TLS support in public ingress
  # hostname: ""
  # tls:
  #   hostname: ""
  #   secret: "supermq-server"

invitations:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/invitations"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  # logLevel: "error"
  httpPort: 9020
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlinvitations:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-invitations
  host: postgresql-invitations
  port: &postgresqlInvitationsPort 5432
  database: &postgresqlInvitationsDatabase invitations
  username: &postgresqlInvitationsUsername supermq
  password: &postgresqlInvitationsPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlInvitationsPassword
        username: *postgresqlInvitationsUsername
        password: *postgresqlInvitationsPassword
        database: *postgresqlInvitationsDatabase
      service:
        ports:
          postgresql: *postgresqlInvitationsPort

jaeger:
  fullnameOverride: supermq-jaeger
  provisionDataStore:
    cassandra: true
  agent:
    enabled: false
  allInOne:
    enabled: false
  storage:
    type: cassandra
  cassandra:
    persistence:
      enabled: true
      storageClass: "do-block-storage"
      accessModes:
        - ReadWriteOnce
      size: 10Gi
  collector:
    service:
      otlp:
        grpc:
          name: otlp-grpc
          port: 4317
        http:
          name: otlp-http
          port: 4318

journal:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/journal"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  # logLevel: "error"
  httpPort: 9021
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqljournal:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-journal
  host: postgresql-journal
  port: &postgresqlJournalPort 5432
  database: &postgresqlJournalDatabase journal
  username: &postgresqlJournalUsername supermq
  password: &postgresqlJournalPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlJournalPassword
        username: *postgresqlJournalUsername
        password: *postgresqlJournalPassword
        database: *postgresqlJournalDatabase
      service:
        ports:
          postgresql: *postgresqlJournalPort

mqtt:
  enabled: true
  securityContext:
    runAsUser: 10000
    runAsGroup: 10000
    fsGroup: 10000
  adapter:
    image:
      pullSecrets: {}
      # repository: "supermq/mqtt"
      # tag: "latest"
      # pullPolicy: "IfNotPresent"
    mqttPort: 1884
    wsPort: 8081
    logLevel: "error"
    forwarderTimeout: "30s"
    qos: "2"
  broker:
    image:
      repository: "supermq/vernemq"
      # tag: "latest"
      # pullPolicy: "IfNotPresent"
    mqttPort: 1883
    wsPort: 8080
    logLevel: "error"
    persistentVolume:
      size: 5Gi
  redisESPort: 6379
  redisCachePort: 6379

nats:
  config:
    cluster:
      enabled: false
      replicas: 3
    jetstream:
      enabled: true
      fileStore:
        enabled: true
        pvc:
          enabled: true
      memoryStore:
        enabled: true
        maxSize: 2Gi

nginxInternal:
  image:
    pullPolicy: "IfNotPresent"
    repository: "nginx"
    tag: "1.19.1-alpine"
  mtls:
    # By default mTLS is disabled. If you use mTLS, comment this block.
    tls: ""
    intermediateCrt: ""
    # Uncomment this block for TLS and mTLS support.
    # Use sh script from /secrets/secrets.sh to create config maps with your certs
    # tls: "supermq-server"
    # intermediateCrt: "ca"

prometheus:
  enabled: true
  pushgateway:
    enabled: false

  rbac:
    create: true

  serviceAccounts:
    server:
      create: true
      name: ""
      annotations: {}

  configmapReload:
    prometheus:
      enabled: true
      name: configmap-reload
      image:
        repository: quay.io/prometheus-operator/prometheus-config-reloader
        tag: v0.79.2
        pullPolicy: IfNotPresent
      containerPort: 8080
      containerPortName: metrics
      resources: {}

  server:
    name: server
    image:
      repository: quay.io/prometheus/prometheus
      tag: ""
      pullPolicy: IfNotPresent
    extraFlags:
      - --web.enable-lifecycle
    resources: {}
    securityContext:
      runAsUser: 65534
      runAsNonRoot: true
      runAsGroup: 65534
      fsGroup: 65534

    service:
      enabled: true
      type: ClusterIP
      clusterIP: ""
      port: 9200
      servicePort: 9200
      targetPort: 9200
      portName: metrics
      annotations:
        prometheus.io/scrape: "true"

    persistentVolume:
      enabled: true
      accessModes:
        - ReadWriteOnce
      size: 8Gi
      mountPath: /data

  nodeExporter:
    enabled: true
    image:
      repository: quay.io/prometheus/node-exporter
      tag: v1.8.2
      pullPolicy: IfNotPresent

    containerPort: 9200
    hostPort: 9200
    service:
      enabled: true
      type: ClusterIP
      clusterIP: ""
      port: 9200
      servicePort: 9200
      targetPort: 9200
      annotations:
        prometheus.io/scrape: "true"

    extraArgs:
      - --web.listen-address=0.0.0.0:9200

    livenessProbe:
      httpGet:
        path: /metrics
        port: 9200
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10

    readinessProbe:
      httpGet:
        path: /metrics
        port: 9200
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10

    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"

    nodeSelector:
      kubernetes.io/os: linux

    hostNetwork: true
    hostPID: true

  alertmanager:
    enabled: false

  kubeStateMetrics:
    enabled: true

  prometheusPushgateway:
    enabled: false

spicedb:
  # replicaCount: 1
  image:
    pullSecrets: {}
    repository: authzed/spicedb
    tag: latest
    # pullPolicy: "IfNotPresent"
  grpc:
    presharedKey: "12345678"
    port: 50051
  datastore:
    ## engine can be any one of the two options: postgres (default) , memory
    engine: postgres
  dispatch:
    port: 50053
    enabled: false
  http:
    enabled: false
    port: 8443
  metrics:
    enabled: true
    port: 9090
  nodeSelector: {}
  affinity: {}
  tolerations: {}

postgresqlspicedb:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-spicedb
  host: postgresql-spicedb
  port: &postgresqlSpicedbPort 5432
  database: &postgresqlSpicedbDatabase spicedb
  username: &postgresqlSpicedbUsername supermq
  password: &postgresqlSpicedbPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlSpicedbPassword
        username: *postgresqlSpicedbUsername
        password: *postgresqlSpicedbPassword
        database: *postgresqlSpicedbDatabase
      service:
        ports:
          postgresql: *postgresqlSpicedbPort

users:
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/users"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  # logLevel: "error"
  httpPort: 9002
  admin:
    email: "admin@example.com"
    password: "12345678"
    username: "admin"
    firstname: "super"
    lastname: "admin"
  secretKey: "supersecret"
  accessTokenDuration: "15m"
  refreshTokenDuration: "24h"
  passwordRegex: "^.{8,}$"
  tokenResetEndpoint: "/reset-request"
  allowSelfRegister: true
  deleteInterval: "24h"
  deleteAfter: "720h"
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlusers:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-users
  host: postgresql-users
  port: &postgresqlUsersPort 5432
  database: &postgresqlUsersDatabase users
  username: &postgresqlUsersUsername supermq
  password: &postgresqlUsersPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlUsersPassword
        username: *postgresqlUsersUsername
        password: *postgresqlUsersPassword
        database: *postgresqlUsersDatabase
      service:
        ports:
          postgresql: *postgresqlUsersPort

ui:
  enabled: true
  image:
    {}
    # pullSecrets: {}
    # repository: "supermq/ui"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
    # logLevel: "error"
  # hostname: ""
  # contentTypes: "application/senml+json"
  port: 9095
  pathPrefix: "/ui"
  # hostUrl: "https://domain-name"
  # httpAdapterUrl: "http://supermq-adapter-http:8008"
  # usersUrl: "http://supermq-users:9002"
  # authUrl: "http://supermq-auth:8189"
  # clientsUrl: "http://supermq-clients:9000"
  # invitationsUrl: "http:///supermq-auth:9020"
  # journalUrl: "http:///supermq-auth:9021"
  # domainsUrl: "http://supermq-auth:8189"
  googleClientID: ""
  googleClientSecret: ""
  googleRedirectHostname: "https://stage-domain-name"
  googleRedirectPath: "/oauth/callback/google"
  googleState: "somerandomstring"
  contentType: "application/senml+json"
  hashKey: "5jx4x2Qg9OUmzpP5dbveWQ"
  blockKey: "UtgZjr92jwRY6SPUndHXiyl9QY8qTUyZ"

postgresqlui:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-ui
  host: postgresql-ui
  port: &postgresqlUIPort 5432
  database: &postgresqlUIDatabase ui
  username: &postgresqlUIUsername supermq
  password: &postgresqlUIPassword supermq
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlUIPassword
        username: *postgresqlUIUsername
        password: *postgresqlUIPassword
        database: *postgresqlUIDatabase
      service:
        ports:
          postgresql: *postgresqlUIPort

vault:
  enabled: false
