# Copyright (c) Abstract Machines
# SPDX-License-Identifier: Apache-2.0
{{- if .Values.ingress.enabled }}

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-nginx-ingress
{{- if .Values.ingress.annotations }}
  annotations:
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
{{- if .Values.ingress.labels }}
  labels:
{{ toYaml .Values.ingress.labels | indent 4 }}
{{- end }}
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Release.Name }}-ui
                port:
                  number: {{ .Values.ui.port }}
          - path: /health
            pathType: Exact
            backend:
              service:
                name: {{ .Release.Name }}-things
                port:
                  number: {{ .Values.things.httpPort }}
{{- if .Values.ingress.tls }}
  tls:
    - hosts:
        - {{ .Values.ingress.tls.hostname }}
      secretName: {{ .Values.ingress.tls.secret }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-users-things-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-things.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.things.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((users|groups)/(.+)/(channels|things))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-users
                port:
                  number: {{ .Values.users.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-things-users-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-users.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.users.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((channels|things)/(.+)/(users|groups))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-things
                port:
                  number: {{ .Values.things.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-users-domains-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-auth.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.auth.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((users)/(.+)/(domains))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-users
                port:
                  number: {{ .Values.users.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-domains-users-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ($request_method = GET) {
        proxy_pass http://{{ .Release.Name }}-users.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.users.httpPort }};
        break;
      }
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /((domains)/(.+)/(users))
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-auth
                port:
                  number: {{ .Values.auth.httpPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-nginx-rewrite-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
{{- if .Values.ingress.annotations }}
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
{{- if .Values.ingress.labels }}
  labels:
{{ toYaml .Values.ingress.labels | indent 4 }}
{{- end }}
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          - path: /(domains.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-auth
                port:
                  number: {{ .Values.auth.httpPort }}
          - path: /((users|groups|password|authorize).*|oauth/callback/[^/]+)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-users
                port:
                  number: {{ .Values.users.httpPort }}
          - path: /((things|channels|connect|disconnect|identify).*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-things
                port:
                  number: {{ .Values.things.httpPort }}
          - path: /(invitations.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-invitations
                port:
                  number: {{ .Values.invitations.httpPort }}
          - path: /(journal.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-journal
                port:
                  number: {{ .Values.journal.httpPort }}
{{- if .Values.certs.enabled }}
          - path: /((certs|serials).*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-certs
                port:
                  number: {{ .Values.certs.httpPort }}
{{- end }}
{{- if .Values.bootstrap.enabled }}
          - path: /bootstrap/?(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-bootstrap
                port:
                  number: {{ .Values.bootstrap.httpPort }}
{{- end }}
{{- if .Values.ingress.tls }}
  tls:
    - hosts:
        - {{ .Values.ingress.tls.hostname }}
      secretName: {{ .Values.ingress.tls.secret }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-nginx-rewrite-ingress-http-adapter
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
{{- if and (ne .Values.nginxInternal.mtls.tls "") (ne .Values.nginxInternal.mtls.intermediateCrt "") }}
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    nginx.ingress.kubernetes.io/auth-tls-secret: {{ .Release.Namespace }}/ca
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
{{- end }}
{{- if .Values.ingress.annotations }}
{{ toYaml .Values.ingress.annotations | indent 4 }}
{{- end }}
{{- if .Values.ingress.labels }}
  labels:
{{ toYaml .Values.ingress.labels | indent 4 }}
{{- end }}
spec:
  ingressClassName: nginx
  rules:
    - host: "{{ .Values.ingress.hostname }}"
      http:
        paths:
          {{- if and (ne .Values.nginxInternal.mtls.tls "") (ne .Values.nginxInternal.mtls.intermediateCrt "") }}
          - path: /(http/?.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-nginx-internal
                port:
                  number: 80
          - path: /(mqtt)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-nginx-internal
                port:
                  number: 80
          {{- else }}
          - path: /http/?(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-adapter-http
                port:
                  number: {{ .Values.adapter_http.httpPort }}
          - path: /(mqtt)
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ .Release.Name }}-mqtt
                port:
                  number: {{ default .Values.mqtt.adapter.wsPort }}
          {{- end }}
{{- if .Values.ingress.tls }}
  tls:
    - hosts:
        - {{ .Values.ingress.tls.hostname }}
      secretName: {{ .Values.ingress.tls.secret }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: default
data:
  1883: "{{ .Release.Namespace }}/{{ .Release.Name }}-envoy:1883"
  8883: "{{ .Release.Namespace }}/{{ .Release.Name }}-nginx-internal:8883"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: udp-services
  namespace: default
data:
  5683: "{{ .Release.Namespace }}/{{ .Release.Name }}-adapter-coap:5683"

{{- end }}
