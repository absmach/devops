# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

defaults:
  logLevel: "info"
  image:
    pullPolicy: "IfNotPresent"
    repository: "mainflux"
    tag: "0.12.0"
    imagePullSecrets: ""
  # Replicas of MQTT adapter, NATS, Things, Envoy and Auth
  replicaCount: 3
  natsPort: 4222
  jaegerPort: 6831

ingress:
  enabled: true
  annotations: {}
  labels: {}
  # Uncomment this block for TLS support in public ingress
  # hostname: ""
  # tls:
  #   hostname: ""
  #   secret: "mainflux-server"

nginxInternal:
  mtls:
    # By default mTLS is disabled. If you use mTLS, comment this block.
    tls: ""
    intermediateCrt: ""
    # Uncomment this block for TLS and mTLS support.
    # Use sh script from /secrets/secrets.sh to create config maps with your certs
    # tls: "mainflux-server"
    # intermediateCrt: "ca"

adapter_http:
  image: {}
  httpPort: 8185

adapter_coap:
  image: {}
  port: 5683

adapter_opcua:
  enabled: false
  image: {}
  httpPort: 8188
  policy: ""
  mode: ""
  certFile: ""
  keyFile: ""
  eventConsumer: "opcua"
  redisRouteMapPort: 6379

adapter_lora:
  enabled: false
  image: {}
  httpPort: 8187
  messageUrl: "tcp://lora.mqtt.mainflux.io:1883"
  redisRouteMapPort: 6379

notifier_smtp:
  enabled: false
  image: {}
  emailHost: "smtp.example.com"
  smtpPort: 2525
  fromName: "Mainflux"
  fromEmail: "admin@example.com"
  username: ""
  password: ""
  secret: ""
  httpPort: 8906

mqtt:
  enabled: true
  securityContext:
    runAsUser: 10000
    runAsGroup: 10000
    fsGroup: 10000
  adapter:
    image:
      repository: "mainflux/mqtt"
    mqttPort: 1884
    wsPort: 8081
    logLevel: "debug"
  broker:
    image:
      repository: "mainflux/vernemq"
    mqttPort: 1883
    wsPort: 8080
    logLevel: "info"
    persistentVolume:
      size: 5Gi
  redisESPort: 6379
  redisCachePort: 6379

users:
  image: {}
  dbPort: 5432
  httpPort: 8180
  adminEmail: "admin@example.com"
  adminPassword: "12345678"

things:
  image: {}
  dbPort: 5432
  httpPort: 8182
  authGrpcPort: 8183
  authHttpPort: 8989
  redisESPort: 6379
  redisCachePort: 6379

auth:
  image: {}
  dbPort: 5432
  grpcPort: 8181
  httpPort: 8189
  secret: "secret"

bootstrap:
  enabled: false
  image: {}
  dbPort: 5432
  httpPort: 8182
  redisESPort: 6379

certs:
  enabled: false
  image: {}
  dbPort: 5432
  httpPort: 8204
  logLevel: "info"
  sdkThingsPrefix: ""  
  encryptKey: ""
  clientTLS: ""
  serverCert: ""
  serverKey: ""
  signCAPath: "/etc/ssl/certs/ca.crt"
  signCAKeyPath: "/etc/ssl/certs/ca.key"
  signHoursValid: "2048h"
  signRSABits: 2048
  signVaultToken: ""
  signVaultHost: ""
  signVaultPKIPath: "pki_int"
  signVaultRole: "agent"

ui:
  image: {}
  port: 3000

influxdb:
  enabled: false
  dbPort: 8086
  writer:
    image: {}
    httpPort: 8900
  reader:
    image: {}
    httpPort: 8905
  database: "mainflux"
  authEnabled: true
  adminUser:
    name: "mainflux"
    pwd: "mainflux"
  configPath: "/config.toml"
  contentType: "application/senml+json"
  transformer: "senml"
  backup:
    enabled: false
    cronjob:
      schedule: "0 2 * * *"

mongodb:
  enabled: false
  dbPort: 27017
  writer:
    image: {}
    httpPort: 8901
  reader:
    image: {}
    httpPort: 8904
  database: "mainflux"
  authEnabled: true
  adminUser:
    name: "mainflux"
    pwd: "mainflux"
  configPath: "/subjects.toml"
  contentType: "application/senml+json"
  transformer: "json"

nats:
  auth:
    enabled: false
  clusterAuth:
    enabled: false
  maxPayload: 268435456
  replicaCount: 3

postgresqlUsers:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-users
  postgresqlHost: localhost
  postgresqlUsername: postgres
  postgresqlPassword: mainflux
  postgresqlDatabase: users
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlThings:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-things
  postgresqlHost: localhost
  postgresqlUsername: postgres
  postgresqlPassword: mainflux
  postgresqlDatabase: things
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlAuth:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-auth
  postgresqlHost: localhost
  postgresqlUsername: postgres
  postgresqlPassword: mainflux
  postgresqlDatabase: auth
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlBootstrap:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: false
  name: postgresql-bootstrap
  postgresqlHost: localhost
  postgresqlUsername: postgres
  postgresqlPassword: mainflux
  postgresqlDatabase: bootstrap
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlCerts:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: false
  name: postgresql-certs
  postgresqlHost: localhost
  postgresqlUsername: postgres
  postgresqlPassword: mainflux
  postgresqlDatabase: certs
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlNotifierSMTP:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: false
  name: postgresql-notifier-smtp
  postgresqlHost: localhost
  postgresqlUsername: postgres
  postgresqlPassword: mainflux
  postgresqlDatabase: subscriptions
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

redis-streams:
  volumePermissions:
    enabled: true
  cluster:
    enabled: false
  usePassword: false

redis-mqtt:
  volumePermissions:
    enabled: true
  cluster:
    enabled: false
  usePassword: false

redis-auth:
  cluster:
    enabled: false
  usePassword: false
  master:
    persistence:
      enabled: false

redis-opcua:
  cluster:
    enabled: false
  usePassword: false
  master:
    persistence:
      enabled: false

redis-lora:
  cluster:
    enabled: false
  usePassword: false
  master:
    persistence:
      enabled: false

jaeger-operator:
  jaeger:
    create: true
  rbac:
    pspEnabled: true
    clusterRole: true

twins:
  enabled: false
  image: {}
  dbPort: 27017
  httpPort: 9021
  channelId: ""
  redisCachePort: 6379

twins-db:
  auth:
    enabled: false

envoy:
  image:
    pullPolicy: "IfNotPresent"
    repository: "envoyproxy/envoy"
    tag: "v1.13.0"

nginx_internal:
  image:
    pullPolicy: "IfNotPresent"
    repository: "nginx"
    tag: "1.19.1-alpine"

# All options for loki-stack: https://github.com/grafana/helm-charts/tree/main/charts/loki-stack
loki-stack:
  enabled: true
  loki:
    enabled: false
    persistence:
      enabled: true
  promtail:
    enabled: false
  fluent-bit:
    enabled: false
  grafana:
    enabled: true
    sidecar:
      datasources:
        enabled: true
    image:
      tag: 8.1.6
    grafana.ini:
      server:
        domain: example.com
        root_url: "%(protocol)s://%(domain)s/grafana"
        serve_from_sub_path: true
    ingress:
      enabled: false
      hosts:
        - "example.com"
      path: "/grafana"
    persistence:
      enabled: true
      size: 3Gi
  prometheus:
    enabled: false
