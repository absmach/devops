# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

defaults:
  logLevel: "info"
  image:
    pullPolicy: "IfNotPresent"
    repository: "mainflux"
    tag: "latest"
    # imagePullSecrets:
    #   - {}
  # Replicas of MQTT adapter, NATS, Things, Envoy and Auth
  replicaCount: 3
  natsPort: 4222
  jaegerCollectorPort: 14268

ingress:
  enabled: true
  annotations: {}
  labels: {}
  # Uncomment this block for TLS support in public ingress
  # hostname: ""
  # tls:
  #   hostname: ""
  #   secret: "mainflux-server"

nginxInternal:
  mtls:
    # By default mTLS is disabled. If you use mTLS, comment this block.
    tls: ""
    intermediateCrt: ""
    # Uncomment this block for TLS and mTLS support.
    # Use sh script from /secrets/secrets.sh to create config maps with your certs
    # tls: "mainflux-server"
    # intermediateCrt: "ca"

adapter_http:
  image: {}
  httpPort: 8008

adapter_coap:
  image: {}
  port: 5683

adapter_opcua:
  enabled: false
  image: {}
  httpPort: 8188
  policy: ""
  mode: ""
  certFile: ""
  keyFile: ""
  eventConsumer: "opcua"
  redisRouteMapPort: 6379

adapter_lora:
  enabled: false
  image: {}
  httpPort: 9017
  messageUrl: "tcp://lora.mqtt.mainflux.io:1883"
  redisRouteMapPort: 6379

notifier_smtp:
  enabled: false
  image: {}
  emailHost: "smtp.example.com"
  smtpPort: 2525
  fromName: "Mainflux"
  fromEmail: "admin@example.com"
  username: ""
  password: ""
  secret: ""
  httpPort: 9015

mqtt:
  enabled: true
  securityContext:
    runAsUser: 10000
    runAsGroup: 10000
    fsGroup: 10000
  adapter:
    image:
      repository: "mainflux/mqtt"
    mqttPort: 1884
    wsPort: 8081
    logLevel: "debug"
  broker:
    image:
      repository: "mainflux/vernemq"
    mqttPort: 1883
    wsPort: 8080
    logLevel: "info"
    persistentVolume:
      size: 5Gi
  redisESPort: 6379
  redisCachePort: 6379

users:
  image: {}
  httpPort: 9002
  grpcPort: 7001
  adminEmail: "admin@example.com"
  adminPassword: "12345678"

things:
  image: {}
  httpPort: 9000
  authGrpcPort: 7000
  authHttpPort: 9001
  redisESPort: 6379
  redisCachePort: 6379

bootstrap:
  enabled: false
  image: {}
  httpPort: 9013
  redisESPort: 6379

certs:
  enabled: false
  image: {}
  httpPort: 9019
  logLevel: "info"
  sdkThingsPrefix: ""
  encryptKey: ""
  clientTLS: ""
  serverCert: ""
  serverKey: ""
  signCAPath: "/etc/ssl/certs/ca.crt"
  signCAKeyPath: "/etc/ssl/certs/ca.key"
  signHoursValid: "2048h"
  signRSABits: 2048
  signVaultToken: ""
  signVaultHost: ""
  signVaultPKIPath: "pki_int"
  signVaultRole: "agent"

ui:
  image: {}
  port: 9090
  redirectUrl: https://localhost
  httpAdapterUrl: "http://mainflux-adapter-http:8008"
  usersUrl: "http://mainflux-users:9002"
  thingsUrl: "http://mainflux-things:9000"
  readerUrl: "http://mainflux-timescale-reader:8911"

influxdb:
  enabled: false
  dbPort: 8086
  writer:
    image: {}
    httpPort: 9006
  reader:
    image: {}
    httpPort: 9005
  database: "mainflux"
  authEnabled: true
  auth:
    admin:
      username: mainflux
      password: mainflux
      token: mainflux-influxdb-token
      org: mainflux
      bucket: mainflux
  configPath: "/config.toml"
  contentType: "application/senml+json"
  transformer: "senml"
  backup:
    enabled: false
    cronjob:
      schedule: "0 2 * * *"

mongodb:
  enabled: false
  dbPort: 27017
  writer:
    image: {}
    httpPort: 9008
  reader:
    image: {}
    httpPort: 9007
  database: "mainflux"
  authEnabled: true
  adminUser:
    name: "mainflux"
    pwd: "mainflux"
  configPath: "/subjects.toml"
  contentType: "application/senml+json"
  transformer: "json"

nats:
  auth:
    enabled: false
  clusterAuth:
    enabled: false
  maxPayload: 268435456
  replicaCount: 3

postgresqlusers:
  ## If you want to use an external database, set this to false and change postgresqlHost & postgresqlPort
  enabled: true
  name: postgresql-users
  postgresqlHost: postgresql-users
  postgresqlPort: "5432"
  auth:
    postgresPassword: postgres
    username: mainflux
    password: mainflux
    database: users
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlthings:
  ## If you want to use an external database, set this to false and change postgresqlHost & postgresqlPort
  enabled: true
  name: postgresql-things
  postgresqlHost: postgresql-things
  postgresqlPort: "5432"
  auth:
    postgresPassword: postgres
    username: mainflux
    password: mainflux
    database: things
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlbootstrap:
  ## If you want to use an external database, set this to false and change postgresqlHost & postgresqlPort
  enabled: false
  name: postgresql-bootstrap
  postgresqlHost: postgresql-bootstrap
  postgresqlPort: "5432"
  auth:
    postgresPassword: postgres
    username: mainflux
    password: mainflux
    database: bootstrap
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlcerts:
  ## If you want to use an external database, set this to false and change postgresqlHost & postgresqlPort
  enabled: false
  name: postgresql-certs
  postgresqlHost: postgresql-certs
  postgresqlPort: "5432"
  auth:
    postgresPassword: postgres
    username: mainflux
    password: mainflux
    database: certs
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

postgresqlnotifiersmtp:
  ## If you want to use an external database, set this to false and change postgresqlHost & postgresqlPort
  enabled: false
  name: postgresql-notifier-smtp
  postgresqlHost: postgresql-notifier-smtp
  postgresqlPort: "5432"
  auth:
    postgresPassword: postgres
    username: mainflux
    password: mainflux
    database: subscriptions
  resources:
    requests:
      cpu: 25m
  persistence:
    size: 1Gi

redis-streams:
  auth:
    enabled: false
  master:
    persistence:
      enabled: false


redis-mqtt:
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 1Gi


redis-auth:
  auth:
    enabled: false
  master:
    persistence:
      enabled: false



redis-opcua:
  auth:
    enabled: false
  master:
    persistence:
      enabled: false



redis-lora:
  auth:
    enabled: false
  master:
    persistence:
      enabled: false



twins:
  enabled: false
  image: {}
  dbPort: 27017
  httpPort: 9018
  channelId: ""
  redisCachePort: 6379

twins-db:
  auth:
    enabled: false

envoy:
  image:
    pullPolicy: "IfNotPresent"
    repository: "envoyproxy/envoy"
    tag: "v1.13.0"

nginx_internal:
  image:
    pullPolicy: "IfNotPresent"
    repository: "nginx"
    tag: "1.19.1-alpine"