# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

{{ if and (ne .Values.nginxInternal.mtls.tls "") (ne .Values.nginxInternal.mtls.intermediateCrt "") -}}
apiVersion: v1
data:
  dhparam.pem: LS0tLS1CRUdJTiBESCBQQVJBTUVURVJTLS0tLS0KTUlJQkNBS0NBUUVBcXVOOE5SY1NkTE9NOVJpdW1xV0g4SnczQ0dWUi9lUVFlcStqdlQzenB4bFVRUEFNRXhRYgpNUkNzcG0xb1JnRFdHdmNoM1o0emZNbUJaeXpLSkE0QkRUaDRVU3pjRTV6dm54OGFVY1VQWlBRcHdTaWNLZ3piClFHbmwwWGYvNzVHQVdyd2h4bjhHTnlNUDI5d3JwY2QxUWc4ZkVRM0hBVzFmQ2Q5Z2lyS01LWTlhQmFIbGkvaDIKUjlSZC9LVGJlcU44OGFvTWpVdlpIb29JSVpYdTBBK2t5dWxPYWpZUU80azNTcDZDQnF2MEZGY29MUW5ZTkgxMwprTVVFNXFKNjhVNzMySHliVHc4c29mVENPeEtjQ2ZNMmtWUDdkVm9GM3BybEdqVXczejNsM1NUWTh2dVRkcTBCClI3UHNsa29RSE5tcWNMKzJnb3VvV1AzR0krSWVSekdTU3dJQkFnPT0KLS0tLS1FTkQgREggUEFSQU1FVEVSUy0tLS0t
kind: Secret
metadata:
  name: {{ .Release.Name }}-nginx-internal-dhparam
type: Opaque
---
apiVersion: v1
data:
  nginx.conf: |-
    user nginx;
    worker_processes auto;
    pid /run/nginx.pid;
    load_module /etc/nginx/modules/ngx_stream_js_module.so;
    load_module /etc/nginx/modules/ngx_http_js_module.so;
    include /etc/nginx/modules-enabled/*.conf;

    events {
      worker_connections 768;
    }

    http {
      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;

      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      ssl_protocols TLSv1.2 TLSv1.3;
      ssl_prefer_server_ciphers on;

      js_include authorization.js;
      js_set $auth_key setKey;

      server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        # These paths are set to its default values as
        # a volume in the docker/docker-compose.yml file.
        ssl_certificate /etc/ssl/certs/mainflux-server/tls.crt;
        ssl_certificate_key /etc/ssl/certs/mainflux-server/tls.key;
        ssl_client_certificate /etc/ssl/certs/ca.crt;
        # ssl_crl /etc/ssl/certs/crl.pem;
        ssl_verify_client optional;
        ssl_verify_depth 2;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_tickets off;
        ssl_stapling off;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header Access-Control-Allow-Origin '*';
        add_header Access-Control-Allow-Methods '*';
        add_header Access-Control-Allow-Headers '*';

        server_name {{ .Values.ingress.hostname }};

        # Proxy pass to users service
        location ~ ^/(users|tokens) {
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_pass http://{{ .Release.Name }}-users:{{ .Values.users.httpPort }};

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        # Proxy pass to things service
        location ~ ^/(things|channels|connect) {
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          add_header Access-Control-Expose-Headers Location;
          proxy_pass http://{{ .Release.Name }}-things:{{ .Values.things.httpPort }};

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        location /version {
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_pass http://{{ .Release.Name }}-things:{{ .Values.things.httpPort }};

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        # Proxy pass to mainflux-http-adapter
        location /http/ {
          if ($auth_key = '') {
            return 403;
          }
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header Authorization $auth_key;
          proxy_pass http://{{ .Release.Name }}-adapter-http:{{ default .Values.adapter_http.httpPort }}/;

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }

        #Proxy pass to mainflux-mqtt-adapter for MQTT over WS
        location /mqtt {
          if ($auth_key = '') {
            return 403;
          }
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          proxy_connect_timeout 7d;
          proxy_send_timeout 7d;
          proxy_read_timeout 7d;
          proxy_pass http://{{ .Release.Name }}-adapter-mqtt:8081;

          # Allow OPTIONS method CORS
          if ($request_method = OPTIONS ) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 200;
          }
        }
      }

      log_format access_log_format 'HTTP/WS '
        '$remote_addr: '
        '"$request" $status; '
        'request time=$request_time upstream connect time=$upstream_connect_time upstream response time=$upstream_response_time';
      access_log /var/log/nginx/access.log access_log_format;
      error_log  /var/log/nginx/error.log debug;

    }

    # MQTT and LoRa MQTT
    stream {
      js_include authorization.js;
      # MQTT
      server {
          listen 8883 ssl;
          listen [::]:8883 ssl;

          # These paths are set to its default values as
          # a volume in the docker/docker-compose.yml file.
          ssl_certificate /etc/ssl/certs/mainflux-server/tls.crt;
          ssl_certificate_key /etc/ssl/certs/mainflux-server/tls.key;
          ssl_client_certificate /etc/ssl/certs/ca.crt;
          # FIXME
          # ssl_crl /etc/ssl/certs/crl.pem;
          ssl_verify_client on;
          ssl_verify_depth 2;
          ssl_dhparam /etc/ssl/certs/dhparam.pem;

          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_prefer_server_ciphers on;
          ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
          ssl_ecdh_curve secp384r1;
          ssl_session_tickets off;
          resolver 8.8.8.8 8.8.4.4 valid=300s;
              resolver_timeout 5s;
          js_preread authenticate;

          proxy_pass {{ .Release.Name }}-envoy:1883;
      }

      log_format access_log_format '$protocol '
        '$remote_addr: '
        'status=$status; upstream connect time=$upstream_connect_time';
      access_log /var/log/nginx/access.log access_log_format;
      error_log  /var/log/nginx/error.log debug;

    }

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-config
---
apiVersion: v1
data:
  authorization.js: |-
    var clientKey = '';

    // Check certificate MQTTS.
    function authenticate(s) {
      if (!s.variables.ssl_client_s_dn || !s.variables.ssl_client_s_dn.length ||
        !s.variables.ssl_client_verify || s.variables.ssl_client_verify != "SUCCESS") {
        s.deny();
        return;
      }

      s.on('upload', function (data) {
        if (data == '') {
          return;
        }

        var packet_type_flags_byte = data.codePointAt(0);
        // First MQTT packet contain message type and flags. CONNECT message type
        // is encoded as 0001, and we're not interested in flags, so only values
        // 0001xxxx (which is between 16 and 32) should be checked.
        if (packet_type_flags_byte < 16 || packet_type_flags_byte >= 32) {
          s.off('upload');
          s.allow();
          return;
        }

        if (clientKey === '') {
          clientKey = parseCert(s.variables.ssl_client_s_dn, 'CN');
        }

        var pass = parsePackage(s, data);

        if (!clientKey.length || pass !== clientKey) {
          s.error('Cert CN (' + clientKey + ') does not match client password');
          s.off('upload')
          s.deny();
          return;
        }

        s.off('upload');
        s.allow();
      })
    }

    function parsePackage(s, data) {
      // An explanation of MQTT packet structure can be found here:
      // https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#msg-format.

      // CONNECT message is explained here:
      // https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect.

      /*
        0               1               2               3
        7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        | TYPE | RSRVD | REMAINING LEN |      PROTOCOL NAME LEN       |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                        PROTOCOL NAME                        |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
        |    VERSION   |     FLAGS     |          KEEP ALIVE          |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
        |                     Payload (if any) ...                    |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

        First byte with remaining length represents fixed header.
        Remaining Length is the length of the variable header (10 bytes) plus the length of the Payload.
        It is encoded in the manner described here:
        http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836.

        Connect flags byte looks like this:
        |       7       |       6       |       5     |   4  3   |     2     |       1       |     0     |
        | Username Flag | Password Flag | Will Retain | Will QoS | Will Flag | Clean Session | Reserved  |

        The payload is determined by the flags and comes in this order:
          1. Client ID (2 bytes length + ID value)
          2. Will Topic (2 bytes length + Will Topic value) if Will Flag is 1.
          3. Will Message (2 bytes length + Will Message value) if Will Flag is 1.
          4. User Name (2 bytes length + User Name value) if User Name Flag is 1.
          5. Password (2 bytes length + Password value) if Password Flag is 1.

        This method extracts Password field.
      */

      // Extract variable length header. It's 1-4 bytes. As long as continuation byte is
      // 1, there are more bytes in this header. This algorithm is explained here:
      // http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180836
      var len_size = 1;
      for (var remaining_len = 1; remaining_len < 5; remaining_len++) {
        if (data.codePointAt(remaining_len) > 128) {
          len_size += 1;
          continue;
        }
        break;
      }

      // CONTROL(1) + MSG_LEN(1-4) + PROTO_NAME_LEN(2) + PROTO_NAME(4) + PROTO_VERSION(1)
      var flags_pos = 1 + len_size + 2 + 4 + 1;
      var flags = data.codePointAt(flags_pos);

      // If there are no username and password flags (11xxxxxx), return.
      if (flags < 192) {
        s.error('MQTT username or password not provided');
        return '';
      }

      // FLAGS(1) + KEEP_ALIVE(2)
      var shift = flags_pos + 1 + 2;

      // Number of bytes to encode length.
      var len_bytes_num = 2;

      // If Wil Flag is present, Will Topic and Will Message need to be skipped as well.
      var shift_flags = 196 <= flags ? 5 : 3;
      var len_msb, len_lsb, len;

      for (var i = 0; i < shift_flags; i++) {
        len_msb = data.codePointAt(shift).toString(16);
        len_lsb = data.codePointAt(shift + 1).toString(16);
        len = calcLen(len_msb, len_lsb);
        shift += len_bytes_num;
        if (i != shift_flags - 1) {
          shift += len;
        }
      }

      var password = data.substring(shift, shift + len);
      return password;
    }

    // Check certificate HTTPS and WSS.
    function setKey(r) {
      if (clientKey === '') {
        clientKey = parseCert(r["headersIn"]["ssl-client-subject-dn"], 'CN');
      }
      var auth = r.headersIn['Authorization'];
      if (auth && auth.length && auth != clientKey) {
        r.error('Authorization header does not match certificate');
        return '';
      }

      return clientKey;
    }

    function calcLen(msb, lsb) {
      if (lsb < 2) {
        lsb = '0' + lsb;
      }

      return parseInt(msb + lsb, 16);
    }

    function parseCert(cert, key) {
      if (cert && cert.length) {
        var pairs = cert.split(',');
        for (var i = 0; i < pairs.length; i++) {
          var pair = pairs[i].split('=');
          if (pair[0].toUpperCase() == key) {
            return pair[1];
          }
        }
      }

      return '';
    }

kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-internal-authorization
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  finalizers:
    - kubernetes.io/pvc-protection
  labels:
    app: {{ .Release.Name }}-nginx-internal
  name: {{ .Release.Name }}-nginx-internal-crl-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nginx-internal
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: nginx-internal
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        component: nginx-internal
    spec:
      containers:
        - image: "{{ .Values.nginx_internal.image.repository }}:{{ .Values.nginx_internal.image.tag }}"
        # - image: busybox
        #   command: ["sleep", "3600"]
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.nginx_internal.image.imagePullPolicy}}
          name: {{ .Release.Name }}-nginx-internal
          ports:
            - containerPort: 8883
              protocol: TCP
            - containerPort: 80
              protocol: TCP
            - containerPort: 8884
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/ssl/certs/dhparam.pem
              name: dhparam
              subPath: dhparam.pem
            - mountPath: /etc/nginx/nginx.conf
              name: nginx-config
              subPath: nginx.conf
            - mountPath: /etc/nginx/authorization.js
              name: nginx-authorization
              subPath: authorization.js
            - mountPath: /etc/ssl/certs/ca.crt
              name: ca
              subPath: ca.crt
            - mountPath: /etc/ssl/certs/mainflux-server
              name: mainflux-server
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 30
      volumes:
        - name: dhparam
          secret:
            defaultMode: 256
            optional: false
            secretName: {{ .Release.Name }}-nginx-internal-dhparam
        - name: nginx-config
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-config
            optional: false
        - name: nginx-authorization
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-nginx-internal-authorization
            optional: false
        - name: nginx-crl-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-nginx-internal-crl-volume
        - name: ca
          secret:
            secretName: {{ .Values.nginxInternal.mtls.intermediateCrt }}
        - name: mainflux-server
          secret:
            secretName: {{ .Values.nginxInternal.mtls.tls }}
---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-nginx-internal
spec:
  selector:
    app: {{ .Release.Name }}
    component: nginx-internal
  ports:
    - port: 8883
      protocol: TCP
      name: mqtt
    - port: 80
      protocol: TCP
      name: http           
{{- end }}
